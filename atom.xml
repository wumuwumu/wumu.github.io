<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梧木的博客</title>
  
  <subtitle>梧木的博客</subtitle>
  <link href="http://wumuwumu.github.io/atom.xml" rel="self"/>
  
  <link href="http://wumuwumu.github.io/"/>
  <updated>2021-02-27T06:13:13.997Z</updated>
  <id>http://wumuwumu.github.io/</id>
  
  <author>
    <name>wumu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringCloudGateway基本操作-WebFlux</title>
    <link href="http://wumuwumu.github.io/posts/ac39e4c0.html"/>
    <id>http://wumuwumu.github.io/posts/ac39e4c0.html</id>
    <published>+020201-01-25T09:00:00.000Z</published>
    <updated>2021-02-27T06:13:13.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Create-a-WebFlux-Handler"><a href="#Create-a-WebFlux-Handler" class="headerlink" title="Create a WebFlux Handler"></a>Create a WebFlux Handler</h2><p>In the Spring Reactive approach, we use a handler to handle the request and create a response, as shown in the following example:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//src/main/java/hello/GreetingHandler.java</span><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">BodyInserters</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreetingHandler</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">></span></span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">ServerResponse</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>TEXT_PLAIN<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">BodyInserters</span><span class="token punctuation">.</span><span class="token function">fromValue</span><span class="token punctuation">(</span><span class="token string">"Hello, Spring!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>This simple reactive class always returns “Hello, Spring!” It could return many other things, including a stream of items from a database, a stream of items that were generated by calculations, and so on. Note the reactive code: a <code>Mono</code> object that holds a <code>ServerResponse</code> body.</p><h2 id="Create-a-Router"><a href="#Create-a-Router" class="headerlink" title="Create a Router"></a>Create a Router</h2><p>In this application, we use a router to handle the only route we expose (“/hello”), as shown in the following example:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//src/main/java/hello/GreetingRouter.java</span><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">RequestPredicates</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">RouterFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">RouterFunctions</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerResponse</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreetingRouter</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> <span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">></span></span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token class-name">GreetingHandler</span> greetingHandler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">RouterFunctions</span>      <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token class-name">RequestPredicates</span><span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">RequestPredicates</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>TEXT_PLAIN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> greetingHandler<span class="token operator">::</span><span class="token function">hello</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>The router listens for traffic on the <code>/hello</code> path and returns the value provided by our reactive handler class.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Create-a-WebFlux-Handler&quot;&gt;&lt;a href=&quot;#Create-a-WebFlux-Handler&quot; class=&quot;headerlink&quot; title=&quot;Create a WebFlux Handler&quot;&gt;&lt;/a&gt;Create a WebFl</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://wumuwumu.github.io/tags/SpringCloud/"/>
    
    <category term="SpringCloudGateway" scheme="http://wumuwumu.github.io/tags/SpringCloudGateway/"/>
    
  </entry>
  
  <entry>
    <title>ZooKeeper1-安装</title>
    <link href="http://wumuwumu.github.io/posts/eb173626.html"/>
    <id>http://wumuwumu.github.io/posts/eb173626.html</id>
    <published>2021-03-05T06:00:00.000Z</published>
    <updated>2021-03-06T14:46:56.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单机"><a href="#单机" class="headerlink" title="单机"></a>单机</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><pre class="language-curl" data-language="curl"><code class="language-curl">https:&#x2F;&#x2F;zookeeper.apache.org&#x2F;releases.html</code></pre><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>初次使用 ZooKeeper 时, 需要将 $ZOOKEEPER_HOME/conf 目录下的 zoo_sample.cfg 重命名为 zoo.cfg, zoo.cfg 默认配置如下:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># The number of milliseconds of each </span><span class="token assign-left variable">ticktickTime</span><span class="token operator">=</span><span class="token number">2000</span><span class="token comment"># The number of ticks that the initial </span><span class="token comment"># synchronization phase can take</span><span class="token assign-left variable">initLimit</span><span class="token operator">=</span><span class="token number">10</span><span class="token comment"># The number of ticks that can pass between </span><span class="token comment"># sending a request and getting an acknowledgement</span><span class="token assign-left variable">syncLimit</span><span class="token operator">=</span><span class="token number">5</span><span class="token comment"># the directory where the snapshot is stored.</span><span class="token comment"># do not use /tmp for storage, /tmp here is just </span><span class="token comment"># example sakes.dataDir=/tmp/zookeeper</span><span class="token comment"># the port at which the clients will connect</span><span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span><span class="token comment"># the maximum number of client connections.</span><span class="token comment"># increase this if you need to handle more clients</span><span class="token comment">#maxClientCnxns=60</span><span class="token comment">#</span><span class="token comment"># Be sure to read the maintenance section of the </span><span class="token comment"># administrator guide before turning on autopurge.</span><span class="token comment">#</span><span class="token comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><span class="token comment">#</span><span class="token comment"># The number of snapshots to retain in dataDir</span><span class="token comment">#autopurge.snapRetainCount=3</span><span class="token comment"># Purge task interval in hours</span><span class="token comment"># Set to "0" to disable auto purge feature</span><span class="token comment">#autopurge.purgeInterval=1</span></code></pre><p>配置项说明如下:</p><ul><li>tickTime: ZooKeeper 中使用的基本时间单元, 以毫秒为单位, 默认值是 2000。它用来调节心跳和超时。例如, 默认的会话超时时间是两倍的 tickTime。</li><li>initLimit: 默认值是 10, 即 tickTime 属性值的 10 倍。它用于配置允许 followers 连接并同步到 leader 的最大时间。如果 ZooKeeper 管理的数据量很大的话可以增加这个值。</li><li>syncLimit: 默认值是 5, 即 tickTime 属性值的 5 倍。它用于配置leader 和 followers 间进行心跳检测的最大延迟时间。如果在设置的时间内 followers 无法与 leader 进行通信, 那么 followers 将会被丢弃。</li><li>dataDir: ZooKeeper 用来存储内存数据库快照的目录, 并且除非指定其它目录, 否则数据库更新的事务日志也将会存储在该目录下。建议配置 dataLogDir 参数来指定 ZooKeeper 事务日志的存储目录。</li><li>clientPort: 服务器监听客户端连接的端口, 也即客户端尝试连接的端口, 默认值是 2181。</li><li>maxClientCnxns: 在 socket 级别限制单个客户端与单台服务器之前的并发连接数量, 可以通过 IP 地址来区分不同的客户端。它用来防止某种类型的 DoS 攻击, 包括文件描述符耗尽。默认值是 60。将其设置为 0 将完全移除并发连接数的限制。</li><li>autopurge.snapRetainCount: 配置 ZooKeeper 在自动清理的时候需要保留的数据文件快照的数量和对应的事务日志文件, 默认值是 3。</li><li>autopurge.purgeInterval: 和参数 autopurge.snapRetainCount 配套使用, 用于配置 ZooKeeper 自动清理文件的频率, 默认值是 1, 即默认开启自动清理功能, 设置为 0 则表示禁用自动清理功能。</li></ul><p>更多 ZooKeeper 配置后面会写文章详细描述。</p><h2 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h2><hr><ol><li><p>zoo.cfg配置</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">ticketTime<span class="token operator">=</span><span class="token number">2000</span>clientPort<span class="token operator">=</span><span class="token number">2181</span>dataDir<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>zookeeper<span class="token operator">/</span>datadataLogDir<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>zookeeper<span class="token operator">/</span>logs</code></pre></li><li><p>启动 ZooKeeper 服务</p></li></ol><p>可以使用如下命令来启动 ZooKeeper 服务</p><pre class="language-css" data-language="css"><code class="language-css">zkServer.sh start</code></pre><p>服务启动信息如下:</p><p><img src="https://static.oschina.net/uploads/img/201607/09230216_6V5D.png" alt="img"></p><ol><li>验证 ZooKeeper 服务</li></ol><p>服务启动完成后, 可以使用 telnet 和 stat 命令验证服务器启动是否正常:</p><p><img src="https://static.oschina.net/uploads/img/201607/09230628_Royv.png" alt="img"></p><p>在单机模式中, Mode 的值是 “standalone”。</p><ol><li>停止 ZooKeeper 服务</li></ol><p>想要停止 ZooKeeper 服务, 可以使用如下命令:</p><pre class="language-css" data-language="css"><code class="language-css">zkServer.sh stop</code></pre><p>服务停止信息如下:</p><p><img src="https://static.oschina.net/uploads/img/201607/09231902_N5Rw.png" alt="img"></p><h2 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h2><hr><ol><li>zoo.cfg配置</li></ol><p>在 master 机器上, 在单机模式的配置文件下增加了最后 5 行配置:</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">ticketTime<span class="token operator">=</span><span class="token number">2000</span>clientPort<span class="token operator">=</span><span class="token number">2181</span>dataDir<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>zookeeper<span class="token operator">/</span>datadataLogDir<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>zookeeper<span class="token operator">/</span>logsinitLimit<span class="token operator">=</span><span class="token number">10</span>syncLimit<span class="token operator">=</span><span class="token number">5</span>server<span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">=</span>master<span class="token operator">:</span><span class="token number">2888</span><span class="token operator">:</span><span class="token number">3888</span>server<span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">=</span>slave01<span class="token operator">:</span><span class="token number">2888</span><span class="token operator">:</span><span class="token number">3888</span>server<span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">=</span>slave02<span class="token operator">:</span><span class="token number">2888</span><span class="token operator">:</span><span class="token number">3888</span></code></pre><p>相关配置说明:</p><ul><li><p>集群模式中, 集群中的每台机器都需要感知其它机器, 在 zoo.cfg 配置文件中, 可以按照如下格式进行配置, 每一行代表一台服务器配置:</p><pre class="language-undefined" data-language="undefined"><code class="language-undefined">server.id&#x3D;host:port:port</code></pre><p>id 被称为 Server ID, 用来标识服务器在集群中的序号。同时每台 ZooKeeper 服务器上, 都需要在数据目录(即 dataDir 指定的目录) 下创建一个 myid 文件, 该文件只有一行内容, 即对应于每台服务器的Server ID。</p></li><li><p>ZooKeeper 集群中, 每台服务器上的 zoo.cfg 配置文件内容一致。</p></li><li><p>server.1 的 myid 文件内容就是 “1”。每个服务器的 myid 内容都不同, 且需要保证和自己的 zoo.cfg 配置文件中 “server.id=host:port:port” 的 id 值一致。</p></li><li><p>id 的范围是 1 ~ 255。</p></li></ul><ol><li>创建myid文件</li></ol><p>在 dataDir 指定的目录下 (即 /opt/zookeeper/data 目录) 创建名为 myid 的文件, 文件内容和 zoo.cfg 中当前机器的 id 一致。根据上述配置, master 的 myid 文件内容为 1。</p><ol><li>slave配置</li></ol><p>按照相同步骤, 为 slave01 和 slave02 配置 zoo.cfg 和 myid 文件。zoo.cfg文件内容相同, slave01 的 myid 文件内容为 2, slave02 的 myid 文件内容为 3。</p><ol><li>集群启动</li></ol><p>在集群中的每台机器上执行以下启动命令:</p><pre class="language-css" data-language="css"><code class="language-css">zkServer.sh start</code></pre><p>启动信息如下:</p><p><img src="https://static.oschina.net/uploads/img/201607/10003352_Cbks.png" alt="img"></p><p><img src="https://static.oschina.net/uploads/img/201607/10003628_6l47.png" alt="img"></p><p>master 和 slave01 两台服务器的 Mode 值均为 follower, 表明它们在集群中的角色为 Follower。</p><p><img src="https://static.oschina.net/uploads/img/201607/10003835_gyYt.png" alt="img"></p><p>slave02 服务器的 Mode 值为 leader, 表明它在集群中的角色为 Leader。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.jianshu.com/p/de90172ea680">https://www.jianshu.com/p/de90172ea680</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单机&quot;&gt;&lt;a href=&quot;#单机&quot; class=&quot;headerlink&quot; title=&quot;单机&quot;&gt;&lt;/a&gt;单机&lt;/h1&gt;&lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;pre c</summary>
      
    
    
    
    
    <category term="ZooKeeper" scheme="http://wumuwumu.github.io/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>VuePress搭建文档网站</title>
    <link href="http://wumuwumu.github.io/posts/0.html"/>
    <id>http://wumuwumu.github.io/posts/0.html</id>
    <published>2021-02-27T06:00:00.000Z</published>
    <updated>2021-03-01T06:18:52.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工程构建"><a href="#工程构建" class="headerlink" title="工程构建"></a>工程构建</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> stong-user-manual <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> stong-user-manual<span class="token function">yarn</span> init<span class="token function">yarn</span> <span class="token function">add</span> -D vuepress<span class="token comment">## 按照常用插件</span><span class="token function">yarn</span> <span class="token function">add</span> -D vuepress-bar boboidream/vuepress-plugin-rpurl vuepress-plugin-permalink-pinyin<span class="token function">mkdir</span> content</code></pre><h2 id="配置package-json"><a href="#配置package-json" class="headerlink" title="配置package.json"></a>配置package.json</h2><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"vuepress dev content"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vuepress build content"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="创建工程结构"><a href="#创建工程结构" class="headerlink" title="创建工程结构"></a>创建工程结构</h1><p><img src="http://wumu.rescreate.cn/image20210301141728.png"></p><h1 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h1><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> getConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vuepress-bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> nav<span class="token punctuation">,</span> sidebar <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span><span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"permalink-pinyin"</span><span class="token punctuation">,</span> <span class="token string">"rpurl"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  title<span class="token operator">:</span> <span class="token string">"title"</span><span class="token punctuation">,</span>  description<span class="token operator">:</span> <span class="token string">"description"</span><span class="token punctuation">,</span>  themeConfig<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    logo<span class="token operator">:</span> <span class="token string">"/assets/img/logo.png"</span><span class="token punctuation">,</span>    nav<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> text<span class="token operator">:</span> <span class="token string">"官网"</span><span class="token punctuation">,</span> link<span class="token operator">:</span> <span class="token string">"http://www.sciento.cn/"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token operator">...</span>nav<span class="token punctuation">]</span><span class="token punctuation">,</span>    sidebar<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;工程构建&quot;&gt;&lt;a href=&quot;#工程构建&quot; class=&quot;headerlink&quot; title=&quot;工程构建&quot;&gt;&lt;/a&gt;工程构建&lt;/h1&gt;&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;lang</summary>
      
    
    
    
    
    <category term="公司" scheme="http://wumuwumu.github.io/tags/%E5%85%AC%E5%8F%B8/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloudSentinel学习2-Nacos储存规则</title>
    <link href="http://wumuwumu.github.io/posts/88fae02d.html"/>
    <id>http://wumuwumu.github.io/posts/88fae02d.html</id>
    <published>2021-02-19T06:00:00.000Z</published>
    <updated>2021-02-27T06:13:14.018Z</updated>
    
    <content type="html"><![CDATA[<p>要通过 Sentinel 控制台配置集群流控规则，需要对控制台进行改造。主要改造规则可以参考：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>alibaba<span class="token operator">/</span>Sentinel<span class="token operator">/</span>wiki<span class="token operator">/</span>Sentinel<span class="token operator">-</span>控制台（集群流控管理）#规则配置</code></pre><p>其控制台推送规则：</p><ul><li>将规则推送到Nacos或其他远程配置中心</li><li>Sentinel客户端链接Nacos，获取规则配置；并监听Nacos配置变化，如发生变化，就更新本地缓存。</li></ul><p>控制台监听Nacos配置变化，如发生变化就更新本地缓存。从而让控制台本地缓存总是和Nacos一致。</p><h1 id="改造Sentinel"><a href="#改造Sentinel" class="headerlink" title="改造Sentinel"></a>改造Sentinel</h1><p>下载Sentinel 源代码，然后对sentinel-dashboard模块进行改造</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>alibaba<span class="token operator">/</span>Sentinel<span class="token operator">/</span>archive<span class="token operator">/</span><span class="token number">1.7</span><span class="token number">.2</span><span class="token punctuation">.</span>zip</code></pre><ul><li>对pom.xml进行修改</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>sentinel<span class="token operator">-</span>datasource<span class="token operator">-</span>nacos<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>将**<scope>test</scope>**注释掉</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>sentinel<span class="token operator">-</span>datasource<span class="token operator">-</span>nacos<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><ul><li>修改java代码</li></ul><p>找到如下目录（位于test目录）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">sentinel<span class="token operator">-</span>dashboard<span class="token operator">/</span>src<span class="token operator">/</span>test<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>alibaba<span class="token operator">/</span>csp<span class="token operator">/</span>sentinel<span class="token operator">/</span>dashboard<span class="token operator">/</span>rule<span class="token operator">/</span>nacos</code></pre><p>将整个目录拷贝到</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">sentinel<span class="token operator">-</span>dashboard<span class="token operator">/</span>src<span class="token operator">/</span>main<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>alibaba<span class="token operator">/</span>csp<span class="token operator">/</span>sentinel<span class="token operator">/</span>dashboard<span class="token operator">/</span>rule<span class="token operator">/</span>nacos</code></pre><ul><li>修改com.alibaba.csp.sentinel.dashboard.controller.v2.FlowControllerV2.java</li></ul><p><img src="http://wumu.rescreate.cn/image20210219164606.png">修改成</p><ul><li><p><img src="http://wumu.rescreate.cn/image20210219164634.png">修改HTML页面</p></li><li><p>修改配置文件</p><ul><li><p>NacosConfig.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ConfigService</span> <span class="token function">nacosConfigService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Properties</span> properties<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosServerUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span>SERVER_ADDR<span class="token punctuation">,</span> <span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosServerUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span>SERVER_ADDR<span class="token punctuation">,</span><span class="token string">"localhost:8848"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosServerNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span>NAMESPACE<span class="token punctuation">,</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosServerNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span>USERNAME<span class="token punctuation">,</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span>PASSWORD<span class="token punctuation">,</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">ConfigFactory</span><span class="token punctuation">.</span><span class="token function">createConfigService</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>DashBoardConfig.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DashboardConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_MACHINE_HEALTHY_TIMEOUT_MS <span class="token operator">=</span> <span class="token number">60_000</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Login username     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_AUTH_USERNAME <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.auth.username"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Login password     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_AUTH_PASSWORD <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.auth.password"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Hide application name in sidebar when it has no healthy machines after specific period in millisecond.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_HIDE_APP_NO_MACHINE_MILLIS <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.app.hideAppNoMachineMillis"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Remove application when it has no healthy machines after specific period in millisecond.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_REMOVE_APP_NO_MACHINE_MILLIS <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.removeAppNoMachineMillis"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Timeout     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_UNHEALTHY_MACHINE_MILLIS <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.unhealthyMachineMillis"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Auto remove unhealthy machine after specific period in millisecond.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_AUTO_REMOVE_MACHINE_MILLIS <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.autoRemoveMachineMillis"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_NACOS_SERVER_URL  <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.nacos.server"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_NACOS_SERVER_NAMESPACE <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.nacos.namespace"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_NACOS_USERNAME <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.nacos.username"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_NACOS_PASSWORD <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.nacos.password"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> cacheMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// env</span>        <span class="token class-name">String</span> val <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// properties</span>        val <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> val <span class="token operator">=</span> <span class="token function">getConfig</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cacheMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getConfigInt</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> defaultVal<span class="token punctuation">,</span> <span class="token keyword">int</span> minVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token class-name">NumberUtils</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token function">getConfig</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            val <span class="token operator">=</span> defaultVal<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> minVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            val <span class="token operator">=</span> minVal<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cacheMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getAuthUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span>CONFIG_AUTH_USERNAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getAuthPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span>CONFIG_AUTH_PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getHideAppNoMachineMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigInt</span><span class="token punctuation">(</span>CONFIG_HIDE_APP_NO_MACHINE_MILLIS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getRemoveAppNoMachineMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigInt</span><span class="token punctuation">(</span>CONFIG_REMOVE_APP_NO_MACHINE_MILLIS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">120000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getAutoRemoveMachineMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigInt</span><span class="token punctuation">(</span>CONFIG_AUTO_REMOVE_MACHINE_MILLIS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">300000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getUnhealthyMachineMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigInt</span><span class="token punctuation">(</span>CONFIG_UNHEALTHY_MACHINE_MILLIS<span class="token punctuation">,</span> DEFAULT_MACHINE_HEALTHY_TIMEOUT_MS<span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cacheMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getConfigNacosServerUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span>CONFIG_NACOS_SERVER_URL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getConfigNacosServerNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span>CONFIG_NACOS_SERVER_NAMESPACE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getConfigNacosUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span>CONFIG_NACOS_USERNAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getConfigNacosPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span>CONFIG_NACOS_PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>sidebar.html页面</p></li></ul><p><code>sentinel-dashboard/src/main/webapp/resources/app/scripts/directives/sidebar.html</code>并找到如下代码段后，并把注释放开</p><p><img src="https://bytetrick.com/upload/2020/10/image-7bc469b8c8854cc1a61b3bd7e90fff4e.png">经过以上步骤就已经把流控规则改造成推模式持久化了。</p><ul><li><p>修改请求接口</p><p>src/main/webapp/resources/app/scripts/controllers/identity.js</p><p><img src="http://wumu.rescreate.cn/image20210220152130.png"></p></li></ul><p><strong>0x02：编译生成jar包</strong></p><p>执行命令</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">mvn clean <span class="token keyword">package</span> <span class="token operator">-</span>DskipTests</code></pre><p>编译成功后，在项目的 target 目录可以找到sentinel-dashboard.jar ，执行以下命令可以启动控制台：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">java <span class="token operator">-</span>jar sentinel<span class="token operator">-</span>dashboard<span class="token punctuation">.</span>jar</code></pre><p><strong>0x03：改造微服务</strong></p><ul><li>新建项目olive-nacos-sentinel-datasource</li></ul><p>对应的pom.xml文件引入</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>project xmlns<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0"</span> xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>    xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>modelVersion<span class="token operator">></span><span class="token number">4.0</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>modelVersion<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>sentinel<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>olive<span class="token operator">-</span>nacos<span class="token operator">-</span>sentinel<span class="token operator">-</span>datasource<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">0.0</span><span class="token number">.1</span><span class="token operator">-</span><span class="token constant">SNAPSHOT</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span>packaging<span class="token operator">></span>jar<span class="token operator">&lt;</span><span class="token operator">/</span>packaging<span class="token operator">></span>    <span class="token operator">&lt;</span>parent<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>parent<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.1</span><span class="token number">.3</span><span class="token punctuation">.</span><span class="token constant">RELEASE</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>relativePath<span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> lookup parent <span class="token keyword">from</span> repository <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>olive<span class="token operator">-</span>nacos<span class="token operator">-</span>sentinel<span class="token operator">-</span>datasource<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>url<span class="token operator">></span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>org<span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">></span>    <span class="token operator">&lt;</span>properties<span class="token operator">></span>        <span class="token operator">&lt;</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token operator">></span><span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token operator">></span>        <span class="token operator">&lt;</span>java<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>java<span class="token punctuation">.</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span>    <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>alibaba<span class="token operator">-</span>sentinel<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>sentinel<span class="token operator">-</span>datasource<span class="token operator">-</span>nacos<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span>dependencyManagement<span class="token operator">></span>        <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>dependencies<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>Greenwich<span class="token punctuation">.</span><span class="token constant">SR3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>                <span class="token operator">&lt;</span>type<span class="token operator">></span>pom<span class="token operator">&lt;</span><span class="token operator">/</span>type<span class="token operator">></span>                <span class="token operator">&lt;</span>scope<span class="token operator">></span><span class="token keyword">import</span><span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>alibaba<span class="token operator">-</span>dependencies<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.1</span><span class="token number">.0</span><span class="token punctuation">.</span><span class="token constant">RELEASE</span> <span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>                <span class="token operator">&lt;</span>type<span class="token operator">></span>pom<span class="token operator">&lt;</span><span class="token operator">/</span>type<span class="token operator">></span>                <span class="token operator">&lt;</span>scope<span class="token operator">></span><span class="token keyword">import</span><span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencyManagement<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token operator">></span></code></pre><ul><li>新建SpringBoot启动类</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">package</span> com<span class="token punctuation">.</span>olive<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token comment">/** * Hello world! * */</span>@SpringBootApplication<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">String<span class="token punctuation">[</span><span class="token punctuation">]</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>class<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>创建控制器</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">package</span> com<span class="token punctuation">.</span>olive<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>@RestController<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    @<span class="token function">GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token string">"000000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>修改配置文件application.yml</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript">spring<span class="token operator">:</span>  application<span class="token operator">:</span>    name<span class="token operator">:</span> olive<span class="token operator">-</span>nacos<span class="token operator">-</span>sentinel<span class="token operator">-</span>datasource  cloud<span class="token operator">:</span>    sentinel<span class="token operator">:</span>      transport<span class="token operator">:</span>        dashboard<span class="token operator">:</span> localhost<span class="token operator">:</span><span class="token number">8080</span>      datasource<span class="token operator">:</span>        # 名称随意        flow<span class="token operator">:</span>          nacos<span class="token operator">:</span>            server<span class="token operator">-</span>addr<span class="token operator">:</span> localhost<span class="token operator">:</span><span class="token number">8848</span>            dataId<span class="token operator">:</span> $<span class="token punctuation">&#123;</span>spring<span class="token punctuation">.</span>application<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">-</span>flow<span class="token operator">-</span>rules            groupId<span class="token operator">:</span> <span class="token constant">SENTINEL_GROUP</span>            # 规则类型，取值见：            # org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>RuleType            rule<span class="token operator">-</span>type<span class="token operator">:</span> flowserver<span class="token operator">:</span>  port<span class="token operator">:</span> <span class="token number">8866</span></code></pre><p><strong>0x04：验证</strong></p><p><strong>主要验证场景</strong></p><ul><li>场景1：用Sentinel控制台【菜单栏的 流控规则 V1 】推送流控规则，规则会存储到Nacos；</li><li>场景2：直接在Nacos上修改流控规则，然后刷新Sentinel控制台，控制台上的显示也会被修改；</li><li>场景3：重启Sentinel控制台，并重启微服务；刷新控制台，可以发现规则依然存在。</li></ul><p><strong>启动服务</strong></p><ul><li>Sentinel控制台</li><li>Nacos</li><li>olive-nacos-sentinel-datasource</li></ul><p><strong>Nacos中创建限流规则的配置</strong></p><p> <a href="http://127.0.0.1:8848/nacos/#/login">http://127.0.0.1:8848/nacos/#/login</a></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token string">"resource"</span><span class="token operator">:</span> <span class="token string">"/getUser"</span><span class="token punctuation">,</span>        <span class="token string">"limitApp"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>        <span class="token string">"grade"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"count"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token string">"strategy"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token string">"controlBehavior"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token string">"clusterMode"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre><p>如下图</p><p><img src="http://wumu.rescreate.cn/image20210219164855.png"><strong>访问接口（olive-nacos-sentinel-datasource服务提供的接口）</strong></p><p>​     <a href="http://localhost:8866/getUser">http://localhost:8866/getUser</a></p><p><strong>访问Sentinel控制台</strong></p><p>​     <a href="http://127.0.0.1:8080/#/login">http://127.0.0.1:8080/#/login</a></p><p><img src="http://wumu.rescreate.cn/image20210219164912.png">以上这条记录就是在Nacos中配置的限流规则。可以测试在<strong>Sentinel控制台</strong>修改规则是否同步到<strong>Nacos，</strong>或者在<strong>Nacos</strong>上修改规则是否同步到<strong>Sentinel控制台</strong>。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://cloud.tencent.com/developer/article/1665816">https://cloud.tencent.com/developer/article/1665816</a></p><p><a href="https://blog.csdn.net/EnjoyEDU/article/details/109587953">https://blog.csdn.net/EnjoyEDU/article/details/109587953</a></p></blockquote><p>配置sentinel持久化nacos</p><blockquote><p><a href="https://bytetrick.com/archives/sentinel-dashboard%E6%8C%81%E4%B9%85%E5%8C%96nacos">https://bytetrick.com/archives/sentinel-dashboard%E6%8C%81%E4%B9%85%E5%8C%96nacos</a></p><p><a href="https://blog.csdn.net/u014386444/article/details/112064291">https://blog.csdn.net/u014386444/article/details/112064291</a></p><p><a href="https://www.cnblogs.com/jian0110/p/14139044.html">https://www.cnblogs.com/jian0110/p/14139044.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;要通过 Sentinel 控制台配置集群流控规则，需要对控制台进行改造。主要改造规则可以参考：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; data-language=&quot;javascript&quot;&gt;&lt;code class=&quot;language-jav</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://wumuwumu.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloudSentinel学习1-安装</title>
    <link href="http://wumuwumu.github.io/posts/4bd69169.html"/>
    <id>http://wumuwumu.github.io/posts/4bd69169.html</id>
    <published>2021-02-19T04:00:00.000Z</published>
    <updated>2021-02-27T06:13:14.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h1><h2 id="获取-Sentinel-控制台"><a href="#获取-Sentinel-控制台" class="headerlink" title="获取 Sentinel 控制台"></a>获取 Sentinel 控制台</h2><p>您可以从 <a href="https://github.com/alibaba/Sentinel/releases">release 页面</a> 下载最新版本的控制台 jar 包。</p><p>您也可以从最新版本的源码自行构建 Sentinel 控制台：</p><ul><li>下载 <a href="https://github.com/alibaba/Sentinel/tree/master/sentinel-dashboard">控制台</a> 工程</li><li>使用以下命令将代码打包成一个 fat jar: <code>mvn clean package</code></li></ul><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><blockquote><p><strong>注意</strong>：启动 Sentinel 控制台需要 JDK 版本为 1.8 及以上版本。</p></blockquote><p>使用如下命令启动控制台：</p><pre class="language-bash" data-language="bash"><code class="language-bash">java -Dserver.port<span class="token operator">=</span><span class="token number">8080</span> -Dcsp.sentinel.dashboard.server<span class="token operator">=</span>localhost:8080 -Dproject.name<span class="token operator">=</span>sentinel-dashboard -jar sentinel-dashboard.jar</code></pre><p>其中 <code>-Dserver.port=8080</code> 用于指定 Sentinel 控制台端口为 <code>8080</code>。</p><p>从 Sentinel 1.6.0 起，Sentinel 控制台引入基本的<strong>登录</strong>功能，默认用户名和密码都是 <code>sentinel</code>。可以参考 <a href="https://sentinelguard.io/zh-cn/docs/dashboard.html#%E9%89%B4%E6%9D%83">鉴权模块文档</a> 配置用户名和密码。</p><blockquote><p>注：若您的应用为 Spring Boot 或 Spring Cloud 应用，您可以通过 Spring 配置文件来指定配置，详情请参考 <a href="https://github.com/spring-cloud-incubator/spring-cloud-alibaba/wiki/Sentinel">Spring Cloud Alibaba Sentinel 文档</a>。</p></blockquote><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><ul><li><p>Clone project</p><pre class="language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;zhoutaoo&#x2F;sentinel-dashboard-docker.git</code></pre></li><li><p>Build Image</p><pre class="language-none"><code class="language-none">cd builddocker build -t cike&#x2F;sentinel-dashboard-docker .</code></pre></li><li><p>Run With docker</p></li></ul><pre class="language-none"><code class="language-none">docker run -p 8021:8021 -it cike&#x2F;sentinel-dashboard-docker</code></pre><ul><li><p>Run With docker-compose</p><pre class="language-none"><code class="language-none">docker-compose up</code></pre></li><li><p>Open the Sentinel Dashboard console in your browser</p><p>link：<a href="http://127.0.0.1:8021/">http://127.0.0.1:8021/</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;手动安装&quot;&gt;&lt;a href=&quot;#手动安装&quot; class=&quot;headerlink&quot; title=&quot;手动安装&quot;&gt;&lt;/a&gt;手动安装&lt;/h1&gt;&lt;h2 id=&quot;获取-Sentinel-控制台&quot;&gt;&lt;a href=&quot;#获取-Sentinel-控制台&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://wumuwumu.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloudFeign学习2-自定义负载均衡规则</title>
    <link href="http://wumuwumu.github.io/posts/287249d4.html"/>
    <id>http://wumuwumu.github.io/posts/287249d4.html</id>
    <published>2021-02-19T03:00:00.000Z</published>
    <updated>2021-02-27T06:13:14.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GrayMetadataRule</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractLoadBalancerRule</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">NacosDiscoveryProperties</span> nacosDiscoveryProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">NacosServiceManager</span> nacosServiceManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span><span class="token class-name">IClientConfig</span> iClientConfig<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Server</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> clusterName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> group <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DynamicServerListLoadBalancer</span> loadBalancer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DynamicServerListLoadBalancer</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> loadBalancer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">NamingService</span> namingService <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nacosServiceManager<span class="token punctuation">.</span><span class="token function">getNamingService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">getNacosProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span> instances <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            instances <span class="token operator">=</span> namingService<span class="token punctuation">.</span><span class="token function">selectInstances</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instances <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> instances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"没有相关服务 &#123;&#125;"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找到相关服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NacosServer</span><span class="token punctuation">(</span>instances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.cnblogs.com/ITPower/p/13353248.html">https://www.cnblogs.com/ITPower/p/13353248.html</a></p><p><a href="https://blog.csdn.net/forezp/article/details/74820899">https://blog.csdn.net/forezp/article/details/74820899</a></p><p><a href="https://blog.didispace.com/springcloud-sourcecode-ribbon/">https://blog.didispace.com/springcloud-sourcecode-ribbon/</a></p><p><a href="https://www.cnblogs.com/rickiyang/p/11802465.html">https://www.cnblogs.com/rickiyang/p/11802465.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;headerlink&quot; title=&quot;实战&quot;&gt;&lt;/a&gt;实战&lt;/h1&gt;&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-jav</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://wumuwumu.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Feign添加认证请求头</title>
    <link href="http://wumuwumu.github.io/posts/6a05c2e6.html"/>
    <id>http://wumuwumu.github.io/posts/6a05c2e6.html</id>
    <published>2021-02-02T08:00:00.000Z</published>
    <updated>2021-02-27T06:13:14.010Z</updated>
    
    <content type="html"><![CDATA[<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">feign<span class="token punctuation">.</span></span><span class="token class-name">RequestInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">feign<span class="token punctuation">.</span></span><span class="token class-name">RequestTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Authentication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SecurityContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">OAuth2AuthenticationDetails</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignOauth2RequestInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">RequestInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> AUTHORIZATION_HEADER <span class="token operator">=</span> <span class="token string">"Authorization"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> BEARER_TOKEN_TYPE <span class="token operator">=</span> <span class="token string">"Bearer"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">RequestTemplate</span> requestTemplate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SecurityContext</span> securityContext <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> securityContext<span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>authentication <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> authentication<span class="token punctuation">.</span><span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">OAuth2AuthenticationDetails</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">OAuth2AuthenticationDetails</span> details <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OAuth2AuthenticationDetails</span><span class="token punctuation">)</span> authentication<span class="token punctuation">.</span><span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            requestTemplate<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span>AUTHORIZATION_HEADER<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s %s"</span><span class="token punctuation">,</span> BEARER_TOKEN_TYPE<span class="token punctuation">,</span> details<span class="token punctuation">.</span><span class="token function">getTokenValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token nam</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://wumuwumu.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity3-Oauth2自定义返回</title>
    <link href="http://wumuwumu.github.io/posts/2af70476.html"/>
    <id>http://wumuwumu.github.io/posts/2af70476.html</id>
    <published>2021-02-02T06:00:00.000Z</published>
    <updated>2021-02-27T06:13:13.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="token返回"><a href="#token返回" class="headerlink" title="token返回"></a>token返回</h1><h2 id="扩展参数"><a href="#扩展参数" class="headerlink" title="扩展参数"></a>扩展参数</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CusTokenConverter</span> <span class="token keyword">implements</span> <span class="token class-name">TokenEnhancer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">OAuth2AccessToken</span> <span class="token function">enhance</span><span class="token punctuation">(</span><span class="token class-name">OAuth2AccessToken</span> accessToken<span class="token punctuation">,</span> <span class="token class-name">OAuth2Authentication</span> authentication<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> additionalInformation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span> <span class="token string">"wumu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        additionalInformation<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefaultOAuth2AccessToken</span><span class="token punctuation">)</span> accessToken<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAdditionalInformation</span><span class="token punctuation">(</span>additionalInformation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> accessToken<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="重新格式化返回结果"><a href="#重新格式化返回结果" class="headerlink" title="重新格式化返回结果"></a>重新格式化返回结果</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/oauth"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OauthController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">TokenEndpoint</span> tokenEndpoint<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/token"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token class-name">Principal</span> principal<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> parameters<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">HttpRequestMethodNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">custom</span><span class="token punctuation">(</span>tokenEndpoint<span class="token punctuation">.</span><span class="token function">getAccessToken</span><span class="token punctuation">(</span>principal<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/token"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">postAccessToken</span><span class="token punctuation">(</span><span class="token class-name">Principal</span> principal<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> parameters<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">HttpRequestMethodNotSupportedException</span><span class="token punctuation">,</span> <span class="token class-name">HttpRequestMethodNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">custom</span><span class="token punctuation">(</span>tokenEndpoint<span class="token punctuation">.</span><span class="token function">postAccessToken</span><span class="token punctuation">(</span>principal<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//自定义返回格式</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">custom</span><span class="token punctuation">(</span><span class="token class-name">OAuth2AccessToken</span> accessToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DefaultOAuth2AccessToken</span> token <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DefaultOAuth2AccessToken</span><span class="token punctuation">)</span> accessToken<span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">getAdditionalInformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"accessToken"</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">getRefreshToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"refreshToken"</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span><span class="token function">getRefreshToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="认证错误"><a href="#认证错误" class="headerlink" title="认证错误"></a>认证错误</h1><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionConfig</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@ResponseBody</span>        <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">OAuth2Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">handleOauth2</span><span class="token punctuation">(</span><span class="token class-name">OAuth2Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> map<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://blog.csdn.net/u012702547/article/details/105804972">https://blog.csdn.net/u012702547/article/details/105804972</a></p><p><a href="https://juejin.cn/post/6857296054392471559">https://juejin.cn/post/6857296054392471559</a></p><p><a href="https://blog.csdn.net/u013905744/article/details/100637224">https://blog.csdn.net/u013905744/article/details/100637224</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;token返回&quot;&gt;&lt;a href=&quot;#token返回&quot; class=&quot;headerlink&quot; title=&quot;token返回&quot;&gt;&lt;/a&gt;token返回&lt;/h1&gt;&lt;h2 id=&quot;扩展参数&quot;&gt;&lt;a href=&quot;#扩展参数&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringSecurity-利用jwt生成token</title>
    <link href="http://wumuwumu.github.io/posts/46051755.html"/>
    <id>http://wumuwumu.github.io/posts/46051755.html</id>
    <published>2021-01-31T12:00:00.000Z</published>
    <updated>2021-02-27T06:13:13.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>实现Token的方式有很多，本篇介绍的是利用Json Web Token(JWT)生成的Token.JWT生成的Token有什么好处呢？</p><ul><li>安全性比较高，加上密匙加密而且支持多种算法。</li><li>携带的信息是自定义的，而且可以做到验证token是否过期。</li><li>验证信息可以由前端保存，后端不需要为保存token消耗内存。</li></ul><p>本篇分3部分进行讲解。</p><ul><li><ol><li>什么是JWT</li></ol></li><li><ol><li>JWT的代码实现<ul><li>用HS256 对称算法加密</li><li>用RS256 非对称算法加密</li></ul></li></ol></li><li><ol><li>总结</li></ol></li></ul><blockquote><p>如果原理很难懂，没关系。可以直接看JWT的代码实现。代码已经上传<a href="https://links.jianshu.com/go?to=https://github.com/MyBaron/JAVA_JWT_Token">github</a>。已经对代码进行封装成工具类。可以直接使用。</p></blockquote><h2 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h2><p>JSON Web Token 简称JWT。<br> 一个JWT实际上就是一个字符串，它由三部分组成，<code>头部</code>、<code>载荷</code>与<code>签名</code>。<br> JWT生成的token是这样的</p><pre class="language-css" data-language="css"><code class="language-css">eyJpc3MiOiJKb2huI.eyJpc3MiOiJ.Kb2huIFd1IEp</code></pre><blockquote><p>生成的token，是3段，用<code>.</code>连接。下面有解释。</p></blockquote><h3 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h3><p>用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以被表示成一个JSON对象。<br> 例如：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>   <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">,</span>  <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">&#125;</span></code></pre><h3 id="载荷"><a href="#载荷" class="headerlink" title="载荷"></a>载荷</h3><p>其实就是自定义的数据，一般存储用户Id，过期时间等信息。也就是JWT的核心所在，因为这些数据就是使后端知道此token是哪个用户已经登录的凭证。而且这些数据是存在token里面的，由前端携带，所以后端几乎不需要保存任何数据。<br> 例如：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"uid"</span><span class="token operator">:</span> <span class="token string">"xxxxidid"</span><span class="token punctuation">,</span>  <span class="token comment">//用户id</span>  <span class="token property">"exp"</span><span class="token operator">:</span> <span class="token string">"12121212"</span>  <span class="token comment">//过期时间</span><span class="token punctuation">&#125;</span></code></pre><h3 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h3><p>签名其实就是：<br> 1.头部和载荷<code>各自base64加密后用.连接起来</code>，然后就形成了xxx.xx的前两段token。<br> 2.最后一段token的形成是，前两段加入一个密匙用HS256算法或者其他算法加密形成。</p><ol><li>所以token3段的形成就是在签名处形成的。</li></ol><blockquote><p><a href="https://links.jianshu.com/go?to=http://blog.leapoahead.com/2015/09/06/understanding-jwt/">JWT的原理参考文章</a></p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>1.看代码前一定要知道JWT是由<code>头部</code>、<code>载荷</code>与<code>签名</code>组成。<br> 2.<a href="https://links.jianshu.com/go?to=https://github.com/MyBaron/JAVA_JWT_Token">代码已上传github</a>,希望点个赞</p><ol><li>代码将JWT封装成两个工具类，可以直接调用。</li></ol><h3 id="需要下载的jar包"><a href="#需要下载的jar包" class="headerlink" title="需要下载的jar包"></a>需要下载的jar包</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.nimbusds<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nimbus-jose-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="HS256-对称加密"><a href="#HS256-对称加密" class="headerlink" title="HS256  对称加密"></a>HS256  对称加密</h3><h4 id="生成token"><a href="#生成token" class="headerlink" title="生成token"></a>生成token</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 创建秘钥    */</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> SECRET <span class="token operator">=</span> <span class="token string">"6MNSobBRCHGIO0fS6MNSobBRCHGIO0fS"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/**    * 过期时间5秒    */</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> EXPIRE_TIME <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment">/**    * 生成Token    * @param account    * @return    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">buildJWT</span><span class="token punctuation">(</span><span class="token class-name">String</span> account<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token comment">/**            * 1.创建一个32-byte的密匙            */</span>           <span class="token class-name">MACSigner</span> macSigner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MACSigner</span><span class="token punctuation">(</span>SECRET<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/**            * 2. 建立payload 载体            */</span>           <span class="token class-name">JWTClaimsSet</span> claimsSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JWTClaimsSet</span><span class="token punctuation">.</span><span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">subject</span><span class="token punctuation">(</span><span class="token string">"doi"</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">issuer</span><span class="token punctuation">(</span><span class="token string">"http://www.doiduoyi.com"</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">expirationTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> EXPIRE_TIME<span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"ACCOUNT"</span><span class="token punctuation">,</span>account<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/**            * 3. 建立签名            */</span>           <span class="token class-name">SignedJWT</span> signedJWT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SignedJWT</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JWSHeader</span><span class="token punctuation">(</span><span class="token class-name">JWSAlgorithm</span><span class="token punctuation">.</span>HS256<span class="token punctuation">)</span><span class="token punctuation">,</span> claimsSet<span class="token punctuation">)</span><span class="token punctuation">;</span>           signedJWT<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>macSigner<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/**            * 4. 生成token            */</span>           <span class="token class-name">String</span> token <span class="token operator">=</span> signedJWT<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> token<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KeyLengthException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JOSEException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h4 id="验证token"><a href="#验证token" class="headerlink" title="验证token"></a>验证token</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 校验token    * @param token    * @return    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">vaildToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">SignedJWT</span> jwt <span class="token operator">=</span> <span class="token class-name">SignedJWT</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">JWSVerifier</span> verifier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MACVerifier</span><span class="token punctuation">(</span>SECRET<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//校验是否有效</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>verifier<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Token 无效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//校验超时</span>           <span class="token class-name">Date</span> expirationTime <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getJWTClaimsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpirationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>expirationTime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Token 已过期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//获取载体中的数据</span>           <span class="token class-name">Object</span> account <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getJWTClaimsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClaim</span><span class="token punctuation">(</span><span class="token string">"ACCOUNT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//是否有openUid</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"账号为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">return</span> account<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JOSEException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h4 id="调用的业务逻辑"><a href="#调用的业务逻辑" class="headerlink" title="调用的业务逻辑"></a>调用的业务逻辑</h4><pre class="language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHS256</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TestHS256</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestHS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">testHS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//测试HS256加密生成Token</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> JWTHS256<span class="token punctuation">.</span><span class="token function">buildJWT</span><span class="token punctuation">(</span><span class="token string">"account123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//解密token</span>        <span class="token class-name">String</span> account <span class="token operator">=</span> JWTHS256<span class="token punctuation">.</span><span class="token function">vaildToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"校验token成功，token的账号："</span><span class="token operator">+</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试过期</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        account <span class="token operator">=</span> JWTHS256<span class="token punctuation">.</span><span class="token function">vaildToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><pre class="language-java" data-language="java"><code class="language-java">校验token成功，token的账号：account123测试token过期<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> token<span class="token punctuation">.</span><span class="token class-name">ResultException</span><span class="token operator">:</span> <span class="token class-name">Token</span> 已过期    at token<span class="token punctuation">.</span><span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">ResultException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">59</span><span class="token punctuation">)</span>    at token<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>JWTHS256<span class="token punctuation">.</span><span class="token function">vaildToken</span><span class="token punctuation">(</span>JWTHS256<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">89</span><span class="token punctuation">)</span>    at token<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span><span class="token class-name">TestHS256</span><span class="token punctuation">.</span><span class="token function">testHS256</span><span class="token punctuation">(</span><span class="token class-name">TestHS256</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">)</span>    at token<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span><span class="token class-name">TestHS256</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">TestHS256</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">)</span></code></pre><h3 id="RS256-非对称加密"><a href="#RS256-非对称加密" class="headerlink" title="RS256 非对称加密"></a>RS256 非对称加密</h3><h4 id="生成加密密钥"><a href="#生成加密密钥" class="headerlink" title="生成加密密钥"></a>生成加密密钥</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 创建加密key     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RSAKey</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JOSEException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RSAKeyGenerator</span> rsaKeyGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RSAKeyGenerator</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RSAKey</span> rsaJWK <span class="token operator">=</span> rsaKeyGenerator<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rsaJWK<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h4 id="生成token-1"><a href="#生成token-1" class="headerlink" title="生成token"></a>生成token</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 过期时间5秒    */</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> EXPIRE_TIME <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">RSAKey</span> rsaKey<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">RSAKey</span> publicRsaKey<span class="token punctuation">;</span>   <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>       <span class="token comment">/**        * 生成公钥，公钥是提供出去，让使用者校验token的签名        */</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           rsaKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RSAKeyGenerator</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           publicRsaKey <span class="token operator">=</span> rsaKey<span class="token punctuation">.</span><span class="token function">toPublicJWK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JOSEException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">buildToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> account<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token comment">/**            * 1. 生成秘钥,秘钥是token的签名方持有，不可对外泄漏            */</span>           <span class="token class-name">RSASSASigner</span> rsassaSigner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RSASSASigner</span><span class="token punctuation">(</span>rsaKey<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/**            * 2. 建立payload 载体            */</span>           <span class="token class-name">JWTClaimsSet</span> claimsSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JWTClaimsSet</span><span class="token punctuation">.</span><span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">subject</span><span class="token punctuation">(</span><span class="token string">"doi"</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">issuer</span><span class="token punctuation">(</span><span class="token string">"http://www.doiduoyi.com"</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">expirationTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> EXPIRE_TIME<span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"ACCOUNT"</span><span class="token punctuation">,</span>account<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/**            * 3. 建立签名            */</span>           <span class="token class-name">SignedJWT</span> signedJWT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SignedJWT</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JWSHeader</span><span class="token punctuation">(</span><span class="token class-name">JWSAlgorithm</span><span class="token punctuation">.</span>RS256<span class="token punctuation">)</span><span class="token punctuation">,</span> claimsSet<span class="token punctuation">)</span><span class="token punctuation">;</span>           signedJWT<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>rsassaSigner<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/**            * 4. 生成token            */</span>           <span class="token class-name">String</span> token <span class="token operator">=</span> signedJWT<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> token<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JOSEException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h4 id="验证token-1"><a href="#验证token-1" class="headerlink" title="验证token"></a>验证token</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">volidToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">SignedJWT</span> jwt <span class="token operator">=</span> <span class="token class-name">SignedJWT</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//添加私密钥匙 进行解密</span>           <span class="token class-name">RSASSAVerifier</span> rsassaVerifier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RSASSAVerifier</span><span class="token punctuation">(</span>publicRsaKey<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//校验是否有效</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>rsassaVerifier<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Token 无效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//校验超时</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span><span class="token function">getJWTClaimsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpirationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Token 已过期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//获取载体中的数据</span>           <span class="token class-name">Object</span> account <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getJWTClaimsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClaim</span><span class="token punctuation">(</span><span class="token string">"ACCOUNT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//是否有openUid</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"账号为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">return</span> account<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JOSEException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h4 id="业务逻辑调用"><a href="#业务逻辑调用" class="headerlink" title="业务逻辑调用"></a>业务逻辑调用</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestRS256</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TestRS256</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestRS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">testRS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//测试RS256加密生成Token</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> JWTRSA256<span class="token punctuation">.</span><span class="token function">buildToken</span><span class="token punctuation">(</span><span class="token string">"account123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//解密token</span>        <span class="token class-name">String</span> account <span class="token operator">=</span> JWTRSA256<span class="token punctuation">.</span><span class="token function">volidToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"校验token成功，token的账号："</span><span class="token operator">+</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试过期</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        account <span class="token operator">=</span> JWTRSA256<span class="token punctuation">.</span><span class="token function">volidToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h4><pre class="language-java" data-language="java"><code class="language-java">校验token成功，token的账号：account123测试token过期<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> token<span class="token punctuation">.</span><span class="token class-name">ResultException</span><span class="token operator">:</span> <span class="token class-name">Token</span> 已过期    at token<span class="token punctuation">.</span><span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">ResultException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">59</span><span class="token punctuation">)</span>    at token<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>JWTRSA256<span class="token punctuation">.</span><span class="token function">volidToken</span><span class="token punctuation">(</span>JWTRSA256<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">96</span><span class="token punctuation">)</span>    at token<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span><span class="token class-name">TestRS256</span><span class="token punctuation">.</span><span class="token function">testRS256</span><span class="token punctuation">(</span><span class="token class-name">TestRS256</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">)</span>    at token<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span><span class="token class-name">TestRS256</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">TestRS256</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">)</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JWT 的实践其实还是挺简单。安全性也是得到了保证，后端只需要保存着密匙，其他数据可以保存在token，由前端携带，这样可以减低后端的内存消耗。<br> 虽然token是加密的，但是携带的验证数据还是不要是敏感数据.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; class=&quot;headerlink&quot; title=&quot;开篇&quot;&gt;&lt;/a&gt;开篇&lt;/h2&gt;&lt;p&gt;实现Token的方式有很多，本篇介绍的是利用Json Web Token(JWT)生成的Token.JWT生成的Token有什么好处呢？&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>redis持久化</title>
    <link href="http://wumuwumu.github.io/posts/dcfaa904.html"/>
    <id>http://wumuwumu.github.io/posts/dcfaa904.html</id>
    <published>2021-01-29T04:00:00.000Z</published>
    <updated>2021-02-27T06:13:14.023Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://redis.io/">Redis</a>有两种持久化的方式：快照（<code>RDB</code>文件）和追加式文件（<code>AOF</code>文件）：</p><ul><li>RDB持久化方式会在一个特定的间隔保存那个时间点的一个数据快照。</li><li>AOF持久化方式则会记录每一个服务器收到的写操作。在服务启动时，这些记录的操作会逐条执行从而重建出原来的数据。写操作命令记录的格式跟Redis协议一致，以追加的方式进行保存。</li><li>Redis的持久化是可以禁用的，就是说你可以让数据的生命周期只存在于服务器的运行时间里。</li><li>两种方式的持久化是可以同时存在的，但是当Redis重启时，AOF文件会被优先用于重建数据。</li></ul><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>Redis调用fork()，产生一个子进程。</li><li>子进程把数据写到一个临时的RDB文件。</li><li>当子进程写完新的RDB文件后，把旧的RDB文件替换掉。</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>RDB文件是一个很简洁的单文件，它保存了某个时间点的Redis数据，很适合用于做备份。你可以设定一个时间点对RDB文件进行归档，这样就能在需要的时候很轻易的把数据恢复到不同的版本。</li><li>基于上面所描述的特性，RDB很适合用于灾备。单文件很方便就能传输到远程的服务器上。</li><li>RDB的性能很好，需要进行持久化时，主进程会fork一个子进程出来，然后把持久化的工作交给子进程，自己不会有相关的I/O操作。</li><li>比起AOF，在数据量比较大的情况下，RDB的启动速度更快。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>RDB容易造成数据的丢失。假设每5分钟保存一次快照，如果Redis因为某些原因不能正常工作，那么从上次产生快照到Redis出现问题这段时间的数据就会丢失了。</li><li>RDB使用<code>fork()</code>产生子进程进行数据的持久化，如果数据比较大的话可能就会花费点时间，造成Redis停止服务几毫秒。如果数据量很大且CPU性能不是很好的时候，停止服务的时间甚至会到1秒。</li></ul><h3 id="文件路径和名称"><a href="#文件路径和名称" class="headerlink" title="文件路径和名称"></a>文件路径和名称</h3><p>默认Redis会把快照文件存储为当前目录下一个名为<code>dump.rdb</code>的文件。要修改文件的存储路径和名称，可以通过修改配置文件<code>redis.conf</code>实现：</p><pre class="language-none"><code class="language-none"># RDB文件名，默认为dump.rdb。dbfilename dump.rdb# 文件存放的目录，AOF文件同样存放在此目录下。默认为当前工作目录。dir .&#x2F;</code></pre><h3 id="保存点（RDB的启用和禁用）"><a href="#保存点（RDB的启用和禁用）" class="headerlink" title="保存点（RDB的启用和禁用）"></a>保存点（RDB的启用和禁用）</h3><p>你可以配置保存点，使Redis如果在每N秒后数据发生了M次改变就保存快照文件。例如下面这个保存点配置表示每60秒，如果数据发生了1000次以上的变动，Redis就会自动保存快照文件：</p><pre class="language-none"><code class="language-none">save 60 1000</code></pre><p>保存点可以设置多个，Redis的配置文件就默认设置了3个保存点：</p><pre class="language-none"><code class="language-none"># 格式为：save &lt;seconds&gt; &lt;changes&gt;# 可以设置多个。save 900 1 #900秒后至少1个key有变动save 300 10 #300秒后至少10个key有变动save 60 10000 #60秒后至少10000个key有变动</code></pre><p>如果想禁用快照保存的功能，可以通过注释掉所有”save”配置达到，或者在最后一条”save”配置后添加如下的配置：</p><pre class="language-none"><code class="language-none">save &quot;&quot;</code></pre><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>默认情况下，如果Redis在后台生成快照的时候失败，那么就会停止接收数据，目的是让用户能知道数据没有持久化成功。但是如果你有其他的方式可以监控到Redis及其持久化的状态，那么可以把这个功能禁止掉。</p><pre class="language-none"><code class="language-none">stop-writes-on-bgsave-error yes</code></pre><h3 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h3><p>默认Redis会采用<code>LZF</code>对数据进行压缩。如果你想节省点CPU的性能，你可以把压缩功能禁用掉，但是数据集就会比没压缩的时候要打。</p><pre class="language-none"><code class="language-none">rdbcompression yes</code></pre><h3 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h3><p>从版本5的RDB的开始，一个<code>CRC64</code>的校验码会放在文件的末尾。这样更能保证文件的完整性，但是在保存或者加载文件时会损失一定的性能（大概10%）。如果想追求更高的性能，可以把它禁用掉，这样文件在写入校验码时会用<code>0</code>替代，加载的时候看到<code>0</code>就会直接跳过校验。</p><pre class="language-none"><code class="language-none">rdbchecksum yes</code></pre><h3 id="手动生成快照"><a href="#手动生成快照" class="headerlink" title="手动生成快照"></a>手动生成快照</h3><p>Redis提供了两个命令用于手动生成快照。</p><h4 id="SAVE"><a href="#SAVE" class="headerlink" title="SAVE"></a>SAVE</h4><p><a href="http://redis.io/commands/save">SAVE</a>命令会使用同步的方式生成RDB快照文件，这意味着在这个过程中会阻塞所有其他客户端的请求。因此不建议在生产环境使用这个命令，除非因为某种原因需要去阻止Redis使用子进程进行后台生成快照（例如调用<code>fork(2)</code>出错）。</p><h4 id="BGSAVE"><a href="#BGSAVE" class="headerlink" title="BGSAVE"></a>BGSAVE</h4><p><a href="http://redis.io/commands/bgsave">BGSAVE</a>命令使用后台的方式保存RDB文件，调用此命令后，会立刻返回<code>OK</code>返回码。Redis会产生一个子进程进行处理并立刻恢复对客户端的服务。在客户端我们可以使用<a href="http://redis.io/commands/lastsave">LASTSAVE</a>命令查看操作是否成功。</p><pre class="language-none"><code class="language-none">127.0.0.1:6379&gt; BGSAVEBackground saving started127.0.0.1:6379&gt; LASTSAVE(integer) 1433936394</code></pre><blockquote><p>配置文件里禁用了快照生成功能不影响<code>SAVE</code>和<code>BGSAVE</code>命令的效果。</p></blockquote><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>快照并不是很可靠。如果你的电脑突然宕机了，或者电源断了，又或者不小心杀掉了进程，那么最新的数据就会丢失。而AOF文件则提供了一种更为可靠的持久化方式。每当Redis接受到会修改数据集的命令时，就会把命令追加到AOF文件里，当你重启Redis时，AOF里的命令会被重新执行一次，重建数据。</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>比RDB可靠。你可以制定不同的fsync策略：不进行fsync、每秒fsync一次和每次查询进行fsync。默认是每秒fsync一次。这意味着你最多丢失一秒钟的数据。</li><li>AOF日志文件是一个纯追加的文件。就算是遇到突然停电的情况，也不会出现日志的定位或者损坏问题。甚至如果因为某些原因（例如磁盘满了）命令只写了一半到日志文件里，我们也可以用<code>redis-check-aof</code>这个工具很简单的进行修复。</li><li>当AOF文件太大时，Redis会自动在后台进行重写。重写很安全，因为重写是在一个新的文件上进行，同时Redis会继续往旧的文件追加数据。新文件上会写入能重建当前数据集的最小操作命令的集合。当新文件重写完，Redis会把新旧文件进行切换，然后开始把数据写到新文件上。</li><li>AOF把操作命令以简单易懂的格式一条接一条的保存在文件里，很容易导出来用于恢复数据。例如我们不小心用<code>FLUSHALL</code>命令把所有数据刷掉了，只要文件没有被重写，我们可以把服务停掉，把最后那条命令删掉，然后重启服务，这样就能把被刷掉的数据恢复回来。</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>在相同的数据集下，AOF文件的大小一般会比RDB文件大。</li><li>在某些fsync策略下，AOF的速度会比RDB慢。通常fsync设置为每秒一次就能获得比较高的性能，而在禁止fsync的情况下速度可以达到RDB的水平。</li><li>在过去曾经发现一些很罕见的BUG导致使用AOF重建的数据跟原数据不一致的问题。</li></ul><h3 id="启用AOF"><a href="#启用AOF" class="headerlink" title="启用AOF"></a>启用AOF</h3><p>把配置项<code>appendonly</code>设为<code>yes</code>：</p><pre class="language-none"><code class="language-none">appendonly yes</code></pre><h3 id="文件路径和名称-1"><a href="#文件路径和名称-1" class="headerlink" title="文件路径和名称"></a>文件路径和名称</h3><pre class="language-none"><code class="language-none"># 文件存放目录，与RDB共用。默认为当前工作目录。dir .&#x2F;# 默认文件名为appendonly.aofappendfilename &quot;appendonly.aof&quot;</code></pre><h3 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h3><p>你可以配置Redis调用fsync的频率，有三个选项：</p><ul><li>每当有新命令追加到AOF的时候调用fsync。速度最慢，但是最安全。</li><li>每秒fsync一次。速度快（2.4版本跟快照方式速度差不多），安全性不错（最多丢失1秒的数据）。</li><li>从不fsync，交由系统去处理。这个方式速度最快，但是安全性一般。</li></ul><p>推荐使用每秒fsync一次的方式（默认的方式），因为它速度快，安全性也不错。相关配置如下：</p><pre class="language-none"><code class="language-none"># appendfsync alwaysappendfsync everysec# appendfsync no</code></pre><h3 id="日志重写"><a href="#日志重写" class="headerlink" title="日志重写"></a>日志重写</h3><p>随着写操作的不断增加，AOF文件会越来越大。例如你递增一个计数器100次，那么最终结果就是数据集里的计数器的值为最终的递增结果，但是AOF文件里却会把这100次操作完整的记录下来。而事实上要恢复这个记录，只需要1个命令就行了，也就是说AOF文件里那100条命令其实可以精简为1条。所以Redis支持这样一个功能：在不中断服务的情况下在后台重建AOF文件。</p><p>工作原理如下：</p><ul><li>Redis调用fork()，产生一个子进程。</li><li>子进程把新的AOF写到一个临时文件里。</li><li>主进程持续把新的变动写到内存里的buffer，同时也会把这些新的变动写到旧的AOF里，这样即使重写失败也能保证数据的安全。</li><li>当子进程完成文件的重写后，主进程会获得一个信号，然后把内存里的buffer追加到子进程生成的那个新AOF里。</li><li>Redis</li></ul><p>我们可以通过配置设置日志重写的条件：</p><pre class="language-none"><code class="language-none"># Redis会记住自从上一次重写后AOF文件的大小（如果自Redis启动后还没重写过，则记住启动时使用的AOF文件的大小）。# 如果当前的文件大小比起记住的那个大小超过指定的百分比，则会触发重写。# 同时需要设置一个文件大小最小值，只有大于这个值文件才会重写，以防文件很小，但是已经达到百分比的情况。auto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mb</code></pre><p>要禁用自动的日志重写功能，我们可以把百分比设置为0：</p><pre class="language-none"><code class="language-none">auto-aof-rewrite-percentage 0</code></pre><blockquote><p>Redis 2.4以上才可以自动进行日志重写，之前的版本需要手动运行<a href="http://redis.io/commands/bgrewriteaof">BGREWRITEAOF</a>这个命令。</p></blockquote><h3 id="数据损坏修复"><a href="#数据损坏修复" class="headerlink" title="数据损坏修复"></a>数据损坏修复</h3><p>如果因为某些原因（例如服务器崩溃）AOF文件损坏了，导致Redis加载不了，可以通过以下方式进行修复：</p><ul><li><p>备份AOF文件。</p></li><li><p>使用<code>redis-check-aof</code>命令修复原始的AOF文件：</p><pre class="language-none"><code class="language-none">$ redis-check-aof --fix</code></pre></li><li><p>可以使用<code>diff -u</code>命令看下两个文件的差异。</p></li><li><p>使用修复过的文件重启Redis服务。</p></li></ul><h3 id="从RDB切换到AOF"><a href="#从RDB切换到AOF" class="headerlink" title="从RDB切换到AOF"></a>从RDB切换到AOF</h3><p>这里只说Redis &gt;= 2.2版本的方式：</p><ul><li><p>备份一个最新的<code>dump.rdb</code>的文件，并把备份文件放在一个安全的地方。</p></li><li><p>运行以下两条命令：</p><pre class="language-none"><code class="language-none">$ redis-cli config set appendonly yes$ redis-cli config set save &quot;&quot;</code></pre></li><li><p>确保数据跟切换前一致。</p></li><li><p>确保数据正确的写到AOF文件里。</p></li></ul><blockquote><p>第二条命令是用来禁用RDB的持久化方式，但是这不是必须的，因为你可以同时启用两种持久化方式。</p></blockquote><blockquote><p>记得对配置文件<code>redis.conf</code>进行编辑启用AOF，因为命令行方式修改配置在重启Redis后就会失效。</p></blockquote><h1 id="具体方案"><a href="#具体方案" class="headerlink" title="具体方案"></a>具体方案</h1><h2 id="持久化配置"><a href="#持久化配置" class="headerlink" title="持久化配置"></a>持久化配置</h2><ul><li>RBD和AOF建议同时打开（Redis4.0之后支持）</li><li>RDB做冷备，AOF做数据恢复（数据更可靠）</li><li>RDB采取默认配置即可，AOF推荐采取everysec每秒策略</li></ul><p>AOF和RDB还不懂的，请转移到如下几篇：</p><p><a href="http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247492839&idx=1&sn=c205eb385b0b1255f1ef9c8b3e3b4b6d&chksm=ebd5dbcbdca252dd677f470e4f2df3578c952015c312246d0171b126e3b1fd007d277e96f602&scene=21#wechat_redirect">看完这篇还不懂Redis的RDB持久化，你们来打我！</a></p><p><a href="http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247492865&idx=1&sn=00904394aa074df14bb65a14a56e1ffe&chksm=ebd5da2ddca2533ba1e3d20fd82b8acee93fc75199e9c10e38b62387ca0579c80390f72e3bbd&scene=21#wechat_redirect">天天在用Redis，那你对Redis的AOF持久化到底了解多少呢？</a></p><h2 id="数据备份方案"><a href="#数据备份方案" class="headerlink" title="数据备份方案"></a>数据备份方案</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>我们需要定时备份rdb文件来做冷备，为什么？不是有aof和rbd了吗为什么还要单独写定时任务去备份？因为Redis的aof和rdb是仅仅有一个最新的，比如谁手贱再Redis宕机的时候执行<code>rm -rf aof/rdb</code>了，那不就GG了吗？或者rdb/aof文件损坏了等不可预期的情况。所以我们需要单独备份rdb文件以防万一。</p><p>为什么不定时备份aof而是rdb？定时备份aof没意义呀，<strong>定时</strong>本身就是冷备份，不是实时的，rdb文件又小恢复又快，她哪里不香？</p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><ul><li>写crontab定时调度脚本去做数据备份。</li><li>每小时都copy一份redis的rdb文件到一个其他目录中，这个目录里的rdb文件仅仅保留48小时内的。也就是每小时都做备份，保留2天内的rdb，只保留48个rdb。</li><li>每天0点0分copy一份redis的rdb文件到一个其他目录中，这个保留一个月的。也就是按天备份。</li><li>每天半夜找个时间将当前服务上的所有rdb备份都上传到云服务上。</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="按小时"><a href="#按小时" class="headerlink" title="按小时"></a>按小时</h4><blockquote><p>每小时copy一次备份，删除48小时前的数据。</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">crontab</span> -e<span class="token comment"># 每小时都执行/usr/local/redis/copy/redis_rdb_copy_hourly.sh脚本</span><span class="token number">0</span> * * * * <span class="token function">sh</span> /usr/local/redis/copy/redis_rdb_copy_hourly.sh<span class="token comment"># redis_rdb_copy_hourly.sh脚本的内容如下：</span><span class="token comment">#!/bin/sh </span><span class="token comment"># +%Y%m%d%k == 年月日时</span><span class="token assign-left variable">cur_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y%m%d%k<span class="token variable">`</span></span><span class="token function">rm</span> -rf /usr/local/redis/rdb/<span class="token variable">$cur_date</span><span class="token function">mkdir</span> /usr/local/redis/rdb/<span class="token variable">$cur_date</span><span class="token comment"># 拷贝rdb到目录</span><span class="token function">cp</span> /var/redis/6379/dump.rdb /usr/local/redis/rdb/<span class="token variable">$cur_date</span><span class="token comment"># date -d -48hour +%Y%m%d%k == 48小时前的日期，比如今天2020060214，这个结果就是2020053114</span><span class="token assign-left variable">del_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> -d -48hour +%Y%m%d%k<span class="token variable">`</span></span><span class="token comment"># 删除48小时之前的目录</span><span class="token function">rm</span> -rf /usr/local/redis/rdb/<span class="token variable">$del_date</span></code></pre><h3 id="按天"><a href="#按天" class="headerlink" title="按天"></a>按天</h3><blockquote><p>每天copy一次备份，删除一个月前的数据。</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">crontab</span> -e<span class="token comment"># 每天0点0分开始执行/usr/local/redis/copy/redis_rdb_copy_daily.sh脚本</span><span class="token number">0</span> <span class="token number">0</span> * * * <span class="token function">sh</span> /usr/local/redis/copy/redis_rdb_copy_daily.sh<span class="token comment"># redis_rdb_copy_daily.sh脚本的内容如下：</span><span class="token comment">#!/bin/sh </span><span class="token comment"># 年月日</span><span class="token assign-left variable">cur_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y%m%d<span class="token variable">`</span></span><span class="token function">rm</span> -rf /usr/local/redis/rdb/<span class="token variable">$cur_date</span><span class="token function">mkdir</span> /usr/local/redis/rdb/<span class="token variable">$cur_date</span><span class="token comment"># 拷贝rdb到目录</span><span class="token function">cp</span> /var/redis/6379/dump.rdb /usr/local/redis/rdb/<span class="token variable">$cur_date</span><span class="token comment"># 获取一个月前的时间，比如今天是20200602，那么del_date就是20200502</span><span class="token assign-left variable">del_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> -d -1month +%Y%m%d<span class="token variable">`</span></span><span class="token comment"># 删除一个月前的数据</span><span class="token function">rm</span> -rf /usr/local/redis/rdb/<span class="token variable">$del_date</span></code></pre><h3 id="传到云"><a href="#传到云" class="headerlink" title="传到云"></a>传到云</h3><p>没法演示，最终目的就是磁盘备份完上传到云，云保留多少天等策略自己看需求。</p><h2 id="数据恢复方案"><a href="#数据恢复方案" class="headerlink" title="数据恢复方案"></a>数据恢复方案</h2><h3 id="redis挂了"><a href="#redis挂了" class="headerlink" title="redis挂了"></a>redis挂了</h3><p>如果仅仅是redis进程挂了，那么直接重启redis进程即可，Redis会按照持久化配置直接基于持久化文件进行恢复数据。</p><p>如果有AOF则按照AOF，AOF和RDB一起开的话也走AOF。</p><h3 id="持久化文件丢了"><a href="#持久化文件丢了" class="headerlink" title="持久化文件丢了"></a>持久化文件丢了</h3><p>如果持久化文件（rdb/aof）损坏了，或者直接丢失了。那么就要采取我们上面所做的rdb备份来进行恢复了。</p><blockquote><p>不要脑子一热想着很简单，就以为直接把rdb拖过来重启redis进程就完事了，这种想法有很多问题。慢慢道来。</p></blockquote><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>问题一：直接把备份的rdb扔到redis持久化目录下然后重启redis不行的原因在于：redis是按照先aof后rdb进行恢复的，所以都是开启aof的，redis启动后会重新生成新的aof文件，里面是空的。所以不会进行任何数据恢复，也就是说虽然你把rdb丢给redis了，但是redis会按照aof来恢复，而aof是redis启动的时候新生成的空文件，所以不会有任何数据进行恢复。</p><p>问题二：那么我们把rdb文件丢给redis后，先将redis的aof关闭再启动redis进程不就能按照rdb来进行恢复了吗？是这样的，没毛病！但是新的问题来了，我们aof肯定要开的，aof对数据保障更可靠。那什么我们按照rdb文件恢复完后再修改redis配置文件开启aof然后重启redis进程不就得了嘛？大哥…你打开aof然后重启redis，这时候redis又会生成一个空的aof文件，这时候恢复的时候又是啥数据都没了。</p><blockquote><p>因为数据是存到内存里，你重启后肯定没了，需要持久化文件来恢复。这时候aof是空的，我恢复个鸡毛啊。</p></blockquote><h3 id="具体方案-1"><a href="#具体方案-1" class="headerlink" title="具体方案"></a>具体方案</h3><blockquote><p>可能有人想到方案了，但是耐心看完，看看我的文采如何。</p></blockquote><p>我不管你是持久化文件丢了还是坏了，我都先<code>rm -rf *</code> 给他删了。</p><ul><li>停止redis进程</li><li>删除坏掉的rdb和aof持久化文件。</li><li>修改配置文件关闭redis的aof持久化。</li><li>找到最新备份的rdb文件扔到redis的持久化目录里。（这里最新的肯定是按照小时备份的最后一个）</li><li>启动Redis进程</li><li>执行<code>set appendonly yes</code>动态打开aof持久化。</li></ul><blockquote><p>也就是说打开aof的操作不是修改配置文件然后重启，而是先热修改让他生成aof，这次生成肯定是会带着内存中完整的数据的。然后再修改配置文件重启。</p></blockquote><ul><li>等aof文件生成后再修改redis配置文件打开aof。</li><li>重启redis进程。</li><li>完美收官。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt;有两种持久化的方式：快照（&lt;code&gt;RDB&lt;/code&gt;文件）和追加式文件（&lt;code&gt;AOF&lt;/code&gt;文件）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RDB持久化方式会在一个特定的间隔保存那个时间点的一个数</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>redis基本操作</title>
    <link href="http://wumuwumu.github.io/posts/2a3c893b.html"/>
    <id>http://wumuwumu.github.io/posts/2a3c893b.html</id>
    <published>2021-01-29T03:00:00.000Z</published>
    <updated>2021-02-27T06:13:14.022Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t0">Redis 基本(basic)命令</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t1">Redis 键(key)命令</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t2">Redis 数据类型概述</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t3">Redis 字符串(String)</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t4">Redis 哈希（Hash）</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t5">Redis 列表(List)</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t6">Redis 集合(Set)</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t7">Redis 有序集合(sorted set)</a></p><hr><h1 id="Redis-基本-basic-命令"><a href="#Redis-基本-basic-命令" class="headerlink" title="Redis 基本(basic)命令"></a>Redis 基本(basic)命令</h1><p>1、Redis 命令用于在 redis 服务上执行操作，要在 redis 服务上执行命令需要一个 redis 客户端。安装目录下的 redis-cli 就是自带的测试客户端。</p><p>命令行启动自带的 redis-cli 客户端连接到本地的 redis 服务：redis-cli连接远程 redis 服务器：redis-cli -h host -p port -a password</p><table><thead><tr><th><strong>PING</strong></th><th>用于检测 redis 服务是否启动,连接是否正常，连接成功时返回 PONG</th></tr></thead><tbody><tr><td>select index</td><td>Redis Select 命令用于切换到指定的数据库，数据库索引号 index 用数字值指定，以 0 作为起始索引值。</td></tr><tr><td>exit</td><td>退出 redis-cli</td></tr><tr><td>auth password</td><td>当 redis 服务器开启密码验证，客户端连接时没有指定密码时，连接后必须使用 “auth 密码” 先进行授权，否则其它命令会使用不了。</td></tr><tr><td>set key value</td><td>往 redis 数据库设置数据</td></tr><tr><td>get key</td><td>从 redis 数据库读取数据。key 不存在时，返回 nil</td></tr><tr><td>keys *</td><td>查询 redis 数据库中的所有 key 值</td></tr><tr><td>del key</td><td>删除指定的 key 的内容</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/20190519102237597.gif" alt="img"></p><h1 id="Redis-键-key-命令"><a href="#Redis-键-key-命令" class="headerlink" title="Redis 键(key)命令"></a>Redis 键(key)命令</h1><p>1、Redis 键命令用于管理 redis 的键。</p><p>2、Redis 键命令的基本语法：command KEY_NAME</p><table><thead><tr><th align="left">序号</th><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.redis.net.cn/order/3528.html">del key</a></td><td align="left">删除指定的 key。key 不存在时不影响。可以同时删除多个，如 del key1 key2 …。list、set、zset、hash 中的元素全部删除后，key 也会自动被删除。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.redis.net.cn/order/3529.html">dump key</a></td><td align="left">序列化给定 key ，并返回被序列化的值。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.redis.net.cn/order/3530.html">exists key</a></td><td align="left">检查给定 key 是否存在。返回 1 表示存在，返回 0 表示不存在。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.redis.net.cn/order/3531.html">expire key</a> seconds</td><td align="left">为给定 key 设置过期时间。单位 秒。如果 key 后续被重新设置值，比如 set key value，则 key 过期时间失效。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.redis.net.cn/order/3532.html">expireat key timestamp</a></td><td align="left">EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。如果 key 后续被重新设置值，比如 set key value，则 key 过期时间失效。</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.redis.net.cn/order/3533.html">pexpire key milliseconds</a></td><td align="left">设置 key 的过期时间亿以毫秒计。如果 key 后续被重新设置值，比如 set key value，则 key 过期时间失效。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.redis.net.cn/order/3533.html">pexpire</a>at<a href="https://www.redis.net.cn/order/3534.html"> key milliseconds-timestamp</a></td><td align="left">设置 key 过期时间的时间戳(unix timestamp) 以毫秒计。如果 key 后续被重新设置值，比如 set key value，则 key 过期时间失效。</td></tr><tr><td align="left">8</td><td align="left">keys<a href="https://www.redis.net.cn/order/3535.html"> pattern</a></td><td align="left">查找所有符合给定模式( pattern)的 key 。* 表示1个或多个，？ 表示一个任意字符。keys * ：查找所有key，keys user*：查找以 user 开头的 key，keys ag?：查找 ag 开头，且后面只有一个字符的 key。</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.redis.net.cn/order/3536.html">move key db</a></td><td align="left">将当前数据库的 key 移动到给定的数据库 db 当中。</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.redis.net.cn/order/3537.html">persist key</a></td><td align="left">移除 key 的过期时间，key 将持久保持。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.redis.net.cn/order/3538.html">pttl key</a></td><td align="left">以毫秒为单位返回 key 的剩余的过期时间。如果没有对 key 设置超时，则返回 -1；-1 表示超时不存在。正常情况返回大于0的正数。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.redis.net.cn/order/3539.html">ttl key</a></td><td align="left">以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</td></tr><tr><td align="left">13</td><td align="left">randomkey</td><td align="left">从当前数据库中随机返回一个 key 。</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.redis.net.cn/order/3541.html">rename key newkey</a></td><td align="left">修改 key 的名称。key 不存在时会报错：(error) ERR no such key。如果 newkey 已经存在时，则会删除旧值。</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.redis.net.cn/order/3542.html">renamenx key newkey</a></td><td align="left">仅当 newkey 不存在时，将 key 改名为 newkey 。key 不存在时报错。</td></tr><tr><td align="left">16</td><td align="left"><a href="https://www.redis.net.cn/order/3543.html">type key</a></td><td align="left">返回 key 所储存的值的类型。有 string、list、set、zset、hash。如果 key 不存在，则返回 none</td></tr></tbody></table><p>在线命令演示源码：[Redis 基本命令、键（key）命令、数据类型概述.sql](<a href="https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis">https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis</a> 基本命令、键（key）命令、数据类型概述.sql)</p><h1 id="Redis-数据类型概述"><a href="#Redis-数据类型概述" class="headerlink" title="Redis 数据类型概述"></a>Redis 数据类型概述</h1><p>1、Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p><p>2、这里暂时先做个概述，后续会详细说明。</p><p>3、在线命令演示源码：[Redis 基本命令、键（key）命令、数据类型概述.sql](<a href="https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis">https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis</a> 基本命令、键（key）命令、数据类型概述.sql)</p><h1 id="Redis-字符串-String"><a href="#Redis-字符串-String" class="headerlink" title="Redis 字符串(String)"></a>Redis 字符串(String)</h1><p>1、string 是 redis最基本的类型，一个key对应一个value。一个键最大能存储512MB。</p><p>2、string 类型是二进制安全的，可以包含任何数据，比如 jpg 图片或者序列化的对象 。</p><p>3、Redis 字符串(String)官网文档：<a href="https://www.redis.net.cn/order/3544.html">https://www.redis.net.cn/order/3544.html</a></p><table><thead><tr><th align="left">序号</th><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">set <a href="https://www.redis.net.cn/tutorial/8669.html">key value</a></td><td align="left">设置指定 key 的值。key 存在时，覆盖其值。总是返回ok。设置的数字会自动转为字符串存储</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8670.html">get key</a></td><td align="left">获取指定 key 的值。如果 key 不存在，则返回 (nil) 相当于 null。如果 key 的类型不是 string ，则报错。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8671.html">getrange key start end</a></td><td align="left"><a href="https://www.redis.net.cn/tutorial/8671.html">range</a>：范围、界限。返回 key 中字符串值的子字符。索引 [start ,end] 从 0开始。可以为负数，如 -1表示倒数第一位，-2 表示倒数第二位。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8672.html">getset key value</a></td><td align="left">将给定 key 的值设为 value ，并返回 key 的旧值(old value)。key 不存在时返回为(nil)，同时创建新值。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8673.html">getbit key offset</a></td><td align="left">对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</td></tr><tr><td align="left">6</td><td align="left">[mget key1 <a href="https://www.redis.net.cn/tutorial/8674.html">key2..]</a></td><td align="left">获取所有(一个或多个)给定 key 的值。不存在的 key 返回 (nil)</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8675.html">setbit key offset value</a></td><td align="left">对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8676.html">setex key seconds value</a></td><td align="left">将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8677.html">setnx key value</a></td><td align="left">只有在 key 不存在时设置 key 的值。</td></tr><tr><td align="left">10</td><td align="left">setrange<a href="https://www.redis.net.cn/tutorial/8678.html"> key offset value</a></td><td align="left">用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</td></tr><tr><td align="left">11</td><td align="left">strlen<a href="https://www.redis.net.cn/tutorial/8679.html"> key</a></td><td align="left">返回 key 所储存的字符串值的长度。不存在的 key 返回 0</td></tr><tr><td align="left">12</td><td align="left">[mset key value <a href="https://www.redis.net.cn/tutorial/8680.html">key value …]</a></td><td align="left">同时设置一个或多个 key-value 对。key 存在时，覆盖其值。</td></tr><tr><td align="left">13</td><td align="left">[msetnx key value <a href="https://www.redis.net.cn/tutorial/8681.html">key value …]</a></td><td align="left">同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在才设置。</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8682.html">psetex key milliseconds value</a></td><td align="left">这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8683.html">incr key</a></td><td align="left">将 key 中储存的数字值增一。increment：ˈɪŋkrəmənt 增量、增加。如果不是数值，则报错。如果 key 不存在，则新建，incr 后，值为1。</td></tr><tr><td align="left">16</td><td align="left">incrby <a href="https://www.redis.net.cn/tutorial/8684.html">key increment</a></td><td align="left">将 key 所储存的值加上给定的增量值（increment） 。如果不是数值，则报错。如果 key 不存在，则新建。</td></tr><tr><td align="left">17</td><td align="left">incrbyfloat<a href="https://www.redis.net.cn/tutorial/8685.html"> key increment</a></td><td align="left">将 key 所储存的值加上给定的浮点增量值（increment） 。如果不是数值，则报错。如果 key 不存在，则新建。<a href="https://www.redis.net.cn/tutorial/8685.html">increment</a> 不能是变量。</td></tr><tr><td align="left">18</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8686.html">decr key</a></td><td align="left">将 key 中储存的数字值减一。如果不是数值，则报错。如果 key 不存在，则新建，decr 后，值为 -1。如果 key 不存在，则新建。</td></tr><tr><td align="left">19</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8687.html">decrby key decrement</a></td><td align="left">key 所储存的值减去给定的减量值（decrement） 。如果 key 不存在，则新建。<a href="https://www.redis.net.cn/tutorial/8685.html">increment</a></td></tr><tr><td align="left">20</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8688.html">append key value</a></td><td align="left">如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。如果 key 不存在，则新建。value 不能是变量。</td></tr></tbody></table><p>4、在线命令演示：[Redis 字符串(String)命令演示.sql](<a href="https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis">https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis</a> 字符串(String)命令演示.sql)</p><p><img src="https://img-blog.csdnimg.cn/20201010201027478.gif" alt="img"></p><h1 id="Redis-哈希（Hash）"><a href="#Redis-哈希（Hash）" class="headerlink" title="Redis 哈希（Hash）"></a><strong>Redis 哈希（Hash）</strong></h1><p>1、Redis hash 是一个键值对集合，值可以看成一个 Map。</p><p>2、Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><p>3、每个 hash 可以存储 40多亿键值对。</p><p>hmset key filed value [filed2 value2 filed3 value3 …]：同时为 key 指定多个 filed 与 valuehgetall key：获取 key 中的所有 filed-value</p><p>4、Redis 哈希(Hash)官网文档：<a href="https://www.redis.net.cn/order/3564.html">https://www.redis.net.cn/order/3564.html</a></p><table><thead><tr><th align="left">序号</th><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">[hdel key field2 <a href="https://www.redis.net.cn/order/3564.html">field2]</a></td><td align="left">删除一个或多个哈希表字段。返回值成功删除的个数。key 或 field 不存在时会自动忽略。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.redis.net.cn/order/3565.html">hexists key field</a></td><td align="left">查看哈希表 key 中，指定的字段是否存在。返回1表示有，返回0表示没有。key 不存在时也返回0.</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.redis.net.cn/order/3566.html">hget key field</a></td><td align="left">获取存储在哈希表中指定字段的值。key 或 field 不存在时，返回 (nil)。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.redis.net.cn/order/3567.html">hgetall key</a></td><td align="left">获取在哈希表中指定 key 的所有字段和值</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.redis.net.cn/order/3568.html">hincrby key field increment</a></td><td align="left">为哈希表 key 中的指定字段的整数值加上增量 increment 。field 必须是数值，否则报错。key 不存在时会自动新建。field 不存在时也会自动新建。</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.redis.net.cn/order/3569.html">hincrbyfloat key field increment</a></td><td align="left">为哈希表 key 中的指定字段的浮点数值加上增量 increment 。field 必须是数值，否则报错。key 不存在时会自动新建。field 不存在时也会自动新建。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.redis.net.cn/order/3570.html">hkeys key</a></td><td align="left">获取所有哈希表中的字段</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.redis.net.cn/order/3571.html">hlen key</a></td><td align="left">获取哈希表中字段的数量。key 不存在时返回0.</td></tr><tr><td align="left">9</td><td align="left">[hmget key field1 <a href="https://www.redis.net.cn/order/3572.html">field2]</a></td><td align="left">获取所有给定字段的值。key 或 field 不存在时，返回 (nil)。</td></tr><tr><td align="left">10</td><td align="left">[hmset key field1 value1 <a href="https://www.redis.net.cn/order/3573.html">field2 value2 ]</a></td><td align="left">同时将多个 field-value (域-值)对设置到哈希表 key 中。field 存在时，覆盖 value。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.redis.net.cn/order/3574.html">hset key field value</a></td><td align="left">将哈希表 key 中的字段 field 的值设为 value 。field 存在时，覆盖 value。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.redis.net.cn/order/3575.html">hsetnx key field value</a></td><td align="left">只有在字段 field 不存在时，设置哈希表字段的值。</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.redis.net.cn/order/3576.html">hvals key</a></td><td align="left">获取哈希表中所有值</td></tr><tr><td align="left">14</td><td align="left">HSCAN key cursor [MATCH pattern] [COUNT count]</td><td align="left">迭代哈希表中的键值对。</td></tr></tbody></table><p>5、命令在线演示：[Redis 哈希（Hash）命令演示.sql](<a href="https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis">https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis</a> 哈希（Hash）命令演示.sql)</p><p><img src="https://img-blog.csdnimg.cn/20201010201056850.gif" alt="img"></p><h1 id="Redis-列表-List"><a href="#Redis-列表-List" class="headerlink" title="Redis 列表(List)"></a>Redis 列表(List)</h1><p>1、Redis 列表是简单的字符串列表，按照插入顺序排序，可以添加一个元素导列表的头部（左边）或者尾部（右边）。</p><p>2、每个列表最多可存储 4294967295 个元素（约40多亿)</p><p>lpush key value1 value2 value3 …：在指定的 key 关联的 lsit 的头部插入所有的 value，如果 key 不存在，则会先创建一个与该 key 关联的空链表，之后向链表的头部插入数据，插入成功，返回插入的个数。lrange key start end：获取链表中 [start,end] 之间的元素值，从0开始计数。可以为负数，如 -1 表示链表尾部的元素，-2 表示倒数第二个。</p><p>3、Redis 列表(List)官网文档：<a href="https://www.redis.net.cn/order/3577.html">https://www.redis.net.cn/order/3577.html</a></p><table><thead><tr><th align="left">序号</th><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">[blpop key1 <a href="https://www.redis.net.cn/order/3577.html">key2 ] timeout</a></td><td align="left">移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td align="left">2</td><td align="left">[brpop key1 <a href="https://www.redis.net.cn/order/3578.html">key2 ] timeout</a></td><td align="left">移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.redis.net.cn/order/3579.html">brpoplpush source destination timeout</a></td><td align="left">从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.redis.net.cn/order/3580.html">lindex key index</a></td><td align="left">通过索引获取列表中的元素</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.redis.net.cn/order/3581.html">linsert key BEFORE|AFTER pivot value</a></td><td align="left">在 pivot 元素前/后插入 value 元素。成功时返回列表中元素的个数。key 不存在时返回0。pivot 不存在时返回-1。</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.redis.net.cn/order/3582.html">llen key</a></td><td align="left">获取列表长度。key 不存在时返回0；</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.redis.net.cn/order/3583.html">lpop key</a></td><td align="left">返回并弹出指定 key 关联的列表中的第一个元素（头部元素）。如果 key 不存在，则返回(nil)。弹出之后，列表中的此元素也就不存在了。</td></tr><tr><td align="left">8</td><td align="left">[lpush key value1 <a href="https://www.redis.net.cn/order/3584.html">value2]</a></td><td align="left">将一个或多个值插入到列表头部。如果 key 不存在，则先创建一个与该 key 关联的空列表，然后向列表的头部插入数据，返回插入成功的个数。因为有索引，所以可以插入重复的元素。返回 list 中的元素个数。</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.redis.net.cn/order/3585.html">lpushx key value</a></td><td align="left">将一个或多个值插入到已存在的列表头部</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.redis.net.cn/order/3586.html">lrange key start stop</a></td><td align="left">获取链表中 [start,end] 之间的元素值。索引从0开始，可以为负数，如 -1 表示倒数第一个元素，-2 表示倒数第二个元素…。end 可以超出列表的整个大小，此时多余的会自动忽略。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.redis.net.cn/order/3587.html">lrem key count value</a></td><td align="left">删除 count 个值为 value 的元素。count &gt; 0，则从头向尾遍历并删除 count 个值为 value 的元素，count &lt; 0 ，则从尾向前遍历进行删除。count =0，则删除链表中所有的 value 元素。返回删除成功的个数。value 不存在时返回0。key 不存在时返回0。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.redis.net.cn/order/3588.html">lset key index value</a></td><td align="left">设置列表中索引为 index 的元素值，0 表示首元素，-1表示尾元素。如果 index 不存在，则抛出异常。如果 key 不存在，也抛出异常。</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.redis.net.cn/order/3589.html">ltrim key start stop</a></td><td align="left">对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.redis.net.cn/order/3590.html">rpop key</a></td><td align="left">移除并获取列表最后一个元素</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.redis.net.cn/order/3591.html">rpoplpush source destination</a></td><td align="left">将 resource 链表的尾部元素弹出并添加到 destination 链表的头部。成功时返回操作的元素。如果resource不存在，则返回（nil）。如果 destination 不存在，则自动会新建。</td></tr><tr><td align="left">16</td><td align="left">[rpush key value1 <a href="https://www.redis.net.cn/order/3592.html">value2]</a></td><td align="left">在列表尾部添加一个或多个值</td></tr><tr><td align="left">17</td><td align="left"><a href="https://www.redis.net.cn/order/3593.html">rpushx key value</a></td><td align="left">为已存在的列表的尾部添加值</td></tr></tbody></table><p>rpoplpush 使用场景：</p><p>  Redis 链表经常会被用于消息队列的服务，已完成多程序之间的消息交互。   假设一个应用程序正在执行 lpush 操作向链表头部插入新的元素，通常将这样的程序称之为”生产者(Producer)”，   而另一个应用程序正在执行 rpop 操作从链表的尾部取出元素，通常称之为”消费者（Consumer）”。   如果此时消费者程序取出消息后突然崩溃了，由于该消息已经被取出且没有被正常处理，那么就认为此消息已经丢失，由此可能导致业务数据丢失。   然而通过 rpoplpush 命令，消费者程序在主消息队列中取出消息之后再将其插入到备份队列中，直到消费者程序完成正常的处理后，再将该消息从备份列表中删除。   同时还可以提供一个守护进程，当发现备份队列中的消息过期时，可以重新将其再放回到主消息队列中，以便其它消费者程序继续处理。</p><p> <img src="https://img-blog.csdnimg.cn/20201010200802602.gif" alt="img"></p><h1 id="Redis-集合-Set"><a href="#Redis-集合-Set" class="headerlink" title="Redis 集合(Set)"></a>Redis 集合(Set)</h1><p>1、Redis 的 Set 是 string 类型的无序集合。和 java 一样，集合中不会有重复的元素。</p><p>2、集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p><p>3、每个集合中最大的成员数为 4294967295（40多亿个成员)。</p><p>sadd key value1 value2 …：向集合 key 中添加元素，key 不存在时会自动新建，value 存在时，后一次的会被忽略。smembers key：获取集合 key 中的所有元素。</p><p>4、Redis 集合(Set)官网文档：<a href="https://www.redis.net.cn/order/3594.html">https://www.redis.net.cn/order/3594.html</a></p><table><thead><tr><th align="left">序号</th><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">[sadd key member1 <a href="https://www.redis.net.cn/order/3594.html">member2]</a></td><td align="left">向集合添加一个或多个成员。如果 value 已经存在，则不会再添加。返回插入成功的个数。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.redis.net.cn/order/3595.html">scard key</a></td><td align="left">获取集合的成员数。key 不存在时，返回0。</td></tr><tr><td align="left">3</td><td align="left">[sdiff key1 <a href="https://www.redis.net.cn/order/3596.html">key2]</a></td><td align="left">返回给定所有集合的差集。求 key1 与 key2 key3 …的差集，即 key1 中有，但 key2 key3 …都没有的元素。</td></tr><tr><td align="left">4</td><td align="left">[sdiffstore destination key1 <a href="https://www.redis.net.cn/order/3597.html">key2]</a></td><td align="left">将 key1 集合与其它集合的差集放入到 destination 集合中。如果 destination 已经存在且有值，则会被全部清除，不存在时会新建。</td></tr><tr><td align="left">5</td><td align="left">[sinter key1 <a href="https://www.redis.net.cn/order/3598.html">key2]</a></td><td align="left">返回给定所有集合的交集。求 key1 与 key2 key3 …集合的交集。</td></tr><tr><td align="left">6</td><td align="left">[sinterstore destination key1 <a href="https://www.redis.net.cn/order/3599.html">key2]</a></td><td align="left">将 key1 与其它集合的交集存放到 destination 集合中。如果 destination 集合已经有值，则会先被清理。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.redis.net.cn/order/3600.html">sismember key member</a></td><td align="left">判断 member 元素是否是集合 key 的成员。返回1表示存在，返回0表示不存在。key 不存在时也返回0。</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.redis.net.cn/order/3601.html">smembers key</a></td><td align="left">返回集合中的所有成员</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.redis.net.cn/order/3602.html">smove source destination member</a></td><td align="left">将 member 元素从 source 集合移动到 destination 集合</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.redis.net.cn/order/3603.html">spop key</a></td><td align="left">移除并返回集合中的一个随机元素</td></tr><tr><td align="left">11</td><td align="left">[srandmember key <a href="https://www.redis.net.cn/order/3604.html">count]</a></td><td align="left">返回集合中一个或多个随机数。key 不存在时返回（nil）</td></tr><tr><td align="left">12</td><td align="left">[srem key member1 <a href="https://www.redis.net.cn/order/3605.html">member2]</a></td><td align="left">移除集合中一个或多个成员。返回成功删除的个数。 当然也可以使用 del key 直接删除整个集合。</td></tr><tr><td align="left">13</td><td align="left">[sunion key1 <a href="https://www.redis.net.cn/order/3606.html">key2]</a> …</td><td align="left">返回所有给定集合的并集。求 key1 与集合 key2 key3 …的并集。</td></tr><tr><td align="left">14</td><td align="left">[sunionstore destination key1 <a href="https://www.redis.net.cn/order/3607.html">key2]</a> …</td><td align="left">所有给定集合的并集存储在 destination 集合中。将并集结果存放到 destination 集合中。如果 destination 已经有值，则会被清除。</td></tr><tr><td align="left">15</td><td align="left">[sscan key cursor <a href="https://www.redis.net.cn/order/3608.html">MATCH pattern] [COUNT count]</a></td><td align="left">迭代集合中的元素</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/20201010200903246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdteDE5OTMzMjg=,size_16,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20201010200914979.gif" alt="img"></p><h1 id="Redis-有序集合-sorted-set"><a href="#Redis-有序集合-sorted-set" class="headerlink" title="Redis 有序集合(sorted set)"></a>Redis 有序集合(sorted set)</h1><p>1、Redis zset 和 set 一样也是 string 类型元素的集合，且不允许重复的成员。</p><p>2、不同的是每个元素都会关联一个 double 类型的分数，redis 正是通过分数来为集合中的成员进行从小到大的排序。</p><p>3、zset 的成员是唯一的，但分数(score)却可以重复。</p><p>zadd key score1 member1 score2 member2 …：添加元素到集合，元素在集合中存在则更新对应 score：zrangebyscore key min max ：返回分数在 [mix,max]之间的成员，并按照分数由低到高排序。</p><p>4、Redis 有序集合(sorted set)官网文档：<a href="https://www.redis.net.cn/order/3609.html">https://www.redis.net.cn/order/3609.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/wangmx1993328/article/details/90339509#t0&quot;&gt;Redis 基本(basic)命令&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/wan</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringSecurity自定义异常</title>
    <link href="http://wumuwumu.github.io/posts/d6f2c8a8.html"/>
    <id>http://wumuwumu.github.io/posts/d6f2c8a8.html</id>
    <published>2021-01-28T07:00:00.000Z</published>
    <updated>2021-02-27T06:13:13.987Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Spring Security</strong> 中的异常主要分为两大类：一类是认证异常，另一类是授权相关的异常。</p><h1 id="AuthenticationException"><a href="#AuthenticationException" class="headerlink" title="AuthenticationException"></a>AuthenticationException</h1><p><code>AuthenticationException</code> 是在用户认证的时候出现错误时抛出的异常。主要的子类如图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/11/7/16e42fa6b14db7fe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="AuthenticationException.png"></p><p>根据该图的信息，系统用户不存在，被锁定，凭证失效，密码错误等认证过程中出现的异常都由 <code>AuthenticationException</code> 处理。</p><h1 id="AccessDeniedException"><a href="#AccessDeniedException" class="headerlink" title="AccessDeniedException"></a>AccessDeniedException</h1><p><code>AccessDeniedException</code> 主要是在用户在访问受保护资源时被拒绝而抛出的异常。同 <code>AuthenticationException</code> 一样它也提供了一些具体的子类。如下图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/11/7/16e42fa6d6e875bf?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="AccessDeniedException.png"></p><p><code>AccessDeniedException</code> 的子类比较少，主要是 <code>CSRF</code> 相关的异常和授权服务异常。</p><h1 id="Http-状态对认证授权的规定"><a href="#Http-状态对认证授权的规定" class="headerlink" title="Http 状态对认证授权的规定"></a>Http 状态对认证授权的规定</h1><p><strong>Http</strong> 协议对认证授权的响应结果也有规定。</p><h2 id="401-未授权状态"><a href="#401-未授权状态" class="headerlink" title="401 未授权状态"></a>401 未授权状态</h2><p><strong>HTTP 401 错误 - 未授权(Unauthorized)</strong> 一般来说该错误消息表明您首先需要登录（输入有效的用户名和密码）。 如果你刚刚输入这些信息，立刻就看到一个 <code>401</code> 错误，就意味着，无论出于何种原因您的用户名和密码其中之一或两者都无效（输入有误，用户名暂时停用，账户被锁定，凭证失效等） 。总之就是认证失败了。其实正好对应我们上面的 <code>AuthenticationException</code> 。</p><h2 id="403-被拒绝状态"><a href="#403-被拒绝状态" class="headerlink" title="403 被拒绝状态"></a>403 被拒绝状态</h2><p><strong>HTTP 403 错误 - 被禁止(Forbidden)</strong>  出现该错误表明您在访问受限资源时没有得到许可。服务器理解了本次请求但是拒绝执行该任务，该请求不该重发给服务器。并且服务器想让客户端知道为什么没有权限访问特定的资源，服务器应该在返回的信息中描述拒绝的理由。一般实践中我们会比较模糊的表明原因。 该错误对应了我们上面的 <code>AccessDeniedException</code> 。</p><h1 id="Spring-Security-中的异常处理"><a href="#Spring-Security-中的异常处理" class="headerlink" title="Spring Security 中的异常处理"></a>Spring Security 中的异常处理</h1><p>我们在 <strong>Spring Security</strong> 实战干货系列文章中的 <a href="https://felord.cn/spring-security-httpsecurity.html">自定义配置类入口 WebSecurityConfigurerAdapter</a> 一文中提到 <code>HttpSecurity</code> 提供的 <code>exceptionHandling()</code> 方法用来提供异常处理。该方法构造出 <code>ExceptionHandlingConfigurer</code> 异常处理配置类。该配置类提供了两个实用接口：</p><ul><li><strong>AuthenticationEntryPoint</strong> 该类用来统一处理 <code>AuthenticationException</code> 异常</li><li><strong>AccessDeniedHandler</strong>  该类用来统一处理 <code>AccessDeniedException</code> 异常</li></ul><p>我们只要实现并配置这两个异常处理类即可实现对 <strong>Spring Security</strong> 认证授权相关的异常进行统一的自定义处理。</p><h3 id="4-1-实现-AuthenticationEntryPoint"><a href="#4-1-实现-AuthenticationEntryPoint" class="headerlink" title="4.1 实现 AuthenticationEntryPoint"></a>4.1 实现 AuthenticationEntryPoint</h3><p>以 <code>json</code> 信息响应。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationEntryPoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token comment">/** * @author dax * @since 2019/11/6 22:11 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleAuthenticationEntryPoint</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationEntryPoint</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commence</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AuthenticationException</span> authException<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//todo your business</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"uri"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"认证失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span>SC_UNAUTHORIZED<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> resBody <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> printWriter <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>resBody<span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4-2-实现-AccessDeniedHandler"><a href="#4-2-实现-AccessDeniedHandler" class="headerlink" title="4.2 实现 AccessDeniedHandler"></a>4.2 实现 AccessDeniedHandler</h3><p>同样以 <code>json</code> 信息响应。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>access<span class="token punctuation">.</span></span><span class="token class-name">AccessDeniedException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>access<span class="token punctuation">.</span></span><span class="token class-name">AccessDeniedHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token comment">/** * @author dax * @since 2019/11/6 22:19 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleAccessDeniedHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AccessDeniedHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AccessDeniedException</span> accessDeniedException<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//todo your business</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"uri"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"认证失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span>SC_FORBIDDEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> resBody <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> printWriter <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>resBody<span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4-3-个人实践建议"><a href="#4-3-个人实践建议" class="headerlink" title="4.3 个人实践建议"></a>4.3 个人实践建议</h3><p>其实我个人建议 <strong>Http</strong> 状态码 都返回 <code>200</code> 而将 401 状态在 元信息 <code>Map</code> 中返回。因为异常状态码在浏览器端会以 <strong>error</strong> 显示。我们只要能捕捉到 <code>401</code> 和 <code>403</code> 就能认定是认证问题还是授权问题。</p><h3 id="4-4-配置"><a href="#4-4-配置" class="headerlink" title="4.4 配置"></a>4.4 配置</h3><p>实现了上述两个接口后，我们只需要在 <code>WebSecurityConfigurerAdapter</code> 的 <code>configure(HttpSecurity http)</code> 方法中配置即可。相关的配置片段如下：</p><pre class="language-java" data-language="java"><code class="language-java">http<span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accessDeniedHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleAccessDeniedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticationEntryPoint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationEntryPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p><a href="https://juejin.cn/post/6844903988895154184">https://juejin.cn/post/6844903988895154184</a></p><p><a href="https://ld246.com/article/1545318463746">https://ld246.com/article/1545318463746</a></p><p><a href="https://blog.csdn.net/qq_38225558/category_9395795.html">https://blog.csdn.net/qq_38225558/category_9395795.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Spring Security&lt;/strong&gt; 中的异常主要分为两大类：一类是认证异常，另一类是授权相关的异常。&lt;/p&gt;
&lt;h1 id=&quot;AuthenticationException&quot;&gt;&lt;a href=&quot;#AuthenticationException&quot;</summary>
      
    
    
    
    
    <category term="SpringSecurity" scheme="http://wumuwumu.github.io/tags/SpringSecurity/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud API聚合</title>
    <link href="http://wumuwumu.github.io/posts/3cb9b8de.html"/>
    <id>http://wumuwumu.github.io/posts/3cb9b8de.html</id>
    <published>2021-01-28T07:00:00.000Z</published>
    <updated>2021-02-27T06:13:14.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用原本的Swagger"><a href="#使用原本的Swagger" class="headerlink" title="使用原本的Swagger"></a>使用原本的Swagger</h1><h2 id="重写接口"><a href="#重写接口" class="headerlink" title="重写接口"></a>重写接口</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SwaggerService</span> swaggerService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiIgnore</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/swagger-resources/configuration/security"</span><span class="token punctuation">)</span>    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityConfiguration</span><span class="token punctuation">></span></span> <span class="token function">securityConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>swaggerService<span class="token punctuation">.</span><span class="token function">getSecurityConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@ApiIgnore</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/swagger-resources/configuration/ui"</span><span class="token punctuation">)</span>    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UiConfiguration</span><span class="token punctuation">></span></span> <span class="token function">uiConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UiConfiguration</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>swaggerService<span class="token punctuation">.</span><span class="token function">getUiConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取swagger服务列表，swagger页面自动请求     *     * @return list     */</span>    <span class="token annotation punctuation">@ApiIgnore</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/swagger-resources"</span><span class="token punctuation">)</span>    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">SwaggerResource</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">swaggerResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>swaggerService<span class="token punctuation">.</span><span class="token function">getSwaggerResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 查询不包含跳过的服务的路由列表     */</span>    <span class="token annotation punctuation">@ApiIgnore</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/swaggers/resources"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">SwaggerResource</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">resources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>swaggerService<span class="token punctuation">.</span><span class="token function">getSwaggerResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>查询可以提供的接口服务，可以从注册中心中去查找，这里直接写固定的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SwaggerService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SwaggerResource</span><span class="token punctuation">></span></span> <span class="token function">getSwaggerResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UiConfiguration</span> <span class="token function">getUiConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SecurityConfiguration</span> <span class="token function">getSecurityConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SwaggerService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">DiscoveryClient</span> discoveryClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SwaggerResource</span><span class="token punctuation">></span></span> <span class="token function">getSwaggerResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SwaggerResource</span><span class="token punctuation">></span></span> resources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SwaggerResource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SwaggerResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resource<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"demo-user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resource<span class="token punctuation">.</span><span class="token function">setSwaggerVersion</span><span class="token punctuation">(</span><span class="token string">"2.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这里可以使用网关地址，获取自己手动请求，不然有跨域问题</span>        resource<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:9000/user/v2/api-docs"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        resources<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resources<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">UiConfiguration</span> <span class="token function">getUiConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UiConfiguration</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">SecurityConfiguration</span> <span class="token function">getSecurityConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SecurityConfiguration</span><span class="token punctuation">(</span>                <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"unknown"</span><span class="token punctuation">,</span> <span class="token string">"default"</span><span class="token punctuation">,</span>                <span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token string">"token"</span><span class="token punctuation">,</span>                <span class="token class-name">ApiKeyVehicle</span><span class="token punctuation">.</span>HEADER<span class="token punctuation">,</span> <span class="token string">"token"</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h1 id="knife4j"><a href="#knife4j" class="headerlink" title="knife4j"></a>knife4j</h1><p><a href="https://doc.xiaominfo.com/knife4j/resources/aggregation-introduction.html">https://doc.xiaominfo.com/knife4j/resources/aggregation-introduction.html</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://juejin.cn/post/6854573219916201997">https://juejin.cn/post/6854573219916201997</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用原本的Swagger&quot;&gt;&lt;a href=&quot;#使用原本的Swagger&quot; class=&quot;headerlink&quot; title=&quot;使用原本的Swagger&quot;&gt;&lt;/a&gt;使用原本的Swagger&lt;/h1&gt;&lt;h2 id=&quot;重写接口&quot;&gt;&lt;a href=&quot;#重写接口&quot; cla</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://wumuwumu.github.io/tags/SpringCloud/"/>
    
    <category term="Swagger" scheme="http://wumuwumu.github.io/tags/Swagger/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloudGateway基本操作-限流（详细版）</title>
    <link href="http://wumuwumu.github.io/posts/d858ee63.html"/>
    <id>http://wumuwumu.github.io/posts/d858ee63.html</id>
    <published>2021-01-26T08:00:00.000Z</published>
    <updated>2021-02-27T06:13:14.035Z</updated>
    
    <content type="html"><![CDATA[<p>话说在 Spring Cloud Gateway 问世之前，Spring Cloud 的微服务世界里，网关一定非 Netflix Zuul 莫属。但是由于 Zuul 1.x 存在的一些问题，比如阻塞式的 API，不支持 WebSocket 等，一直被人所诟病，而且 Zuul 升级新版本依赖于 Netflix 公司，经过几次跳票之后，Spring 开源社区决定推出自己的网关组件，替代 Netflix Zuul。</p><p>从 18 年 6 月 Spring Cloud 发布的 Finchley 版本开始，Spring Cloud Gateway 逐渐崭露头角，它基于 Spring 5.0、Spring Boot 2.0 和 Project Reactor 等技术开发，不仅支持响应式和无阻塞式的 API，而且支持 WebSocket，和 Spring 框架紧密集成。尽管 Zuul 后来也推出了 2.x 版本，在底层使用了异步无阻塞式的 API，大大改善了其性能，但是目前看来 Spring 并没有打算继续集成它的计划。</p><p>根据官网的描述，Spring Cloud Gateway 的主要特性如下：</p><ul><li>Built on Spring Framework 5, Project Reactor and Spring Boot 2.0</li><li>Able to match routes on any request attribute</li><li>Predicates and filters are specific to routes</li><li>Hystrix Circuit Breaker integration</li><li>Spring Cloud DiscoveryClient integration</li><li>Easy to write Predicates and Filters</li><li>Request Rate Limiting</li><li>Path Rewriting</li></ul><p>可以看出 Spring Cloud Gateway 可以很方便的和 Spring Cloud 生态中的其他组件进行集成（比如：断路器和服务发现），而且提供了一套简单易写的 <strong>断言</strong>（<strong>Predicates</strong>，有的地方也翻译成 <strong>谓词</strong>）和 <strong>过滤器</strong>（<strong>Filters</strong>）机制，可以对每个 <strong>路由</strong>（<strong>Routes</strong>）进行特殊请求处理。</p><p>最近在项目中使用了 Spring Cloud Gateway，并在它的基础上实现了一些高级特性，如限流和留痕，在网关的使用过程中遇到了不少的挑战，于是趁着项目结束，抽点时间系统地学习并总结下。这篇文章主要学习限流技术，首先我会介绍一些常见的限流场景和限流算法，然后介绍一些关于限流的开源项目，学习别人是如何实现限流的，最后介绍我是如何在网关中实现限流的，并分享一些实现过程中的经验和遇到的坑。</p><h2 id="一、常见的限流场景"><a href="#一、常见的限流场景" class="headerlink" title="一、常见的限流场景"></a>一、常见的限流场景</h2><p><strong>缓存</strong>、<strong>降级</strong> 和 <strong>限流</strong> 被称为高并发、分布式系统的三驾马车，网关作为整个分布式系统中的第一道关卡，限流功能自然必不可少。通过限流，可以控制服务请求的速率，从而提高系统应对突发大流量的能力，让系统更具弹性。限流有着很多实际的应用场景，比如双十一的秒杀活动， 12306 的抢票等。</p><h3 id="1-1-限流的对象"><a href="#1-1-限流的对象" class="headerlink" title="1.1 限流的对象"></a>1.1 限流的对象</h3><p>通过上面的介绍，我们对限流的概念可能感觉还是比较模糊，到底限流限的是什么？顾名思义，限流就是限制流量，但这里的流量是一个比较笼统的概念。如果考虑各种不同的场景，限流是非常复杂的，而且和具体的业务规则密切相关，可以考虑如下几种常见的场景：</p><ul><li>限制某个接口一分钟内最多请求 100 次</li><li>限制某个用户的下载速度最多 100KB/S</li><li>限制某个用户同时只能对某个接口发起 5 路请求</li><li>限制某个 IP 来源禁止访问任何请求</li></ul><p>从上面的例子可以看出，根据不同的请求者和请求资源，可以组合出不同的限流规则。可以根据请求者的 IP 来进行限流，或者根据请求对应的用户来限流，又或者根据某个特定的请求参数来限流。而限流的对象可以是请求的频率，传输的速率，或者并发量等，其中最常见的两个限流对象是请求频率和并发量，他们对应的限流被称为 <strong>请求频率限流</strong>（Request rate limiting）和 <strong>并发量限流</strong>（Concurrent requests limiting）。<strong>传输速率限流</strong> 在下载场景下比较常用，比如一些资源下载站会限制普通用户的下载速度，只有购买会员才能提速，这种限流的做法实际上和请求频率限流类似，只不过一个限制的是请求量的多少，一个限制的是请求数据报文的大小。这篇文章主要介绍请求频率限流和并发量限流。</p><h3 id="1-2-限流的处理方式"><a href="#1-2-限流的处理方式" class="headerlink" title="1.2 限流的处理方式"></a>1.2 限流的处理方式</h3><p>在系统中设计限流方案时，有一个问题值得设计者去仔细考虑，当请求者被限流规则拦截之后，我们该如何返回结果。一般我们有下面三种限流的处理方式：</p><ul><li>拒绝服务</li><li>排队等待</li><li>服务降级</li></ul><p>最简单的做法是拒绝服务，直接抛出异常，返回错误信息（比如返回 HTTP 状态码 429 Too Many Requests），或者给前端返回 302 重定向到一个错误页面，提示用户资源没有了或稍后再试。但是对于一些比较重要的接口不能直接拒绝，比如秒杀、下单等接口，我们既不希望用户请求太快，也不希望请求失败，这种情况一般会将请求放到一个消息队列中排队等待，消息队列可以起到削峰和限流的作用。第三种处理方式是服务降级，当触发限流条件时，直接返回兜底数据，比如查询商品库存的接口，可以默认返回有货。</p><h3 id="1-3-限流的架构"><a href="#1-3-限流的架构" class="headerlink" title="1.3 限流的架构"></a>1.3 限流的架构</h3><p>针对不同的系统架构，需要使用不同的限流方案。如下图所示，服务部署的方式一般可以分为单机模式和集群模式：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loUHVzVllCc2JnVWljU3RLS0VpYzZXRjRYT256cmpBRzZzSW96eWhUUVlKaEg3ZEJtN2JnMWczVncvNjQw?x-oss-process=image/format,png" alt="img"></p><p>单机模式的限流非常简单，可以直接基于内存就可以实现，而集群模式的限流必须依赖于某个“中心化”的组件，比如网关或 Redis，从而引出两种不同的限流架构：<strong>网关层限流</strong> 和 <strong>中间件限流</strong>。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loNE80aWFtRWppY0kzM0U3U1RiaWNWS1p2SkxzNVlJZE1Uek9tZVhxcXhPa3oxSkNoSDUwc0RXdTNRLzY0MA?x-oss-process=image/format,png" alt="img"></p><p>网关作为整个分布式系统的入口，承担了所有的用户请求，所以在网关中进行限流是最合适不过的。网关层限流有时也被称为 <strong>接入层限流</strong>。除了我们使用的 Spring Cloud Gateway，最常用的网关层组件还有 Nginx，可以通过它的 ngx_http_limit_req_module 模块，使用 limit_conn_zone、limit_req_zone、limit_rate 等指令很容易的实现并发量限流、请求频率限流和传输速率限流。这里不对 Nginx 作过多的说明，关于这几个指令的详细信息可以 参考 Nginx 的官方文档。</p><p>另一种限流架构是中间件限流，可以将限流的逻辑下沉到服务层。但是集群中的每个服务必须将自己的流量信息统一汇总到某个地方供其他服务读取，一般来说用 Redis 的比较多，Redis 提供的过期特性和 lua 脚本执行非常适合做限流。除了 Redis 这种中间件，还有很多类似的分布式缓存系统都可以使用，如 Hazelcast、Apache Ignite、Infinispan 等。</p><p>我们可以更进一步扩展上面的架构，将网关改为集群模式，虽然这还是网关层限流架构，但是由于网关变成了集群模式，所以网关必须依赖于中间件进行限流，这和上面讨论的中间件限流没有区别。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loM2VMS2ljTjVPamtQeTg1SnpreGNUREFjOWJ4SG1JZVlpY1VmalVJWkNyTVJtdEYydVlUSVBnaWFBLzY0MA?x-oss-process=image/format,png" alt="img"></p><h2 id="二、常见的限流算法"><a href="#二、常见的限流算法" class="headerlink" title="二、常见的限流算法"></a>二、常见的限流算法</h2><p>通过上面的学习，我们知道限流可以分为请求频率限流和并发量限流，根据系统架构的不同，又可以分为网关层限流和分布式限流。在不同的应用场景下，我们需要采用不同的限流算法。这一节将介绍一些主流的限流算法。</p><p>有一点要注意的是，利用池化技术也可以达到限流的目的，比如线程池或连接池，但这不是本文的重点。</p><h3 id="2-1-固定窗口算法（Fixed-Window）"><a href="#2-1-固定窗口算法（Fixed-Window）" class="headerlink" title="2.1 固定窗口算法（Fixed Window）"></a>2.1 固定窗口算法（Fixed Window）</h3><p>固定窗口算法是一种最简单的限流算法，它根据限流的条件，将请求时间映射到一个时间窗口，再使用计数器累加访问次数。譬如限流条件为每分钟 5 次，那么就按照分钟为单位映射时间窗口，假设一个请求时间为 11:00:45，时间窗口就是 11:00:00 ~ 11:00:59，在这个时间窗口内设定一个计数器，每来一个请求计数器加一，当这个时间窗口的计数器超过 5 时，就触发限流条件。当请求时间落在下一个时间窗口内时（11:01:00 ~ 11:01:59），上一个窗口的计数器失效，当前的计数器清零，重新开始计数。</p><p>计数器算法非常容易实现，在单机场景下可以使用 <code>AtomicLong</code>、<code>LongAdder</code> 或 <code>Semaphore</code> 来实现计数，而在分布式场景下可以通过 Redis 的 <code>INCR</code> 和 <code>EXPIRE</code> 等命令并结合 <code>EVAL</code> 或 lua 脚本来实现，Redis 官网提供了几种简单的实现方式。无论是请求频率限流还是并发量限流都可以使用这个算法。</p><p>不过这个算法的缺陷也比较明显，那就是存在严重的临界问题。由于每过一个时间窗口，计数器就会清零，这使得限流效果不够平滑，恶意用户可以利用这个特点绕过我们的限流规则。如下图所示，我们的限流条件本来是每分钟 5 次，但是恶意用户在 11:00:00 ~ 11:00:59 这个时间窗口的后半分钟发起 5 次请求，接下来又在 11:01:00 ~ 11:01:59 这个时间窗口的前半分钟发起 5 次请求，这样我们的系统就在 1 分钟内承受了 10 次请求。（图片来源）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loamEzMURCRmJlU2s3a0hKc1VHejJyc0Y2ZzRUMWx4eURFS3ljaWFKMm5RUnNUNXpFN0ZTNjZlUS82NDA?x-oss-process=image/format,png" alt="img"></p><h3 id="2-2-滑动窗口算法（Rolling-Window-或-Sliding-Window）"><a href="#2-2-滑动窗口算法（Rolling-Window-或-Sliding-Window）" class="headerlink" title="2.2 滑动窗口算法（Rolling Window 或 Sliding Window）"></a>2.2 滑动窗口算法（Rolling Window 或 Sliding Window）</h3><p>为了解决固定窗口算法的临界问题，可以将时间窗口划分成更小的时间窗口，然后随着时间的滑动删除相应的小窗口，而不是直接滑过一个大窗口，这就是滑动窗口算法。我们为每个小时间窗口都设置一个计数器，大时间窗口的总请求次数就是每个小时间窗口的计数器的和。如下图所示，我们的时间窗口是 5 秒，可以按秒进行划分，将其划分成 5 个小窗口，时间每过一秒，时间窗口就滑过一秒：（图片来源）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loY2M3YVEyZ0R5WERoeXcwdlFQTHF3UmI2TVZXMklCWDdvRUVpYk5IM0hJYUFoMWlhNHBDWnFmVVEvNjQw?x-oss-process=image/format,png" alt="img"></p><p>rolling-window.png</p><p>每次处理请求时，都需要计算所有小时间窗口的计数器的和，考虑到性能问题，划分的小时间窗口不宜过多，譬如限流条件是每小时 N 个，可以按分钟划分为 60 个窗口，而不是按秒划分成 3600 个。当然如果不考虑性能问题，划分粒度越细，限流效果就越平滑。相反，如果划分粒度越粗，限流效果就越不精确，出现临界问题的可能性也就越大，当划分粒度为 1 时，滑动窗口算法就退化成了固定窗口算法。由于这两种算法都使用了计数器，所以也被称为 <strong>计数器算法（Counters）</strong>。</p><p>进一步思考我们发现，如果划分粒度最粗，也就是只有一个时间窗口时，滑动窗口算法退化成了固定窗口算法；那如果我们把划分粒度调到最细，又会如何呢？那么怎样才能让划分的时间窗口最细呢？时间窗口细到一定地步时，意味着每个时间窗口中只能容纳一个请求，这样我们可以省略计数器，只记录每个请求的时间，然后统计一段时间内的请求数有多少个即可。具体的实现可以参考 这里的 Redis sorted set 技巧 和 这里的 Sliding window log 算法。</p><h3 id="2-3-漏桶算法（Leaky-Bucket）"><a href="#2-3-漏桶算法（Leaky-Bucket）" class="headerlink" title="2.3 漏桶算法（Leaky Bucket）"></a>2.3 漏桶算法（Leaky Bucket）</h3><p>除了计数器算法，另一个很自然的限流思路是将所有的请求缓存到一个队列中，然后按某个固定的速度慢慢处理，这其实就是漏桶算法（Leaky Bucket）。漏桶算法假设将请求装到一个桶中，桶的容量为 M，当桶满时，请求被丢弃。在桶的底部有一个洞，桶中的请求像水一样按固定的速度（每秒 r 个）漏出来。我们用下面这个形象的图来表示漏桶算法：（图片来源）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loS1JnaWFpYTVSMkxweENBOFE5WDdRdGRTWWVKQUhiNnVrNnNLN2hNemtsTTVMdjVqMGR3SUxBWmcvNjQw?x-oss-process=image/format,png" alt="img"></p><p>桶的上面是个水龙头，我们的请求从水龙头流到桶中，水龙头流出的水速不定，有时快有时慢，这种忽快忽慢的流量叫做 <strong>Bursty flow</strong>。如果桶中的水满了，多余的水就会溢出去，相当于请求被丢弃。从桶底部漏出的水速是固定不变的，可以看出漏桶算法可以平滑请求的速率。</p><p>漏桶算法可以通过一个队列来实现，如下图所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loeWRQTms4NjRnSXVZeGdBajRIdmc5NmF1aWJlRXdHUFlUd1VNczF0aWFRRGlieG42WEd4RExIU1RRLzY0MA?x-oss-process=image/format,png" alt="img"></p><p>当请求到达时，不直接处理请求，而是将其放入一个队列，然后另一个线程以固定的速率从队列中读取请求并处理，从而达到限流的目的。注意的是这个队列可以有不同的实现方式，比如设置请求的存活时间，或将队列改造成 PriorityQueue，根据请求的优先级排序而不是先进先出。当然队列也有满的时候，如果队列已经满了，那么请求只能被丢弃了。漏桶算法有一个缺陷，在处理突发流量时效率很低，于是人们又想出了下面的令牌桶算法。</p><h3 id="2-4-令牌桶算法（Token-Bucket）"><a href="#2-4-令牌桶算法（Token-Bucket）" class="headerlink" title="2.4 令牌桶算法（Token Bucket）"></a>2.4 令牌桶算法（Token Bucket）</h3><p>令牌桶算法（Token Bucket）是目前应用最广泛的一种限流算法，它的基本思想由两部分组成：<strong>生成令牌</strong> 和 <strong>消费令牌</strong>。</p><ul><li>生成令牌：假设有一个装令牌的桶，最多能装 M 个，然后按某个固定的速度（每秒 r 个）往桶中放入令牌，桶满时不再放入；</li><li>消费令牌：我们的每次请求都需要从桶中拿一个令牌才能放行，当桶中没有令牌时即触发限流，这时可以将请求放入一个缓冲队列中排队等待，或者直接拒绝；</li></ul><p>令牌桶算法的图示如下：（图片来源）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loRjlkN29XemljV3RydWV1VTh4M01OV1NEbWdwbGljUXdJbW4zNTZyWk9zTDZxV2lhZFh2S29pYW9XZy82NDA?x-oss-process=image/format,png" alt="img"></p><p>在上面的图中，我们将请求放在一个缓冲队列中，可以看出这一部分的逻辑和漏桶算法几乎一模一样，只不过在处理请求上，一个是以固定速率处理，一个是从桶中获取令牌后才处理。</p><p>仔细思考就会发现，令牌桶算法有一个很关键的问题，就是桶大小的设置，正是这个参数可以让令牌桶算法具备处理突发流量的能力。譬如将桶大小设置为 100，生成令牌的速度设置为每秒 10 个，那么在系统空闲一段时间的之后（桶中令牌一直没有消费，慢慢的会被装满），突然来了 50 个请求，这时系统可以直接按每秒 50 个的速度处理，随着桶中的令牌很快用完，处理速度又会慢慢降下来，和生成令牌速度趋于一致。这是令牌桶算法和漏桶算法最大的区别，漏桶算法无论来了多少请求，只会一直以每秒 10 个的速度进行处理。当然，处理突发流量虽然提高了系统性能，但也给系统带来了一定的压力，如果桶大小设置不合理，突发的大流量可能会直接压垮系统。</p><p>通过上面对令牌桶的原理分析，一般会有两种不同的实现方式。第一种方式是启动一个内部线程，不断的往桶中添加令牌，处理请求时从桶中获取令牌，和上面图中的处理逻辑一样。第二种方式不依赖于内部线程，而是在每次处理请求之前先实时计算出要填充的令牌数并填充，然后再从桶中获取令牌。下面是第二种方式的一种经典实现，其中 <code>capacity</code> 表示令牌桶大小，<code>refillTokensPerOneMillis</code> 表示填充速度，每毫秒填充多少个，<code>availableTokens</code> 表示令牌桶中还剩多少个令牌，<code>lastRefillTimestamp</code> 表示上一次填充时间。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenBucket</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> refillTokensPerOneMillis<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> availableTokens<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> lastRefillTimestamp<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">TokenBucket</span><span class="token punctuation">(</span><span class="token keyword">long</span> capacity<span class="token punctuation">,</span> <span class="token keyword">long</span> refillTokens<span class="token punctuation">,</span> <span class="token keyword">long</span> refillPeriodMillis<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>refillTokensPerOneMillis <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> refillTokens <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> refillPeriodMillis<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>availableTokens <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastRefillTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">synchronized</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryConsume</span><span class="token punctuation">(</span><span class="token keyword">int</span> numberTokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">refill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>availableTokens <span class="token operator">&lt;</span> numberTokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            availableTokens <span class="token operator">-=</span> numberTokens<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">refill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> currentTimeMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentTimeMillis <span class="token operator">></span> lastRefillTimestamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> millisSinceLastRefill <span class="token operator">=</span> currentTimeMillis <span class="token operator">-</span> lastRefillTimestamp<span class="token punctuation">;</span>            <span class="token keyword">double</span> refill <span class="token operator">=</span> millisSinceLastRefill <span class="token operator">*</span> refillTokensPerOneMillis<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>availableTokens <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> availableTokens <span class="token operator">+</span> refill<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lastRefillTimestamp <span class="token operator">=</span> currentTimeMillis<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>可以像下面这样创建一个令牌桶（桶大小为 100，且每秒生成 100 个令牌）：</p><pre class="language-go" data-language="go"><code class="language-go">TokenBucket limiter <span class="token operator">=</span> <span class="token builtin">new</span> <span class="token function">TokenBucket</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>从上面的代码片段可以看出，令牌桶算法的实现非常简单也非常高效，仅仅通过几个变量的运算就实现了完整的限流功能。核心逻辑在于 <code>refill()</code> 这个方法，在每次消费令牌时，计算当前时间和上一次填充的时间差，并根据填充速度计算出应该填充多少令牌。在重新填充令牌后，再判断请求的令牌数是否足够，如果不够，返回 false，如果足够，则减去令牌数，并返回 true。</p><p>在实际的应用中，往往不会直接使用这种原始的令牌桶算法，一般会在它的基础上作一些改进，比如，填充速率支持动态调整，令牌总数支持透支，基于 Redis 支持分布式限流等，不过总体来说还是符合令牌桶算法的整体框架，我们在后面学习一些开源项目时对此会有更深的体会。</p><h2 id="三、一些开源项目"><a href="#三、一些开源项目" class="headerlink" title="三、一些开源项目"></a>三、一些开源项目</h2><p>有很多开源项目中都实现了限流的功能，这一节通过一些开源项目的学习，了解限流是如何实现的。</p><h3 id="3-1-Guava-的-RateLimiter"><a href="#3-1-Guava-的-RateLimiter" class="headerlink" title="3.1 Guava 的 RateLimiter"></a>3.1 Guava 的 RateLimiter</h3><p>Google Guava 是一个强大的核心库，包含了很多有用的工具类，例如：集合、缓存、并发库、字符串处理、I/O 等等。其中在并发库中，Guava 提供了两个和限流相关的类：RateLimiter 和 SmoothRateLimiter。Guava 的 RateLimiter 基于令牌桶算法实现，不过在传统的令牌桶算法基础上做了点改进，支持两种不同的限流方式：<strong>平滑突发限流（SmoothBursty）</strong> 和 <strong>平滑预热限流（SmoothWarmingUp）</strong>。</p><p>下面的方法可以创建一个平滑突发限流器（SmoothBursty）：</p><pre class="language-go" data-language="go"><code class="language-go">RateLimiter limiter <span class="token operator">=</span> RateLimiter<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>RateLimiter.create(5)</code> 表示这个限流器容量为 5，并且每秒生成 5 个令牌，也就是每隔 200 毫秒生成一个。我们可以使用 <code>limiter.acquire()</code> 消费令牌，如果桶中令牌足够，返回 0，如果令牌不足，则阻塞等待，并返回等待的时间。我们连续请求几次：</p><pre class="language-go" data-language="go"><code class="language-go">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">``</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">``</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">``</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出结果如下：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token number">0.0</span><span class="token string">``</span><span class="token number">0.198239</span><span class="token string">``</span><span class="token number">0.196083</span><span class="token string">``</span><span class="token number">0.200609</span></code></pre><p>可以看出限流器创建之后，初始会有一个令牌，然后每隔 200 毫秒生成一个令牌，所以第一次请求直接返回 0，后面的请求都会阻塞大约 200 毫秒。另外，<code>SmoothBursty</code> 还具有应对突发的能力，而且 <strong>还允许消费未来的令牌</strong>，比如下面的例子：</p><pre class="language-go" data-language="go"><code class="language-go">RateLimiter limiter <span class="token operator">=</span> RateLimiter<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>会得到类似下面的输出：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token number">0.01</span><span class="token number">.997428</span>  <span class="token number">0.192273</span>  <span class="token number">0.200616</span></code></pre><p>限流器创建之后，初始令牌只有一个，但是我们请求 10 个令牌竟然也通过了，只不过看后面请求发现，第二次请求花了 2 秒左右的时间把前面的透支的令牌给补上了。</p><p>Guava 支持的另一种限流方式是平滑预热限流器（SmoothWarmingUp），可以通过下面的方法创建：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">RateLimiter</span> limiter <span class="token operator">=</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第一个参数还是每秒创建的令牌数量，这里是每秒 2 个，也就是每 500 毫秒生成一个，后面的参数表示从冷启动速率过渡到平均速率的时间间隔，也就是所谓的热身时间间隔（warm up period）。我们看下输出结果：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token number">0.0</span> <span class="token number">1.329289</span>  <span class="token number">0.994375</span>  <span class="token number">0.662888</span>  <span class="token number">0.501287</span></code></pre><p>第一个请求还是立即得到令牌，但是后面的请求和上面平滑突发限流就完全不一样了，按理来说 500 毫秒就会生成一个令牌，但是我们发现第二个请求却等了 1.3s，而不是 0.5s，后面第三个和第四个请求也等了一段时间。不过可以看出，等待时间在慢慢的接近 0.5s，直到第五个请求等待时间才开始变得正常。从第一个请求到第五个请求，这中间的时间间隔就是热身阶段，可以算出热身的时间就是我们设置的 3 秒。</p><p>关于热身的算法很有意思，也比较烧脑，有兴趣的同学可以参考 这里 和 这里 的过程分析。</p><h3 id="3-2-Bucket4j"><a href="#3-2-Bucket4j" class="headerlink" title="3.2 Bucket4j"></a>3.2 Bucket4j</h3><p>Bucket4j 是一个基于令牌桶算法实现的强大的限流库，它不仅支持单机限流，还支持通过诸如 Hazelcast、Ignite、Coherence、Infinispan 或其他兼容 JCache API (JSR 107) 规范的分布式缓存实现分布式限流。</p><p>在使用 Bucket4j 之前，我们有必要先了解 Bucket4j 中的几个核心概念：</p><ul><li>Bucket</li><li>Bandwidth</li><li>Refill</li></ul><p><code>Bucket</code> 接口代表了令牌桶的具体实现，也是我们操作的入口。它提供了诸如 <code>tryConsume</code> 和 <code>tryConsumeAndReturnRemaining</code> 这样的方法供我们消费令牌。可以通过下面的构造方法来创建 <code>Bucket</code>：</p><pre class="language-go" data-language="go"><code class="language-go">Bucket bucket <span class="token operator">=</span> Bucket4j<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLimit</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>bucket<span class="token punctuation">.</span><span class="token function">tryConsume</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>Bandwidth</code> 的意思是带宽，可以理解为限流的规则。Bucket4j 提供了两种方法来创建 Bandwidth：<code>simple</code> 和 <code>classic</code>。下面是 simple 方式创建的 Bandwidth，表示桶大小为 10，填充速度为每分钟 10 个令牌：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Bandwidth</span> limit <span class="token operator">=</span> <span class="token class-name">Bandwidth</span><span class="token punctuation">.</span><span class="token function">simple</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>simple 方式桶大小和填充速度是一样的，classic 方式更灵活一点，可以自定义填充速度，下面的例子表示桶大小为 10，填充速度为每分钟 5 个令牌：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Refill</span> filler <span class="token operator">=</span> <span class="token class-name">Refill</span><span class="token punctuation">.</span><span class="token function">greedy</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Bandwidth</span> limit <span class="token operator">=</span> <span class="token class-name">Bandwidth</span><span class="token punctuation">.</span><span class="token function">classic</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> filler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中，<code>Refill</code> 用于填充令牌桶，可以通过它定义填充速度，Bucket4j 有两种填充令牌的策略：<strong>间隔策略（intervally）</strong> 和 <strong>贪婪策略（greedy）</strong>。在上面的例子中我们使用的是贪婪策略，如果使用间隔策略可以像下面这样创建 <code>Refill</code>：</p><pre class="language-go" data-language="go"><code class="language-go">Refill filler <span class="token operator">=</span> Refill<span class="token punctuation">.</span><span class="token function">intervally</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Duration<span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>所谓间隔策略指的是每隔一段时间，一次性的填充所有令牌，比如上面的例子，会每隔一分钟，填充 5 个令牌，如下所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loMDVLV2xpYUs2UVhvOHdwTVlxTThZeFRYUFppYm9pYWFNb3NtRjNPNUhKNmxjVllWMlgyZDF1MVR3LzY0MA?x-oss-process=image/format,png" alt="img"></p><p>intervally.png</p><p>而贪婪策略会尽可能贪婪的填充令牌，同样是上面的例子，会将一分钟划分成 5 个更小的时间单元，每隔 12 秒，填充 1 个令牌，如下所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loaFpvM3VqbHBjWnI4YUtwNGlhVE15aWNRUWljWTRLZThtOWpCMXVaYVdTcVlvNzhUNDJDMzZRZUJnLzY0MA?x-oss-process=image/format,png" alt="img"></p><p>在了解了 Bucket4j 中的几个核心概念之后，我们再来看看官网介绍的一些特性：</p><ul><li>基于令牌桶算法</li><li>高性能，无锁实现</li><li>不存在精度问题，所有计算都是基于整型的</li><li>支持通过符合 JCache API 规范的分布式缓存系统实现分布式限流</li><li>支持为每个 Bucket 设置多个 Bandwidth</li><li>支持同步和异步 API</li><li>支持可插拔的监听 API，用于集成监控和日志</li><li>不仅可以用于限流，还可以用于简单的调度</li></ul><p>Bucket4j 提供了丰富的文档，推荐在使用 Bucket4j 之前，先把官方文档中的 基本用法 和 高级特性 仔细阅读一遍。另外，关于 Bucket4j 的使用，推荐这篇文章 Rate limiting Spring MVC endpoints with bucket4j，这篇文章详细的讲解了如何在 Spring MVC 中使用拦截器和 Bucket4j 打造业务无侵入的限流方案，另外还讲解了如何使用 Hazelcast 实现分布式限流；另外，Rate Limiting a Spring API Using Bucket4j 这篇文章也是一份很好的入门教程，介绍了 Bucket4j 的基础知识，在文章的最后还提供了 Spring Boot Starter 的集成方式，结合 Spring Boot Actuator 很容易将限流指标集成到监控系统中。</p><p>和 Guava 的限流器相比，Bucket4j 的功能显然要更胜一筹，毕竟 Guava 的目的只是用作通用工具类，而不是用于限流的。使用 Bucket4j 基本上可以满足我们的大多数要求，不仅支持单机限流和分布式限流，而且可以很好的集成监控，搭配 Prometheus 和 Grafana 简直完美。值得一提的是，有很多开源项目譬如 JHipster API Gateway 就是使用 Bucket4j 来实现限流的。</p><p>Bucket4j 唯一不足的地方是它只支持请求频率限流，不支持并发量限流，另外还有一点，虽然 Bucket4j 支持分布式限流，但它是基于 Hazelcast 这样的分布式缓存系统实现的，不能使用 Redis，这在很多使用 Redis 作缓存的项目中就很不爽，所以我们还需要在开源的世界里继续探索。</p><h3 id="3-3-Resilience4j"><a href="#3-3-Resilience4j" class="headerlink" title="3.3 Resilience4j"></a>3.3 Resilience4j</h3><p>Resilience4j 是一款轻量级、易使用的高可用框架。用过 Spring Cloud 早期版本的同学肯定都听过 Netflix Hystrix，Resilience4j 的设计灵感就来自于它。自从 Hystrix 停止维护之后，官方也推荐大家使用 Resilience4j 来代替 Hystrix。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loOFdsQjZVSjVQZFFsYnBFUE02c0RWOXByZktieUlMQlNCaWNWdjV6QXdxck40b0JpY1d5Y3huMHcvNjQw?x-oss-process=image/format,png" alt="img"></p><p>hystrix.png</p><p>Resilience4j 的底层采用 Vavr，这是一个非常轻量级的 Java 函数式库，使得 Resilience4j 非常适合函数式编程。Resilience4j 以装饰器模式提供对函数式接口或 lambda 表达式的封装，提供了一波高可用机制：<strong>重试（Retry）</strong>、<strong>熔断（Circuit Breaker）</strong>、<strong>限流（Rate Limiter）</strong>、<strong>限时（Timer Limiter）</strong>、<strong>隔离（Bulkhead）</strong>、<strong>缓存（Caceh）</strong> 和 <strong>降级（Fallback）</strong>。我们重点关注这里的两个功能：限流（Rate Limiter） 和 隔离（Bulkhead），Rate Limiter 是请求频率限流，Bulkhead 是并发量限流。</p><p>Resilience4j 提供了两种限流的实现：<strong>SemaphoreBasedRateLimiter</strong> 和 <strong>AtomicRateLimiter</strong>。<strong>SemaphoreBasedRateLimiter</strong> 基于信号量实现，用户的每次请求都会申请一个信号量，并记录申请的时间，申请通过则允许请求，申请失败则限流，另外有一个内部线程会定期扫描过期的信号量并释放，很显然这是令牌桶的算法。<strong>AtomicRateLimiter</strong> 和上面的经典实现类似，不需要额外的线程，在处理每次请求时，根据距离上次请求的时间和生成令牌的速度自动填充。关于这二者的区别可以参考这篇文章 Rate Limiter Internals in Resilience4j。</p><p>Resilience4j 也提供了两种隔离的实现：<strong>SemaphoreBulkhead</strong> 和 <strong>ThreadPoolBulkhead</strong>，通过信号量或线程池控制请求的并发数，具体的用法参考官方文档，这里不再赘述。</p><p>下面是一个同时使用限流和隔离的例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个 Bulkhead，最大并发量为 150</span><span class="token class-name">BulkheadConfig</span> bulkheadConfig <span class="token operator">=</span> <span class="token class-name">BulkheadConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">maxConcurrentCalls</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">maxWaitTime</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Bulkhead</span> bulkhead <span class="token operator">=</span> <span class="token class-name">Bulkhead</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"backendName"</span><span class="token punctuation">,</span> bulkheadConfig<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个 RateLimiter，每秒允许一次请求</span><span class="token class-name">RateLimiterConfig</span> rateLimiterConfig <span class="token operator">=</span> <span class="token class-name">RateLimiterConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">timeoutDuration</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">limitRefreshPeriod</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">limitForPeriod</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RateLimiter</span> rateLimiter <span class="token operator">=</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"backendName"</span><span class="token punctuation">,</span> rateLimiterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 Bulkhead 和 RateLimiter 装饰业务逻辑</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> backendService<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> decoratedSupplier <span class="token operator">=</span> <span class="token class-name">Decorators</span><span class="token punctuation">.</span><span class="token function">ofSupplier</span><span class="token punctuation">(</span>supplier<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">withBulkhead</span><span class="token punctuation">(</span>bulkhead<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">withRateLimiter</span><span class="token punctuation">(</span>rateLimiter<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用业务逻辑</span><span class="token class-name">Try</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token keyword">try</span> <span class="token operator">=</span> <span class="token class-name">Try</span><span class="token punctuation">.</span><span class="token function">ofSupplier</span><span class="token punctuation">(</span>decoratedSupplier<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token keyword">try</span><span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Resilience4j 在功能特性上比 Bucket4j 强大不少，而且还支持并发量限流。不过最大的遗憾是，Resilience4j 不支持分布式限流。</p><h3 id="3-4-其他"><a href="#3-4-其他" class="headerlink" title="3.4 其他"></a>3.4 其他</h3><p>网上还有很多限流相关的开源项目，不可能一一介绍，这里列出来的只是冰山之一角：</p><ul><li><a href="https://github.com/mokies/ratelimitj">https://github.com/mokies/ratelimitj</a></li><li><a href="https://github.com/wangzheng0822/ratelimiter4j">https://github.com/wangzheng0822/ratelimiter4j</a></li><li><a href="https://github.com/wukq/rate-limiter">https://github.com/wukq/rate-limiter</a></li><li><a href="https://github.com/marcosbarbero/spring-cloud-zuul-ratelimit">https://github.com/marcosbarbero/spring-cloud-zuul-ratelimit</a></li><li><a href="https://github.com/onblog/SnowJena">https://github.com/onblog/SnowJena</a></li><li><a href="https://gitee.com/zhanghaiyang/spring-boot-starter-current-limiting">https://gitee.com/zhanghaiyang/spring-boot-starter-current-limiting</a></li><li><a href="https://github.com/Netflix/concurrency-limits">https://github.com/Netflix/concurrency-limits</a></li></ul><p>可以看出，限流技术在实际项目中应用非常广泛，大家对实现自己的限流算法乐此不疲，新算法和新实现层出不穷。但是找来找去，目前还没有找到一款开源项目完全满足我的需求。</p><p>我的需求其实很简单，需要同时满足两种不同的限流场景：请求频率限流和并发量限流，并且能同时满足两种不同的限流架构：单机限流和分布式限流。下面我们就开始在 Spring Cloud Gateway 中实现这几种限流，通过前面介绍的那些项目，我们取长补短，基本上都能用比较成熟的技术实现，只不过对于最后一种情况，分布式并发量限流，网上没有搜到现成的解决方案，在和同事讨论了几个晚上之后，想出一种新型的基于双窗口滑动的限流算法，我在这里抛砖引玉，欢迎大家批评指正，如果大家有更好的方法，也欢迎讨论。</p><h2 id="四、在网关中实现限流"><a href="#四、在网关中实现限流" class="headerlink" title="四、在网关中实现限流"></a>四、在网关中实现限流</h2><p>在文章一开始介绍 Spring Cloud Gateway 的特性时，我们注意到其中有一条 <code>Request Rate Limiting</code>，说明网关自带了限流的功能，但是 Spring Cloud Gateway 自带的限流有很多限制，譬如不支持单机限流，不支持并发量限流，而且它的请求频率限流也是不尽人意，这些都需要我们自己动手来解决。</p><h3 id="4-1-实现单机请求频率限流"><a href="#4-1-实现单机请求频率限流" class="headerlink" title="4.1 实现单机请求频率限流"></a>4.1 实现单机请求频率限流</h3><p>Spring Cloud Gateway 中定义了关于限流的一个接口 <code>RateLimiter</code>，如下：</p><pre class="language-go" data-language="go"><code class="language-go">public <span class="token keyword">interface</span> RateLimiter<span class="token operator">&lt;</span>C<span class="token operator">></span> extends StatefulConfigurable<span class="token operator">&lt;</span>C<span class="token operator">></span> <span class="token punctuation">&#123;</span>    Mono<span class="token operator">&lt;</span>RateLimiter<span class="token punctuation">.</span>Response<span class="token operator">></span> <span class="token function">isAllowed</span><span class="token punctuation">(</span>String routeId<span class="token punctuation">,</span> String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这个接口就一个方法 <code>isAllowed</code>，第一个参数 <code>routeId</code> 表示请求路由的 ID，根据 routeId 可以获取限流相关的配置，第二个参数 <code>id</code> 表示要限流的对象的唯一标识，可以是用户名，也可以是 IP，或者其他的可以从 <code>ServerWebExchange</code> 中得到的信息。我们看下 <code>RequestRateLimiterGatewayFilterFactory</code> 中对 <code>isAllowed</code> 的调用逻辑：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">GatewayFilter</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 从配置中得到 KeyResolver</span>    <span class="token class-name">KeyResolver</span> resolver <span class="token operator">=</span> <span class="token function">getOrDefault</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>keyResolver<span class="token punctuation">,</span> defaultKeyResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 从配置中得到 RateLimiter</span>    <span class="token class-name">RateLimiter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> limiter <span class="token operator">=</span> <span class="token function">getOrDefault</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>rateLimiter<span class="token punctuation">,</span>            defaultRateLimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> denyEmpty <span class="token operator">=</span> <span class="token function">getOrDefault</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>denyEmptyKey<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>denyEmptyKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpStatusHolder</span> emptyKeyStatus <span class="token operator">=</span> <span class="token class-name">HttpStatusHolder</span>            <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>emptyKeyStatus<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>emptyKeyStatusCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span> <span class="token operator">-></span> resolver<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">defaultIfEmpty</span><span class="token punctuation">(</span>EMPTY_KEY<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>key <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 通过 KeyResolver 得到 key，作为唯一标识 id 传入 isAllowed() 方法</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>EMPTY_KEY<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>denyEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">setResponseStatus</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> emptyKeyStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 获取当前路由 ID，作为 routeId 参数传入 isAllowed() 方法</span>                <span class="token class-name">String</span> routeId <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getRouteId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>routeId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Route</span> route <span class="token operator">=</span> exchange                            <span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchangeUtils</span><span class="token punctuation">.</span>GATEWAY_ROUTE_ATTR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    routeId <span class="token operator">=</span> route<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> limiter<span class="token punctuation">.</span><span class="token function">isAllowed</span><span class="token punctuation">(</span>routeId<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>response <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> header <span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                header<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// 请求允许，直接走到下一个 filter</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// 请求被限流，返回设置的 HTTP 状态码（默认是 429）</span>                    <span class="token function">setResponseStatus</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>从上面的逻辑可以看出，通过实现 <code>KeyResolver</code> 接口的 <code>resolve</code> 方法就可以自定义要限流的对象了。</p><pre class="language-go" data-language="go"><code class="language-go">public <span class="token keyword">interface</span> KeyResolver <span class="token punctuation">&#123;</span>    Mono<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>比如下面的 <code>HostAddrKeyResolver</code> 可以根据 IP 来限流：</p><pre class="language-go" data-language="go"><code class="language-go">public class HostAddrKeyResolver implements KeyResolver <span class="token punctuation">&#123;</span>    @Override    public Mono<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>我们继续看 Spring Cloud Gateway 的代码发现，<code>RateLimiter</code> 接口只提供了一个实现类 <code>RedisRateLimiter</code>：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loMGliN1FITnhkWXlWREZFNG9oQnVsd2lhR2IzUmljNmRPRk9QZmY3V1BiVm9MTjN4NlVIY3I1WDR3LzY0MA?x-oss-process=image/format,png" alt="img"></p><p>redis-rate-limiter.png</p><p>很显然是基于 Redis 实现的限流，虽说通过 Redis 也可以实现单机限流，但是总感觉有些大材小用，而且对于那些没有 Redis 的环境很不友好。所以，我们要实现真正的本地限流。</p><p>我们从 Spring Cloud Gateway 的 pull request 中发现了一个新特性 Feature/local-rate-limiter，而且看提交记录，这个新特性很有可能会合并到 3.0.0 版本中。我们不妨来看下这个 local-rate-limiter 的实现：LocalRateLimiter.java，可以看出它是基于 <code>Resilience4j</code> 实现的：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Response</span><span class="token punctuation">></span></span> <span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token class-name">String</span> routeId<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Config</span> routeConfig <span class="token operator">=</span> <span class="token function">loadConfiguration</span><span class="token punctuation">(</span>routeId<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// How many requests per second do you want a user to be allowed to do?</span>    <span class="token keyword">int</span> replenishRate <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getReplenishRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// How many seconds for a token refresh?</span>    <span class="token keyword">int</span> refreshPeriod <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getRefreshPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// How many tokens are requested per request?</span>    <span class="token keyword">int</span> requestedTokens <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getRequestedTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">final</span> io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>resilience4j<span class="token punctuation">.</span>ratelimiter<span class="token punctuation">.</span><span class="token class-name">RateLimiter</span> rateLimiter <span class="token operator">=</span> <span class="token class-name">RateLimiterRegistry</span>            <span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">rateLimiter</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token function">createRateLimiterConfig</span><span class="token punctuation">(</span>refreshPeriod<span class="token punctuation">,</span> replenishRate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">final</span> <span class="token keyword">boolean</span> allowed <span class="token operator">=</span> rateLimiter<span class="token punctuation">.</span><span class="token function">acquirePermission</span><span class="token punctuation">(</span>requestedTokens<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Long</span> tokensLeft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> rateLimiter<span class="token punctuation">.</span><span class="token function">getMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAvailablePermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>allowed<span class="token punctuation">,</span> <span class="token function">getHeaders</span><span class="token punctuation">(</span>routeConfig<span class="token punctuation">,</span> tokensLeft<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>有意思的是，这个类 还有一个早期版本，是基于 Bucket4j 实现的：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Response</span><span class="token punctuation">></span></span> <span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token class-name">String</span> routeId<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">Config</span> routeConfig <span class="token operator">=</span> <span class="token function">loadConfiguration</span><span class="token punctuation">(</span>routeId<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// How many requests per second do you want a user to be allowed to do?</span>    <span class="token keyword">int</span> replenishRate <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getReplenishRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// How much bursting do you want to allow?</span>    <span class="token keyword">int</span> burstCapacity <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getBurstCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// How many tokens are requested per request?</span>    <span class="token keyword">int</span> requestedTokens <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getRequestedTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">final</span> <span class="token class-name">Bucket</span> bucket <span class="token operator">=</span> bucketMap<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>            <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">createBucket</span><span class="token punctuation">(</span>replenishRate<span class="token punctuation">,</span> burstCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">final</span> <span class="token keyword">boolean</span> allowed <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">tryConsume</span><span class="token punctuation">(</span>requestedTokens<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>allowed<span class="token punctuation">,</span>            <span class="token function">getHeaders</span><span class="token punctuation">(</span>routeConfig<span class="token punctuation">,</span> bucket<span class="token punctuation">.</span><span class="token function">getAvailableTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>实现方式都是类似的，在上面对 Bucket4j 和 Resilience4j 已经作了比较详细的介绍，这里不再赘述。不过从这里也可以看出 Spring 生态圈对 Resilience4j 是比较看好的，我们也可以将其引入到我们的项目中。</p><h3 id="4-2-实现分布式请求频率限流"><a href="#4-2-实现分布式请求频率限流" class="headerlink" title="4.2 实现分布式请求频率限流"></a>4.2 实现分布式请求频率限流</h3><p>上面介绍了如何实现单机请求频率限流，接下来再看下分布式请求频率限流。这个就比较简单了，因为上面说了，Spring Cloud Gateway 自带了一个限流实现，就是 <code>RedisRateLimiter</code>，可以用于分布式限流。它的实现原理依然是基于令牌桶算法的，不过实现逻辑是放在一段 lua 脚本中的，我们可以在 <code>src/main/resources/META-INF/scripts</code> 目录下找到该脚本文件 <code>request_rate_limiter.lua</code>：</p><pre class="language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> tokens_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">local</span> timestamp_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">local</span> rate <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">local</span> capacity <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">local</span> now <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">local</span> requested <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">local</span> fill_time <span class="token operator">=</span> capacity<span class="token operator">/</span>rate<span class="token keyword">local</span> ttl <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>fill_time<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">local</span> last_tokens <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> last_tokens <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>  last_tokens <span class="token operator">=</span> capacity<span class="token keyword">end</span> <span class="token keyword">local</span> last_refreshed <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> last_refreshed <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>  last_refreshed <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">end</span> <span class="token keyword">local</span> delta <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> now<span class="token operator">-</span>last_refreshed<span class="token punctuation">)</span><span class="token keyword">local</span> filled_tokens <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> last_tokens<span class="token operator">+</span><span class="token punctuation">(</span>delta<span class="token operator">*</span>rate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">local</span> allowed <span class="token operator">=</span> filled_tokens <span class="token operator">>=</span> requested<span class="token keyword">local</span> new_tokens <span class="token operator">=</span> filled_tokens<span class="token keyword">local</span> allowed_num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> allowed <span class="token keyword">then</span>  new_tokens <span class="token operator">=</span> filled_tokens <span class="token operator">-</span> requested  allowed_num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">end</span> <span class="token keyword">if</span> ttl <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">then</span>  redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"setex"</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> new_tokens<span class="token punctuation">)</span>  redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"setex"</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token keyword">end</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> allowed_num<span class="token punctuation">,</span> new_tokens <span class="token punctuation">&#125;</span></code></pre><p>这段代码和上面介绍令牌桶算法时用 Java 实现的那段经典代码几乎是一样的。这里使用 lua 脚本，主要是利用了 Redis 的单线程特性，以及执行 lua 脚本的原子性，避免了并发访问时可能出现请求量超出上限的现象。想象目前令牌桶中还剩 1 个令牌，此时有两个请求同时到来，判断令牌是否足够也是同时的，两个请求都认为还剩 1 个令牌，于是两个请求都被允许了。</p><p>有两种方式来配置 Spring Cloud Gateway 自带的限流。第一种方式是通过配置文件，比如下面所示的代码，可以对某个 route 进行限流：</p><pre class="language-java" data-language="java"><code class="language-java">spring<span class="token operator">:</span>  cloud<span class="token operator">:</span>    gateway<span class="token operator">:</span>      routes<span class="token operator">:</span>      <span class="token operator">-</span> id<span class="token operator">:</span> test        uri<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>httpbin<span class="token punctuation">.</span>org<span class="token operator">:</span><span class="token number">80</span><span class="token operator">/</span>get        filters<span class="token operator">:</span>        <span class="token operator">-</span> name<span class="token operator">:</span> <span class="token class-name">RequestRateLimiter</span>          args<span class="token operator">:</span>            key<span class="token operator">-</span>resolver<span class="token operator">:</span> <span class="token string">'#&#123;@hostAddrKeyResolver&#125;'</span>            redis<span class="token operator">-</span>rate<span class="token operator">-</span>limiter<span class="token punctuation">.</span>replenishRate<span class="token operator">:</span> <span class="token number">1</span></code></pre><p>其中，<code>key-resolver</code> 使用 SpEL 表达式 <code>#&#123;@beanName&#125;</code> 从 Spring 容器中获取 <code>hostAddrKeyResolver</code> 对象，<code>burstCapacity</code> 表示令牌桶的大小，<code>replenishRate</code> 表示每秒往桶中填充多少个令牌，也就是填充速度。</p><p>第二种方式是通过下面的代码来配置：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">myRoutes</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>p <span class="token operator">-></span> p      <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>filter <span class="token operator">-></span> filter<span class="token punctuation">.</span><span class="token function">requestRateLimiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">rateLimiter</span><span class="token punctuation">(</span><span class="token class-name">RedisRateLimiter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> rl <span class="token operator">-></span> rl<span class="token punctuation">.</span><span class="token function">setBurstCapacity</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setReplenishRate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org:80"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这样就可以对某个 route 进行限流了。但是这里有一点要注意，Spring Cloud Gateway 自带的限流器有一个很大的坑，replenishRate 不支持设置小数，也就是说往桶中填充的 token 的速度最少为每秒 1 个，所以，如果我的限流规则是每分钟 10 个请求（按理说应该每 6 秒填充一次，或每秒填充 1/6 个 token），这种情况 Spring Cloud Gateway 就没法正确的限流。网上也有人提了 issue，support greater than a second resolution for the rate limiter，但还没有得到解决。</p><h3 id="4-3-实现单机并发量限流"><a href="#4-3-实现单机并发量限流" class="headerlink" title="4.3 实现单机并发量限流"></a>4.3 实现单机并发量限流</h3><p>上面学习 Resilience4j 的时候，我们提到了 Resilience4j 的一个功能特性，叫 <strong>隔离（Bulkhead）</strong>。Bulkhead 这个单词的意思是船的舱壁，利用舱壁可以将不同的船舱隔离起来，这样如果一个船舱破损进水，那么只损失这一个船舱，其它船舱可以不受影响。借鉴造船行业的经验，这种模式也被引入到软件行业，我们把它叫做 舱壁模式（Bulkhead pattern）。舱壁模式一般用于服务隔离，对于一些比较重要的系统资源，如 CPU、内存、连接数等，可以为每个服务设置各自的资源限制，防止某个异常的服务把系统的所有资源都消耗掉。这种服务隔离的思想同样可以用来做并发量限流。</p><p>正如前文所述，Resilience4j 提供了两种 Bulkhead 的实现：<code>SemaphoreBulkhead</code> 和 <code>ThreadPoolBulkhead</code>，这也正是舱壁模式常见的两种实现方案：一种是带计数的信号量，一种是固定大小的线程池。考虑到多线程场景下的线程切换成本，默认推荐使用信号量。</p><p>在操作系统基础课程中，我们学习过两个名词：<strong>互斥量（Mutex）</strong> 和 <strong>信号量（Semaphores）</strong>。互斥量用于线程的互斥，它和临界区有点相似，只有拥有互斥对象的线程才有访问资源的权限，由于互斥对象只有一个，因此任何情况下只会有一个线程在访问此共享资源，从而保证了多线程可以安全的访问和操作共享资源。而信号量是用于线程的同步，这是由荷兰科学家 E.W.Dijkstra 提出的概念，它和互斥量不同，信号允许多个线程同时使用共享资源，但是它同时设定了访问共享资源的线程最大数目，从而可以进行并发量控制。</p><p>下面是使用信号量限制并发访问的一个简单例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreTest</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request processing ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这里我们创建了 100 个线程同时执行，但是由于信号量计数为 10，所以同时只能有 10 个线程在处理请求。说到计数，实际上，在 Java 里除了 <code>Semaphore</code> 还有很多类也可以用作计数，比如 <code>AtomicLong</code> 或 <code>LongAdder</code>，这在并发量限流中非常常见，只是无法提供像信号量那样的阻塞能力：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicLongTest</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AtomicLong</span> atomic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>atomic<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request rejected ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request processing ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        atomic<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4-4-实现分布式并发量限流"><a href="#4-4-实现分布式并发量限流" class="headerlink" title="4.4 实现分布式并发量限流"></a>4.4 实现分布式并发量限流</h3><p>通过在单机实现并发量限流，我们掌握了几种常用的手段：信号量、线程池、计数器，这些都是单机上的概念。那么稍微拓展下，如果能实现分布式信号量、分布式线程池、分布式计数器，那么实现分布式并发量限流不就易如反掌了吗？</p><p>关于分布式线程池，是我自己杜撰的词，在网上并没有找到类似的概念，比较接近的概念是资源调度和分发，但是又感觉不像，这里直接忽略吧。</p><p>关于分布式信号量，还真有这样的东西，比如 Apache Ignite 就提供了 <code>IgniteSemaphore</code> 用于创建分布式信号量，它的使用方式和 <code>Semaphore</code> 非常类似，参考这里。使用 Redis 的 ZSet 也可以实现分布式信号量，比如 这篇博客介绍的方法，还有《Redis in Action》这本电子书中也提到了这样的例子，教你如何实现 Counting semaphores。另外，Redisson 也实现了基于 Redis 的分布式信号量 RSemaphore，用法也和 <code>Semaphore</code> 类似。使用分布式信号量可以很容易实现分布式并发量限流，实现方式和上面的单机并发量限流几乎是一样的。</p><p>最后，关于分布式计数器，实现方案也是多种多样。比如使用 Redis 的 <code>INCR</code> 就很容易实现，更有甚者，使用 MySQL 数据库也可以实现。只不过使用计数器要注意操作的原子性，每次请求时都要经过这三步操作：取计数器当前的值、判断是否超过阈值，超过则拒绝、将计数器的值自增。这其实和信号量的 P 操作是一样的，而释放就对应 V 操作。</p><p>所以，利用分布式信号量和计数器就可以实现并发量限流了吗？问题当然没有这么简单。实际上，上面通过信号量和计数器实现单机并发量限流的代码片段有一个严重 BUG：</p><pre class="language-go" data-language="go"><code class="language-go">semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request processing ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>想象一下如果在处理请求时出现异常了会怎么样？很显然，信号量被该线程获取了，但是却永远不会释放，如果请求异常多了，这将导致信号量被占满，最后一个请求也进不来。在单机场景下，这个问题可以很容易解决，加一个 finally 就行了：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request processing ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>由于无论出现何种异常，finally 中的代码一定会执行，这样就保证了信号量一定会被释放。但是在分布式系统中，就不是加一个 finally 这么简单了。这是因为在分布式系统中可能存在的异常不一定是可被捕获的代码异常，还有可能是服务崩溃或者不可预知的系统宕机，就算是正常的服务重启也可能导致分布式信号量无法释放。</p><p>对于这个问题，我和几个同事连续讨论了几个晚上，想出了两种解决方法：第一种方法是使用带 TTL 的计数器，第二种方法是基于双窗口滑动的一种比较 tricky 的算法。</p><p>第一种方法比较容易理解，我们为每个请求赋予一个唯一 ID，并在 Redis 里写入一个键值对，key 为 <code>requests_xxx</code>（xxx 为请求 ID），value 为 1，并给这个 key 设置一个 TTL（如果你的应用中存在耗时非常长的请求，譬如对于一些 WebSockket 请求可能会持续几个小时，还需要开一个线程定期去刷新这个 key 的 TTL）。然后在判断并发量时，使用 <code>KEYS</code> 命令查询 <code>requests_*</code> 开头的 key 的个数，就可以知道当前一共有多少个请求，如果超过并发量上限则拒绝请求。这种方法可以很好的应对服务崩溃或重启的问题，由于每个 key 都设置了 TTL，所以经过一段时间后，这些 key 就会自动消失，就不会出现信号量占满不释放的情况了。但是这里使用 <code>KEYS</code> 命令查询请求个数是一个非常低效的做法，在请求量比较多的情况下，网关的性能会受到严重影响。我们可以把 <code>KEYS</code> 命令换成 <code>SCAN</code>，性能会得到些许提升，但总体来说效果还是很不理想的。</p><p>针对第一种方法，我们可以进一步优化，不用为每个请求写一个键值对，而是为每个分布式系统中的每个实例赋予一个唯一 ID，并在 Redis 里写一个键值对，key 为 <code>instances_xxx</code>（xxx 为实例 ID），value 为这个实例当前的并发量。同样的，我们为这个 key 设置一个 TTL，并且开启一个线程定期去刷新这个 TTL。每接受一个请求后，计数器加一，请求结束，计数器减一，这和单机场景下的处理方式一样，只不过在判断并发量时，还是需要使用 <code>KEYS</code> 或 <code>SCAN</code> 获取所有的实例，并计算出并发量的总和。不过由于实例个数是有限的，性能比之前的做法有了明显的提升。</p><p>第二种方法我称之为 <strong>双窗口滑动算法</strong>，结合了 TTL 计数器和滑动窗口算法。我们按分钟来设置一个时间窗口，在 Redis 里对应 <code>202009051130</code> 这样的一个 key，value 为计数器，表示请求的数量。当接受一个请求后，在当前的时间窗口中加一，当请求结束，在当前的时间窗口中减一，注意，接受请求和请求结束的时间窗口可能不是同一个。另外，我们还需要一个本地列表来记录当前实例正在处理的所有请求和请求对应的时间窗口，并通过一个小于时间窗口的定时线程（如 30 秒）来迁移过期的请求，所谓过期，指的是请求的时间窗口和当前时间窗口不一致。那么具体如何迁移呢？我们首先需要统计列表中一共有多少请求过期了，然后将列表中的过期请求时间更新为当前时间窗口，并从 Redis 中上一个时间窗口移动相应数量到当前时间窗口，也就是上一个时间窗口减 X，当前时间窗口加 X。由于迁移线程定期执行，所以过期的请求总是会被移动到当前窗口，最终 Redis 中只有当前时间窗口和上个时间窗口这两个时间窗口中有数据，再早一点的窗口时间中的数据会被往后迁移，所以可以给这个 key 设置一个 3 分钟或 5 分钟的 TTL。判断并发量时，由于只有两个 key，只需要使用 <code>MGET</code> 获取两个值相加即可。下面的流程图详细描述了算法的运行过程：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loYlVQUzRHYTFYem90aGF2VWhJTXo5ZnBxc2gwS1FZekRyNWczbm1hVGFESVZSaWJLN1FpYkRaSEEvNjQw?x-oss-process=image/format,png" alt="img"></p><p>其中有几个需要注意的细节：</p><ol><li>请求结束时，直接在 Redis 中当前时间窗口减一即可，就算是负数也没关系。请求列表中的该请求不用急着删除，可以打上结束标记，在迁移线程中统一删除（当然，如果请求的开始时间和结束时间在同一个窗口，可以直接删除）；</li><li>迁移的时间间隔要小于时间窗口，一般设置为 30s；</li><li>Redis 中的 key 一定要设置 TTL，时间至少为 2 个时间窗口，一般设置为 3 分钟；</li><li>迁移过程涉及到“从上一个时间窗口减”和“在当前时间窗口加”两个操作，要注意操作的原子性；</li><li>获取当前并发量可以通过 <code>MGET</code> 一次性读取两个时间窗口的值，不用 <code>GET</code> 两次；</li><li>获取并发量和判断并发量是否超限，这个过程也要注意操作的原子性。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>网关作为微服务架构中的重要一环，充当着一夫当关万夫莫开的角色，所以对网关服务的稳定性要求和性能要求都非常高。为保证网关服务的稳定性，一代又一代的程序员们前仆后继，想出了十八般武艺：限流、熔断、隔离、缓存、降级、等等等等。这篇文章从限流入手，详细介绍了限流的场景和算法，以及源码实现和可能踩到的坑。尽管限流只是网关的一个非常小的功能，但却影响到网关的方方面面，在系统架构的设计中至关重要。虽然我试着从不同的角度希望把限流介绍的更完全，但终究是管中窥豹，只见一斑，还有很多的内容没有介绍到，比如阿里开源的 Sentinel 组件也可以用于限流，因为篇幅有限未能展开。另外前文提到的 Netflix 不再维护 Hystrix 项目，这是因为他们把精力放到另一个限流项目 concurrency-limits 上了，这个项目的目标是打造一款自适应的，极具弹性的限流组件，它借鉴了 <strong>TCP 拥塞控制的算法（TCP congestion control algorithm）</strong>，实现系统的自动限流，感兴趣的同学可以去它的项目主页了解更多内容。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://blog.csdn.net/weixin_38405253/article/details/108891772">https://blog.csdn.net/weixin_38405253/article/details/108891772</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;话说在 Spring Cloud Gateway 问世之前，Spring Cloud 的微服务世界里，网关一定非 Netflix Zuul 莫属。但是由于 Zuul 1.x 存在的一些问题，比如阻塞式的 API，不支持 WebSocket 等，一直被人所诟病，而且 Zuul</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://wumuwumu.github.io/tags/SpringCloud/"/>
    
    <category term="SpringCloudGateway" scheme="http://wumuwumu.github.io/tags/SpringCloudGateway/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloudGateway基础操作-熔断</title>
    <link href="http://wumuwumu.github.io/posts/9ab7b27c.html"/>
    <id>http://wumuwumu.github.io/posts/9ab7b27c.html</id>
    <published>2021-01-26T07:00:00.000Z</published>
    <updated>2021-02-27T06:13:14.006Z</updated>
    
    <content type="html"><![CDATA[<p>微服务系统中熔断限流环节，对保护系统的稳定性起到了很大的作用，作为网关，Spring Cloud Gateway也提供了很好的支持。先来理解下熔断限流概念：</p><blockquote><ul><li><code>熔断降级</code>：在分布式系统中，网关作为流量的入口，大量请求进入网关，向后端远程系统或服务发起调用，后端服务不可避免的会产生调用失败（超时或者异常），失败时不能让请求堆积在网关上，需要快速失败并返回回去，这就需要在网关上做熔断、降级操作。</li><li><code>限流</code>：网关上有大量请求，对指定服务进行限流，可以很大程度上提高服务的可用性与稳定性，限流的目的是通过对并发访问/请求进行限速，或对一个时间窗口内的请求进行限速来保护系统。一旦达到限制速率则可以拒绝服务、排队或等待、降级。</li></ul></blockquote><p>下文就网关如何进行超时熔断、异常熔断和访问限流进行示例说明。示例包含两个模块项目，一个为网关项目<code>gateway</code>，一个为下游业务项目<code>downstream</code>。</p><p><img src="https://upload-images.jianshu.io/upload_images/5056014-42c7c5a4b2b0a8b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/467/format/webp" alt="img"></p><h2 id="超时异常熔断"><a href="#超时异常熔断" class="headerlink" title="超时异常熔断"></a>超时异常熔断</h2><h3 id="构建网关目："><a href="#构建网关目：" class="headerlink" title="构建网关目："></a>构建网关目：</h3><p>pom.xml</p><pre class="language-xml" data-language="xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.boot.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.cloud.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.spring.platform<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>platform-bom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.platform.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>application.yml</p><pre class="language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8089</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> service_customer          <span class="token comment">#下游服务地址</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>8083/          <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">0</span>          <span class="token comment">#网关断言匹配</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/gateway/<span class="token important">**</span>          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token comment">#熔断过滤器</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Hystrix              <span class="token key atrule">args</span><span class="token punctuation">:</span>                <span class="token key atrule">name</span><span class="token punctuation">:</span> fallbackcmd                <span class="token key atrule">fallbackUri</span><span class="token punctuation">:</span> forward<span class="token punctuation">:</span>/defaultfallback            <span class="token punctuation">-</span> StripPrefix=1<span class="token comment">#熔断器配置</span><span class="token key atrule">hystrix</span><span class="token punctuation">:</span>  <span class="token key atrule">command</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">execution</span><span class="token punctuation">:</span>        <span class="token key atrule">isolation</span><span class="token punctuation">:</span>          <span class="token key atrule">strategy</span><span class="token punctuation">:</span> SEMAPHORE          <span class="token key atrule">thread</span><span class="token punctuation">:</span>            <span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">3000</span>  <span class="token key atrule">shareSecurityContext</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">#网关日志输出</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">org.springframework.cloud.gateway</span><span class="token punctuation">:</span> TRACE    <span class="token key atrule">org.springframework.http.server.reactive</span><span class="token punctuation">:</span> DEBUG    <span class="token key atrule">org.springframework.web.reactive</span><span class="token punctuation">:</span> DEBUG    <span class="token key atrule">reactor.ipc.netty</span><span class="token punctuation">:</span> DEBUG</code></pre><p>以上配置的意思是：</p><ul><li>网关服务以端口8089暴露</li><li>访问<code>http://127.0.0.1:8089/gateway/</code>开头的请求，将都被路由到下游<code>http://127.0.0.1:8083/</code>下，且<code>gateway</code>部分将被移除（<code>StripPrefix=1</code>）。比如<a href="https://links.jianshu.com/go?to=http://127.0.0.1:8089/gateway/test">http://127.0.0.1:8089/gateway/test</a> —-&gt; <a href="https://links.jianshu.com/go?to=http://127.0.0.1:8083/test">http://127.0.0.1:8083/test</a></li><li>超时异常熔断采用hystrix的SEMAPHORE策略，超时时间为3秒，如果下游服务不可达（异常），将由fallbackcmd处理，路由到本地<a href="https://links.jianshu.com/go?to=http://127.0.0.1:8089/defaultfallback">http://127.0.0.1:8089/defaultfallback</a> 处理。</li></ul><h3 id="构建defaultfallback处理器"><a href="#构建defaultfallback处理器" class="headerlink" title="构建defaultfallback处理器"></a>构建defaultfallback处理器</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelfHystrixController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/defaultfallback"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">defaultfallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求被熔断."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Code"</span><span class="token punctuation">,</span><span class="token string">"fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Message"</span><span class="token punctuation">,</span><span class="token string">"服务异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>先不构建下游服务，直接运行网关，访问地址<code>http://127.0.0.1:8089/gateway/test</code>，出现如下情况：</p><p><img src="https://upload-images.jianshu.io/upload_images/5056014-f2a77eedb84ae8bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/589/format/webp" alt="img"></p><p>构建下游服务项目，该项目为简单的spring boot web项目，具体配置不详述，添加服务类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/timeout"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"timeout params:"</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.jianshu.com/p/b58c13b227bf">https://www.jianshu.com/p/b58c13b227bf</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;微服务系统中熔断限流环节，对保护系统的稳定性起到了很大的作用，作为网关，Spring Cloud Gateway也提供了很好的支持。先来理解下熔断限流概念：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;熔断降级&lt;/code&gt;：在分布式系统中，网关作为流量</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://wumuwumu.github.io/tags/SpringCloud/"/>
    
    <category term="SpringCloudGateway" scheme="http://wumuwumu.github.io/tags/SpringCloudGateway/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloudGateway总结</title>
    <link href="http://wumuwumu.github.io/posts/8ca623b6.html"/>
    <id>http://wumuwumu.github.io/posts/8ca623b6.html</id>
    <published>2021-01-25T11:00:00.000Z</published>
    <updated>2021-02-27T06:13:14.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="过滤器的常用功能"><a href="#过滤器的常用功能" class="headerlink" title="过滤器的常用功能"></a>过滤器的常用功能</h1><ol><li>黑名单、白名单</li><li>数据转换（将请求头转换成请求参数）</li><li>数据统计</li><li>限流</li></ol><h1 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h1><h2 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h2><h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;过滤器的常用功能&quot;&gt;&lt;a href=&quot;#过滤器的常用功能&quot; class=&quot;headerlink&quot; title=&quot;过滤器的常用功能&quot;&gt;&lt;/a&gt;过滤器的常用功能&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;黑名单、白名单&lt;/li&gt;
&lt;li&gt;数据转换（将请求头转换成请求参数）&lt;/li&gt;
</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://wumuwumu.github.io/tags/SpringCloud/"/>
    
    <category term="SpringCloudGateway" scheme="http://wumuwumu.github.io/tags/SpringCloudGateway/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloudGateway基本操作-限流</title>
    <link href="http://wumuwumu.github.io/posts/384ef433.html"/>
    <id>http://wumuwumu.github.io/posts/384ef433.html</id>
    <published>2021-01-25T10:00:00.000Z</published>
    <updated>2021-02-27T06:13:14.028Z</updated>
    
    <content type="html"><![CDATA[<p>在高并发的应用中，<strong>限流</strong>是一个绕不开的话题。限流可以保障我们的 API 服务对所有用户的可用性，也可以防止网络攻击。</p><p>一般开发高并发系统常见的限流有：限制总并发数（比如数据库连接池、线程池）、限制瞬时并发数（如 nginx 的 limit_conn 模块，用来限制瞬时并发连接数）、限制时间窗口内的平均速率（如 Guava 的 RateLimiter、nginx 的 limit_req 模块，限制每秒的平均速率）；其他还有如限制远程接口调用速率、限制 MQ 的消费速率。另外还可以根据网络连接数、网络流量、CPU 或内存负载等来限流。</p><p>本文详细探讨在 Spring Cloud Gateway 中如何实现限流。</p><h2 id="限流算法"><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h2><p>做限流 (Rate Limiting/Throttling) 的时候，除了简单的控制并发，如果要准确的控制 TPS，简单的做法是维护一个单位时间内的 Counter，如判断单位时间已经过去，则将 Counter 重置零。此做法被认为没有很好的处理单位时间的边界，比如在前一秒的最后一毫秒里和下一秒的第一毫秒都触发了最大的请求数，也就是在两毫秒内发生了两倍的 TPS。</p><p>常用的更平滑的限流算法有两种：漏桶算法和令牌桶算法。很多传统的服务提供商如华为中兴都有类似的专利，参考<a href="http://www.google.com/patents/CN1536815A?cl=zh">采用令牌漏桶进行报文限流的方法</a>。</p><h3 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h3><p>漏桶（<a href="https://en.wikipedia.org/wiki/Leaky_bucket">Leaky Bucket</a>）算法思路很简单，水（请求）先进入到漏桶里，漏桶以一定的速度出水（接口有响应速率），当水流入速度过大会直接溢出（访问频率超过接口响应速率），然后就拒绝请求，可以看出漏桶算法能强行限制数据的传输速率。</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr6048q7rdj30bs086mxd.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr6048q7rdj30bs086mxd.jpg" alt="Leaky Bucket"></a></p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr6048q7rdj30bs086mxd.jpg">Leaky Bucket</a></p><p>可见这里有两个变量，一个是桶的大小，支持流量突发增多时可以存多少的水（burst），另一个是水桶漏洞的大小（rate）。因为漏桶的漏出速率是固定的参数，所以，即使网络中不存在资源冲突（没有发生拥塞），漏桶算法也不能使流突发（burst）到端口速率。因此，漏桶算法对于存在突发特性的流量来说缺乏效率。</p><h3 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h3><p>令牌桶算法（Token Bucket）和 Leaky Bucket 效果一样但方向相反的算法，更加容易理解。随着时间流逝，系统会按恒定 1/QPS 时间间隔（如果 QPS=100，则间隔是 10ms）往桶里加入 Token（想象和漏洞漏水相反，有个水龙头在不断的加水），如果桶已经满了就不再加了。新请求来临时，会各自拿走一个 Token，如果没有 Token 可拿了就阻塞或者拒绝服务。</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr553720h0j30bp06pwek.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr553720h0j30bp06pwek.jpg" alt="Token Bucket"></a></p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr553720h0j30bp06pwek.jpg">Token Bucket</a></p><p>令牌桶的另外一个好处是可以方便的改变速度。一旦需要提高速率，则按需提高放入桶中的令牌的速率。一般会定时（比如 100 毫秒）往桶中增加一定数量的令牌，有些变种算法则实时的计算应该增加的令牌的数量。</p><blockquote><p>Guava 中的 RateLimiter 采用了令牌桶的算法，设计思路参见  <a href="https://github.com/google/guava/blob/v18.0/guava/src/com/google/common/util/concurrent/SmoothRateLimiter.java#L25:L144">How is the RateLimiter designed, and why?</a>，详细的算法实现参见<a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/util/concurrent/RateLimiter.java">源码</a>。</p></blockquote><h3 id="Leakly-Bucket-vs-Token-Bucket"><a href="#Leakly-Bucket-vs-Token-Bucket" class="headerlink" title="Leakly Bucket vs Token Bucket"></a>Leakly Bucket vs Token Bucket</h3><table><thead><tr><th>对比项</th><th>Leakly bucket</th><th>Token bucket</th><th>Token bucket 的备注</th></tr></thead><tbody><tr><td>依赖 token</td><td>否</td><td>是</td><td></td></tr><tr><td>立即执行</td><td>是</td><td>否</td><td>有足够的 token 才能执行</td></tr><tr><td>堆积 token</td><td>否</td><td>是</td><td></td></tr><tr><td>速率恒定</td><td>是</td><td>否</td><td>可以大于设定的 QPS</td></tr></tbody></table><h2 id="限流实现"><a href="#限流实现" class="headerlink" title="限流实现"></a>限流实现</h2><p>在 Gateway 上实现限流是个不错的选择，只需要编写一个过滤器就可以了。有了前边过滤器的基础，写起来很轻松。（如果你对 Spring Cloud Gateway 的过滤器还不了解，请先看<a href="https://www.haoyizebo.com/posts/1e919f7d/">这里</a>）</p><p>我们这里采用令牌桶算法，Google Guava 的<code>RateLimiter</code>、<a href="https://github.com/vladimir-bukhtoyarov/bucket4j">Bucket4j</a>、<a href="https://github.com/mokies/ratelimitj">RateLimitJ</a> 都是一些基于此算法的实现，只是他们支持的 back-ends（JCache、Hazelcast、Redis 等）不同罢了，你可以根据自己的技术栈选择相应的实现。</p><p>这里我们使用 Bucket4j，引入它的依赖坐标，为了方便顺便引入 Lombok</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.vladimir-bukhtoyarov<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>bucket4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.16.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>我们来实现具体的过滤器</p><pre class="language-xml" data-language="xml"><code class="language-xml">@CommonsLog@Builder@Data@AllArgsConstructor@NoArgsConstructorpublic class RateLimitByIpGatewayFilter implements GatewayFilter，Ordered &#123;    int capacity;    int refillTokens;    Duration refillDuration;    private static final Map<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String，Bucket</span><span class="token punctuation">></span></span> CACHE = new ConcurrentHashMap&lt;>();    private Bucket createNewBucket() &#123;        Refill refill = Refill.of(refillTokens，refillDuration);        Bandwidth limit = Bandwidth.classic(capacity，refill);        return Bucket4j.builder().addLimit(limit).build();    &#125;    @Override    public Mono<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Void</span><span class="token punctuation">></span></span> filter(ServerWebExchange exchange，GatewayFilterChain chain) &#123;        // if (!enableRateLimit)&#123;        //     return chain.filter(exchange);        // &#125;        String ip = exchange.getRequest().getRemoteAddress().getAddress().getHostAddress();        Bucket bucket = CACHE.computeIfAbsent(ip，k -> createNewBucket());        log.debug("IP: " + ip + "，TokenBucket Available Tokens: " + bucket.getAvailableTokens());        if (bucket.tryConsume(1)) &#123;            return chain.filter(exchange);        &#125; else &#123;            exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);            return exchange.getResponse().setComplete();        &#125;    &#125;    @Override    public int getOrder() &#123;        return -1000;    &#125;&#125;</code></pre><p>通过对令牌桶算法的了解，我们知道需要定义三个变量：</p><ul><li><code>capacity</code>：桶的最大容量，即能装载 Token 的最大数量</li><li><code>refillTokens</code>：每次 Token 补充量</li><li><code>refillDuration</code>：补充 Token 的时间间隔</li></ul><p>在这个实现中，我们使用了 IP 来进行限制，当达到最大流量就返回<code>429</code>错误。这里我们简单使用一个 Map 来存储 bucket，所以也决定了它只能单点使用，如果是分布式的话，可以采用 Hazelcast 或 Redis 等解决方案。</p><p>在 Route 中我们添加这个过滤器，这里指定了 bucket 的容量为 10 且每一秒会补充 1 个 Token。</p><pre class="language-xml" data-language="xml"><code class="language-xml">.route(r -> r.path("/throttle/customer/**")             .filters(f -> f.stripPrefix(2)                            .filter(new RateLimitByIpGatewayFilter(10，1，Duration.ofSeconds(1))))             .uri("lb://CONSUMER")             .order(0)             .id("throttle_customer_service"))</code></pre><p>启动服务并多次快速刷新改接口，就会看到 Tokens 的数量在不断减小，等一会又会增加上来</p><pre class="language-none"><code class="language-none">2018-05-09 15:42:08.601 DEBUG 96278 --- [ctor-http-nio-2] com.yibo.filter.RateLimitByIpGatewayFilter  : IP: 0:0:0:0:0:0:0:1，TokenBucket Available Tokens: 22018-05-09 15:42:08.958 DEBUG 96278 --- [ctor-http-nio-2] com.yibo.filter.RateLimitByIpGatewayFilter  : IP: 0:0:0:0:0:0:0:1，TokenBucket Available Tokens: 12018-05-09 15:42:09.039 DEBUG 96278 --- [ctor-http-nio-2] com.yibo.filter.RateLimitByIpGatewayFilter  : IP: 0:0:0:0:0:0:0:1，TokenBucket Available Tokens: 02018-05-09 15:42:10.201 DEBUG 96278 --- [ctor-http-nio-2] com.yibo.filter.RateLimitByIpGatewayFilter  : IP: 0:0:0:0:0:0:0:1，TokenBucket Available Tokens: 1</code></pre><h2 id="RequestRateLimiter"><a href="#RequestRateLimiter" class="headerlink" title="RequestRateLimiter"></a>RequestRateLimiter</h2><p>刚刚我们通过过滤器实现了限流的功能，你可能在想为什么不直接创建一个过滤器工厂呢，那样多方便。这是因为 Spring Cloud Gateway 已经内置了一个<code>RequestRateLimiterGatewayFilterFactory</code>，我们可以直接使用（这里有坑，后边详说）。</p><p>目前<code>RequestRateLimiterGatewayFilterFactory</code>的实现依赖于 Redis，所以我们还要引入<code>spring-boot-starter-data-redis-reactive</code></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis-reactive<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>因为这里有坑，所以把 application.yml 的配置再全部贴一遍，新增的部分我已经用<code># ---</code>标出来了</p><pre class="language-xml" data-language="xml"><code class="language-xml">spring:  application:    name: cloud-gateway  cloud:    gateway:      discovery:        locator:          enabled: true      routes:        - id: service_customer          uri: lb://CONSUMER          order: 0          predicates:            - Path=/customer/**          filters:            - StripPrefix=1            # -------            - name: RequestRateLimiter              args:                key-resolver: '#&#123;@remoteAddrKeyResolver&#125;'                redis-rate-limiter.replenishRate: 1                redis-rate-limiter.burstCapacity: 5            # -------            - AddResponseHeader=X-Response-Default-Foo，Default-Bar      default-filters:        - Elapsed=true  # -------  redis:    host: localhost    port: 6379    database: 0  # -------server:  port: 10000eureka:  client:    service-url:      defaultZone: http://localhost:7000/eureka/logging:  level:    org.springframework.cloud.gateway: debug    com.yibo.filter: debug</code></pre><p>默认情况下，是基于<strong>令牌桶算法</strong>实现的限流，有个三个参数需要配置：</p><ul><li><code>burstCapacity</code>，令牌桶容量。</li><li><code>replenishRate</code>，令牌桶每秒填充平均速率。</li><li><code>key-resolver</code>，用于限流的键的解析器的 Bean 对象名字（有些绕，看代码吧）。它使用 SpEL 表达式根据<code>#&#123;@beanName&#125;</code>从 Spring 容器中获取 Bean 对象。默认情况下，使用<code>PrincipalNameKeyResolver</code>，以请求认证的<code>java.security.Principal</code>作为限流键。</li></ul><blockquote><p>关于<code>filters</code>的那段配置格式，参考<a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/167">这里</a></p></blockquote><p>我们实现一个使用请求 IP 作为限流键的<code>KeyResolver</code></p><pre class="language-xml" data-language="xml"><code class="language-xml">public class RemoteAddrKeyResolver implements KeyResolver &#123;    public static final String BEAN_NAME = "remoteAddrKeyResolver";    @Override    public Mono<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span> resolve(ServerWebExchange exchange) &#123;        return Mono.just(exchange.getRequest().getRemoteAddress().getAddress().getHostAddress());    &#125;&#125;</code></pre><p>配置<code>RemoteAddrKeyResolver</code> Bean 对象</p><pre class="language-xml" data-language="xml"><code class="language-xml">@Bean(name = RemoteAddrKeyResolver.BEAN_NAME)public RemoteAddrKeyResolver remoteAddrKeyResolver() &#123;    return new RemoteAddrKeyResolver();&#125;</code></pre><p>以上就是代码部分，我们还差一个 Redis，我就本地用 docker 来快速启动了</p><pre class="language-none"><code class="language-none">docker run --name redis -p 6379:6379 -d redis</code></pre><p>万事俱备，只欠测试了。以上的代码的和配置都是 OK 的，可以自行测试。下面来说一下这里边的坑。</p><h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><h4 id="配置不生效"><a href="#配置不生效" class="headerlink" title="配置不生效"></a>配置不生效</h4><p>参考这个 <a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/167">issue</a></p><h4 id="No-Configuration-found-for-route"><a href="#No-Configuration-found-for-route" class="headerlink" title="No Configuration found for route"></a>No Configuration found for route</h4><p>这个异常信息如下：</p><pre class="language-none"><code class="language-none">java.lang.IllegalArgumentException: No Configuration found for route service_customer    at org.springframework.cloud.gateway.filter.ratelimit.RedisRateLimiter.isAllowed(RedisRateLimiter.java:93) ~[spring-cloud-gateway-core-2.0.0.RC1.jar:2.0.0.RC1]Copy</code></pre><p>出现在将 RequestRateLimiter 配置为 defaultFilters 的情况下，比如像这样</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">default-filters</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> RequestRateLimiter    <span class="token key atrule">args</span><span class="token punctuation">:</span>      <span class="token key atrule">key-resolver</span><span class="token punctuation">:</span> <span class="token string">'#&#123;@remoteAddrKeyResolver&#125;'</span>      <span class="token key atrule">redis-rate-limiter.replenishRate</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">redis-rate-limiter.burstCapacity</span><span class="token punctuation">:</span> <span class="token number">5</span></code></pre><p>这时候就会导致这个异常。我通过分析源码，发现了一些端倪，感觉像是一个 bug，已经提交了 <a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/310">issue</a></p><p>我们从异常入手来看， <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/filter/ratelimit/RedisRateLimiter.java#L89">RedisRateLimiter#isAllowed</a> 这个方法要获取 routeId 对应的 routerConfig，如果获取不到就抛出刚才我们看到的那个异常。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Response</span><span class="token punctuation">></span></span> <span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token class-name">String</span> routeId，<span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>initialized<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"RedisRateLimiter is not initialized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 只为 defaultFilters 配置 RequestRateLimiter 的时候</span>    <span class="token comment">// config map 里边的 key 只有 "defaultFilters"</span>    <span class="token comment">// 但是我们实际请求的 routeId 为 "customer_service"</span>    <span class="token class-name">Config</span> routeConfig <span class="token operator">=</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>routeId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>routeConfig <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultConfig <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"No Configuration found for route "</span> <span class="token operator">+</span> routeId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        routeConfig <span class="token operator">=</span> defaultConfig<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 省略若干代码...</span><span class="token punctuation">&#125;</span></code></pre><p>既然这里要 get，那必然有个地方要 put。put 的相关代码在 <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/filter/ratelimit/AbstractRateLimiter.java#L55">AbstractRateLimiter#onApplicationEvent</a> 这个方法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">FilterArgsEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span>，<span class="token class-name">Object</span><span class="token operator">></span> args <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// hasRelevantKey 检查 args 是否包含 configurationPropertyName</span>    <span class="token comment">// 只有 defaultFilters 包含</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">hasRelevantKey</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> routeId <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getRouteId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">C</span> routeConfig <span class="token operator">=</span> <span class="token function">newConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ConfigurationUtils</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>routeConfig，args<span class="token punctuation">,</span>                            configurationPropertyName，configurationPropertyName，validator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>routeId，routeConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasRelevantKey</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span>，<span class="token class-name">Object</span><span class="token operator">></span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>key <span class="token operator">-></span> key<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>configurationPropertyName <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>上边的 args 里是是配置参数的键值对，比如我们之前自定义的过滤器工厂<code>Elapsed</code>，有个参数<code>withParams</code>，这里就是<code>withParams=true</code>。关键代码在第 7 行，<code>hasRelevantKey</code>方法用于检测 args 里边是否包含<code>configurationPropertyName.</code>，具体到本例就是是否包含<code>redis-rate-limiter.</code>。悲剧就发生在这里，因为我们只为 defaultFilters 配置了相关 args，注定其他的 route 到这里就直接 return 了。</p><p>现在不清楚这是 bug 还是设计者有意为之，等答复吧。</p><h2 id="基于系统负载的动态限流"><a href="#基于系统负载的动态限流" class="headerlink" title="基于系统负载的动态限流"></a>基于系统负载的动态限流</h2><p>在实际工作中，我们可能还需要根据网络连接数、网络流量、CPU 或内存负载等来进行动态限流。在这里我们以 CPU 为栗子。</p><p>我们需要借助 Spring Boot Actuator 提供的 Metrics 能力进行实现基于 CPU 的限流——当 CPU 使用率高于某个阈值就开启限流，否则不开启限流。</p><p>我们在项目中引入 Actuator 的依赖坐标</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>因为 Spring Boot 2.x 之后，Actuator 被重新设计了，和 1.x 的区别还是挺大的（参考<a href="http://www.baeldung.com/spring-boot-actuators">这里</a>）。我们先在配置中设置<code>management.endpoints.web.exposure.include=*</code>来观察一下新的 Metrics 的能力</p><p><a href="http://localhost:10000/actuator/metrics">http://localhost:10000/actuator/metrics</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"names"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"jvm.buffer.memory.used"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.memory.used"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.buffer.count"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.gc.memory.allocated"</span><span class="token punctuation">,</span>    <span class="token string">"logback.events"</span><span class="token punctuation">,</span>    <span class="token string">"process.uptime"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.memory.committed"</span><span class="token punctuation">,</span>    <span class="token string">"system.load.average.1m"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.gc.pause"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.gc.max.data.size"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.buffer.total.capacity"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.memory.max"</span><span class="token punctuation">,</span>    <span class="token string">"system.cpu.count"</span><span class="token punctuation">,</span>    <span class="token string">"system.cpu.usage"</span><span class="token punctuation">,</span>    <span class="token string">"process.files.max"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.threads.daemon"</span><span class="token punctuation">,</span>    <span class="token string">"http.server.requests"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.threads.live"</span><span class="token punctuation">,</span>    <span class="token string">"process.start.time"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.classes.loaded"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.classes.unloaded"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.threads.peak"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.gc.live.data.size"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.gc.memory.promoted"</span><span class="token punctuation">,</span>    <span class="token string">"process.files.open"</span><span class="token punctuation">,</span>    <span class="token string">"process.cpu.usage"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>我们可以利用里边的系统 CPU 使用率<code>system.cpu.usage</code></p><p><a href="http://localhost:10000/actuator/metrics/system.cpu.usage">http://localhost:10000/actuator/metrics/system.cpu.usage</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"system.cpu.usage"</span><span class="token punctuation">,</span>  <span class="token property">"measurements"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"statistic"</span><span class="token operator">:</span> <span class="token string">"VALUE"</span><span class="token punctuation">,</span>      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">0.5189003436426117</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"availableTags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>最近一分钟内的平均负载<code>system.load.average.1m</code>也是一样的</p><p><a href="http://localhost:10000/actuator/metrics/system.load.average.1m">http://localhost:10000/actuator/metrics/system.load.average.1m</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"system.load.average.1m"</span><span class="token punctuation">,</span>  <span class="token property">"measurements"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"statistic"</span><span class="token operator">:</span> <span class="token string">"VALUE"</span><span class="token punctuation">,</span>      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">5.33203125</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"availableTags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>知道了 Metrics 提供的指标，我们就来看在代码里具体怎么实现吧。Actuator 2.x 里边已经没有了之前 1.x 里边提供的<code>SystemPublicMetrics</code>，但是经过阅读源码可以发现<code>MetricsEndpoint</code>这个类可以提供类似的功能。就用它来撸代码吧</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CommonsLog</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimitByCpuGatewayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GatewayFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MetricsEndpoint</span> metricsEndpoint<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> METRIC_NAME <span class="token operator">=</span> <span class="token string">"system.cpu.usage"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> MAX_USAGE <span class="token operator">=</span> <span class="token number">0.50D</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// if (!enableRateLimit)&#123;</span>        <span class="token comment">//     return chain.filter(exchange);</span>        <span class="token comment">// &#125;</span>        <span class="token class-name">Double</span> systemCpuUsage <span class="token operator">=</span> metricsEndpoint<span class="token punctuation">.</span><span class="token function">metric</span><span class="token punctuation">(</span>METRIC_NAME<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getMeasurements</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token operator">::</span><span class="token function">nonNull</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">MetricsEndpoint</span><span class="token punctuation">.</span><span class="token class-name">Sample</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token operator">::</span><span class="token function">isFinite</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0.0D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> ok <span class="token operator">=</span> systemCpuUsage <span class="token operator">&lt;</span> MAX_USAGE<span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"system.cpu.usage: "</span> <span class="token operator">+</span> systemCpuUsage <span class="token operator">+</span> <span class="token string">" ok: "</span> <span class="token operator">+</span> ok<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>TOO_MANY_REQUESTS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>配置 Route</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RateLimitByCpuGatewayFilter</span> rateLimitByCpuGatewayFilter<span class="token punctuation">;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customerRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// @formatter:off</span>    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/throttle/customer/**"</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">stripPrefix</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>rateLimitByCpuGatewayFilter<span class="token punctuation">)</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"lb://CONSUMER"</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"throttle_customer_service"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// @formatter:on</span><span class="token punctuation">&#125;</span></code></pre><p>至于效果嘛，自己试试吧。因为 CPU 的使用率一般波动较大，测试效果还是挺明显的，实际使用就得慎重了。</p><p>示例代码可以从 Github 获取：<a href="https://github.com/zhaoyibo/spring-cloud-study">https://github.com/zhaoyibo/spring-cloud-study</a></p><h2 id="改进与提升"><a href="#改进与提升" class="headerlink" title="改进与提升"></a>改进与提升</h2><p>实际项目中，除以上实现的限流方式，还可能会：一、在上文的基础上，增加配置项，控制每个路由的限流指标，并实现动态刷新，从而实现更加灵活的管理。二、实现不同维度的限流，例如：</p><ul><li>对请求的目标 URL 进行限流（例如：某个 URL 每分钟只允许调用多少次）</li><li>对客户端的访问 IP 进行限流（例如：某个 IP 每分钟只允许请求多少次）</li><li>对某些特定用户或者用户组进行限流（例如：非 VIP 用户限制每分钟只允许调用 100 次某个 API 等）</li><li>多维度混合的限流。此时，就需要实现一些限流规则的编排机制（与、或、非等关系）</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.haoyizebo.com/posts/ced8ea9/">https://www.haoyizebo.com/posts/ced8ea9/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在高并发的应用中，&lt;strong&gt;限流&lt;/strong&gt;是一个绕不开的话题。限流可以保障我们的 API 服务对所有用户的可用性，也可以防止网络攻击。&lt;/p&gt;
&lt;p&gt;一般开发高并发系统常见的限流有：限制总并发数（比如数据库连接池、线程池）、限制瞬时并发数（如 nginx 的 </summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://wumuwumu.github.io/tags/SpringCloud/"/>
    
    <category term="SpringCloudGateway" scheme="http://wumuwumu.github.io/tags/SpringCloudGateway/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloudGateway基本操作-动态路由</title>
    <link href="http://wumuwumu.github.io/posts/1322871c.html"/>
    <id>http://wumuwumu.github.io/posts/1322871c.html</id>
    <published>2021-01-25T08:00:00.000Z</published>
    <updated>2021-02-27T06:13:13.993Z</updated>
    
    <content type="html"><![CDATA[<p>gateway配置路由主要有两种方式，一种是用yml配置文件，一种是写代码里，这两种方式都是不支持动态配置的。如：</p><p><img src="https://img-blog.csdnimg.cn/20181026112026523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"><img src="https://img-blog.csdnimg.cn/20181026112045783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>下面就来看看gateway是如何加载这些配置信息的。</p><h3 id="1-路由初始化"><a href="#1-路由初始化" class="headerlink" title="1 路由初始化"></a>1 路由初始化</h3><p>无论是yml还是代码，这些配置最终都是被封装到RouteDefinition对象中。</p><p><img src="https://img-blog.csdnimg.cn/20181026112443317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>一个RouteDefinition有个唯一的ID，如果不指定，就默认是UUID，多个RouteDefinition组成了gateway的路由系统。</p><p>所有路由信息在系统启动时就被加载装配好了，并存到了内存里。我们从源码来看看。<img src="https://img-blog.csdnimg.cn/20181026113033137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>圆圈里就是装配yml文件的，它返回的是PropertiesRouteDefinitionLocator，该类继承了RouteDefinitionLocator，RouteDefinitionLocator就是路由的装载器，里面只有一个方法，就是获取路由信息的。该接口有多个实现类，分别对应不同方式配置的路由方式。</p><p><img src="https://img-blog.csdnimg.cn/20181026113950773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20181026113753850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/2018102612081129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>通过这几个实现类，再结合上面的AutoConfiguration里面的Primary信息，就知道加载配置信息的顺序。</p><p>PropertiesRouteDefinitionLocator–&gt;|配置文件加载初始化| CompositeRouteDefinitionLocator<br>RouteDefinitionRepository–&gt;|存储器中加载初始化| CompositeRouteDefinitionLocator<br>DiscoveryClientRouteDefinitionLocator–&gt;|注册中心加载初始化| CompositeRouteDefinitionLocator</p><p>参考：<a href="https://www.jianshu.com/p/b02c7495eb5e">https://www.jianshu.com/p/b02c7495eb5e</a></p><p><a href="https://blog.csdn.net/X5fnncxzq4/article/details/80221488">https://blog.csdn.net/X5fnncxzq4/article/details/80221488</a></p><p><img src="https://img-blog.csdnimg.cn/20181026114644355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>这是第一顺序，就是从CachingRouteLocator中获取路由信息，我们可以打开该类进行验证。<img src="https://img-blog.csdnimg.cn/20181026114836900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>不管发起什么请求，必然会走上面的断点处。请求一次，走一次。这是将路由信息缓存到了Map中。配置信息一旦请求过一次，就会被缓存到上图的CachingRouteLocator类中，再次发起请求后，会直接从map中读取。</p><p>如果想动态刷新配置信息，就需要发起一个RefreshRoutesEvent的事件，上图的cache会监听该事件，并重新拉取路由配置信息。</p><p>通过下图，可以看到如果没有RouteDefinitionRepository的实例，则默认用InMemoryRouteDefinitionRepository。而做动态路由的关键就在这里。即通过自定义的RouteDefinitionRepository类，来提供路由配置信息。</p><p><img src="https://img-blog.csdnimg.cn/20181026120724858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>例如：</p><p><img src="https://img-blog.csdnimg.cn/2018102612162119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>在getRouteDefinitions方法返回你自定义的路由配置信息即可。这里可以用数据库、nosql等等任意你喜欢的方式来提供。而且配置信息修改后，发起一次RefreshRoutesEvent事件即可让配置生效。这就是动态配置路由的核心所在，下面来看具体代码实现。</p><h3 id="2-基于数据库、缓存的动态路由"><a href="#2-基于数据库、缓存的动态路由" class="headerlink" title="2 基于数据库、缓存的动态路由"></a>2 基于数据库、缓存的动态路由</h3><p>pom.xml如下</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.maimeng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>apigateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>apigateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Finchley.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-webflux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.51<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--&lt;dependency>            &lt;groupId>mysql&lt;/groupId>            &lt;artifactId>mysql-connector-java&lt;/artifactId>            &lt;scope>runtime&lt;/scope>        &lt;/dependency>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring-cloud.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20181026160616350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>注意这里是SR1，经测试SR2有bug，会出问题。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"redisTemplate"</span><span class="token punctuation">,</span> <span class="token string">"stringRedisTemplate"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">StringRedisTemplate</span> <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringRedisTemplate</span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre><p>核心类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisRouteDefinitionRepository</span> <span class="token keyword">implements</span> <span class="token class-name">RouteDefinitionRepository</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> GATEWAY_ROUTES <span class="token operator">=</span> <span class="token string">"geteway_routes"</span><span class="token punctuation">;</span>     <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RouteDefinition</span><span class="token punctuation">></span></span> <span class="token function">getRouteDefinitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RouteDefinition</span><span class="token punctuation">></span></span> routeDefinitions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>GATEWAY_ROUTES<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>routeDefinition <span class="token operator">-></span> routeDefinitions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>routeDefinition<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">RouteDefinition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span>routeDefinitions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RouteDefinition</span><span class="token punctuation">></span></span> route<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> routeId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre><p>主要是在get方法里，此处从redis里获取配置好的Definition。</p><p>然后我们的工作就是将配置信息，放到redis里即可。</p><p>下面就是我模拟的一个配置，等同于在yml里</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> header        <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8888/header        <span class="token key atrule">filters</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> AddRequestHeader=header<span class="token punctuation">,</span> addHeader        <span class="token punctuation">-</span> AddRequestParameter=param<span class="token punctuation">,</span> addParam        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> Path=/jd</code></pre><p>定义好后，将其放到redis里，之后启动项目访问/jd，再启动后台的localhost:8888项目。即可进行验证。</p><p>之后如果要动态修改配置，就可以通过类似于上面的方式，来获取json字符串，然后将字符串放到redis里进行替换。替换后，需要通知gateway主动刷新一下。</p><p><img src="https://img-blog.csdnimg.cn/20181026161549838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20181026161611891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>刷新时，可以定义一个controller，然后调用一下notifyChanged()方法，就能完成新配置的替换了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://blog.csdn.net/tianyaleixiaowu/article/details/83412301">https://blog.csdn.net/tianyaleixiaowu/article/details/83412301</a></p><p><a href="https://www.haoyizebo.com/posts/1962f450/">https://www.haoyizebo.com/posts/1962f450/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;gateway配置路由主要有两种方式，一种是用yml配置文件，一种是写代码里，这两种方式都是不支持动态配置的。如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20181026112026523.png?x-oss-proces</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://wumuwumu.github.io/tags/SpringCloud/"/>
    
    <category term="SpringCloudGateway" scheme="http://wumuwumu.github.io/tags/SpringCloudGateway/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloudGateway基本操作-过滤器</title>
    <link href="http://wumuwumu.github.io/posts/4db8feb0.html"/>
    <id>http://wumuwumu.github.io/posts/4db8feb0.html</id>
    <published>2021-01-25T07:00:00.000Z</published>
    <updated>2021-02-27T06:13:14.026Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Cloud Gateway 已经内置了很多实用的过滤器，但并不能完全满足我们的需求。本文我们就来实现自定义过滤器。虽然现在 Spring Cloud Gateway 的文档还不完善，但是我们依旧可以照猫画虎来定制自己的过滤器。</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr4wcu9jgkj30nk0bqabh.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr4wcu9jgkj30nk0bqabh.jpg" alt="img"></a></p><h2 id="Filter-的作用"><a href="#Filter-的作用" class="headerlink" title="Filter 的作用"></a>Filter 的作用</h2><p>其实前边在介绍 Zuul 的的时候已经介绍过 Zuul 的 Filter 的作用了，同作为网关服务，Spring Cloud Gateway 的 Filter 作用也类似。</p><p>这里就简单用两张图来解释一下吧。</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr43eek154j316c0g4wgz.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr43eek154j316c0g4wgz.jpg" alt="img"></a></p><p>当使用微服务构建整个 API 服务时，一般有许多不同的应用在运行，如上图所示的<code>mst-user-service</code>、<code>mst-good-service</code>和<code>mst-order-service</code>，这些服务都需要对客户端的请求的进行 Authentication。最简单粗暴的方法就是像上图一样，为每个微服务应用都实现一套用于校验的过滤器或拦截器。</p><p>对于这样的问题，更好的做法是通过前置的网关服务来完成这些非业务性质的校验，就像下图</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr43dop520j31j60ni413.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr43dop520j31j60ni413.jpg" alt="img"></a></p><h2 id="Filter-的生命周期"><a href="#Filter-的生命周期" class="headerlink" title="Filter 的生命周期"></a>Filter 的生命周期</h2><p>Spring Cloud Gateway 的 Filter 的生命周期不像 Zuul 的那么丰富，它只有两个：“pre”和“post”。</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr48yqx3ouj31kw17pn81.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr48yqx3ouj31kw17pn81.jpg" alt="image-20180508184542206"></a></p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr48yqx3ouj31kw17pn81.jpg">image-20180508184542206</a></p><p>“pre”和“post”分别会在请求被执行前调用和被执行后调用，和 Zuul Filter 或 Spring Interceptor 中相关生命周期类似，但在形式上有些不一样。</p><p>Zuul 的 Filter 是通过<code>filterType()</code>方法来指定，一个 Filter 只能对应一种类型，要么是“pre”要么是“post”。Spring Interceptor 是通过重写<code>HandlerInterceptor</code>中的三个方法来实现的。而 Spring Cloud Gateway 基于 Project Reactor 和 WebFlux，采用响应式编程风格，打开它的 Filter 的接口<code>GatewayFilter</code>你会发现它只有一个方法<code>filter</code>。</p><p>仅通过这一个方法，怎么来区分是“pre”还是“post”呢？我们下边就通过自定义过滤器来看看。</p><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><p>现在假设我们要统计某个服务的响应时间，我们可以在代码中</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// do something...</span><span class="token keyword">long</span> elapsed <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime<span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"elapsed: &#123;&#125;ms"</span><span class="token punctuation">,</span> elapsed<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>每次都要这么写是不是很烦？Spring 告诉我们有个东西叫 AOP。但是我们是微服务啊，在每个服务里都写也很烦。这时候就该网关的过滤器登台表演了。</p><p>自定义过滤器需要实现<code>GatewayFilter</code>和<code>Ordered</code>。其中<code>GatewayFilter</code>中的这个方法就是用来实现你的自定义的逻辑的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Copy</span></code></pre><p>而<code>Ordered</code>中的<code>int getOrder()</code>方法是来给过滤器设定优先级别的，值越大则优先级越低。</p><p>好了，让我们来撸代码吧</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">LogFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GatewayFilter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GatewayFilterChain</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Ordered</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerWebExchange</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElapsedFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GatewayFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">GatewayFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ELAPSED_TIME_BEGIN <span class="token operator">=</span> <span class="token string">"elapsedTimeBegin"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ELAPSED_TIME_BEGIN<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>                <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">fromRunnable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Long</span> startTime <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>ELAPSED_TIME_BEGIN<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>startTime <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRawPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Ordered</span><span class="token punctuation">.</span>LOWEST_PRECEDENCE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>我们在请求刚刚到达时，往<code>ServerWebExchange</code>中放入了一个属性<code>elapsedTimeBegin</code>，属性值为当时的毫秒级时间戳。然后在请求执行结束后，又从中取出我们之前放进去的那个时间戳，与当前时间的差值即为该请求的耗时。因为这是与业务无关的日志所以将<code>Ordered</code>设为<code>Integer.MAX_VALUE</code>以降低优先级。</p><p>现在再来看我们之前的问题：怎么来区分是“pre”还是“post”呢？其实就是<code>chain.filter(exchange)</code>之前的就是“pre”部分，之后的也就是<code>then</code>里边的是“post”部分。</p><p>创建好 Filter 之后我们将它添加到我们的 Filter Chain 里边</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customerRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// @formatter:off</span>    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/fluent/customer/**"</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">stripPrefix</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ElapsedFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                        <span class="token punctuation">.</span><span class="token function">addResponseHeader</span><span class="token punctuation">(</span><span class="token string">"X-Response-Default-Foo"</span><span class="token punctuation">,</span> <span class="token string">"Default-Bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"lb://CONSUMER"</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"fluent_customer_service"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// @formatter:on</span><span class="token punctuation">&#125;</span></code></pre><p>现在再尝试访问 <a href="http://localhost:10000/customer/hello/yibo">http://localhost:10000/customer/hello/yibo</a> 即可在控制台里看到请求路径与对应的耗时</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">2018</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">08</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">04.197</span>  INFO <span class="token number">83726</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ctor<span class="token operator">-</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">GatewayFilter</span>   <span class="token operator">:</span> <span class="token operator">/</span>hello<span class="token operator">/</span>yibo<span class="token operator">:</span> <span class="token number">40</span>ms</code></pre><blockquote><p>实际在使用 Spring Cloud 的过程中，我们会<a href="https://www.haoyizebo.com/posts/6d06094e/">使用 Sleuth+Zipkin 来进行耗时分析</a>。</p></blockquote><h2 id="自定义全局过滤器"><a href="#自定义全局过滤器" class="headerlink" title="自定义全局过滤器"></a>自定义全局过滤器</h2><p>前边讲了自定义的过滤器，那个过滤器只是局部的，如果我们有多个路由就需要一个一个来配置，<strong>并不能</strong>通过像下面这样来实现全局有效（也未在 Fluent Java API 中找到能设置 defaultFilters 的方法）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ElapsedFilter</span> <span class="token function">elapsedFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ElapsedFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这在我们要全局统一处理某些业务的时候就显得比较麻烦，比如像最开始我们说的要做身份校验，有没有简单的方法呢？这时候就该全局过滤器出场了。</p><p>有了前边的基础，我们创建全局过滤器就简单多了。只需要把实现的接口<code>GatewayFilter</code>换成<code>GlobalFilter</code>，就完事大吉了。比如下面的 Demo 就是从请求参数中获取<code>token</code>字段，如果能获取到就 pass，获取不到就直接返回<code>401</code>错误，虽然简单，但足以说明问题了。</p><pre class="language-none"><code class="language-none">import org.springframework.cloud.gateway.filter.GatewayFilterChain;import org.springframework.cloud.gateway.filter.GlobalFilter;import org.springframework.core.Ordered;import org.springframework.http.HttpStatus;import org.springframework.web.server.ServerWebExchange;import reactor.core.publisher.Mono;public class TokenFilter implements GlobalFilter, Ordered &#123;    @Override    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;        String token &#x3D; exchange.getRequest().getQueryParams().getFirst(&quot;token&quot;);        if (token &#x3D;&#x3D; null || token.isEmpty()) &#123;            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);            return exchange.getResponse().setComplete();        &#125;        return chain.filter(exchange);    &#125;    @Override    public int getOrder() &#123;        return -100;    &#125;&#125;</code></pre><p>然后在 Spring Config 中配置这个 Bean</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">TokenFilter</span> <span class="token function">tokenFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TokenFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>重启应用就能看到效果了</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">2018</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">08</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">06.528</span> DEBUG <span class="token number">87751</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ctor<span class="token operator">-</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>c<span class="token punctuation">.</span>g<span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token class-name">RoutePredicateHandlerMapping</span>   <span class="token operator">:</span> <span class="token class-name">Mapping</span> <span class="token punctuation">[</span><span class="token class-name">Exchange</span><span class="token operator">:</span> GET http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">10000</span><span class="token operator">/</span>customer<span class="token operator">/</span>hello<span class="token operator">/</span>yibo<span class="token operator">?</span>token<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">]</span> <span class="token keyword">to</span> <span class="token class-name">Route</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token string">'service_customer'</span><span class="token punctuation">,</span> uri<span class="token operator">=</span>lb<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>CONSUMER<span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> predicate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>predicate<span class="token punctuation">.</span><span class="token class-name">PathRoutePredicateFactory</span>$$<span class="token class-name">Lambda</span>$<span class="token number">334</span><span class="token operator">/</span><span class="token number">1871259950</span><span class="token annotation punctuation">@2aa090be</span><span class="token punctuation">,</span> gatewayFilters<span class="token operator">=</span><span class="token punctuation">[</span><span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>factory<span class="token punctuation">.</span><span class="token class-name">StripPrefixGatewayFilterFactory</span>$$<span class="token class-name">Lambda</span>$<span class="token number">337</span><span class="token operator">/</span><span class="token number">577037372</span><span class="token annotation punctuation">@22e84be7</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>factory<span class="token punctuation">.</span><span class="token class-name">AddResponseHeaderGatewayFilterFactory</span>$$<span class="token class-name">Lambda</span>$<span class="token number">339</span><span class="token operator">/</span><span class="token number">1061806694</span><span class="token annotation punctuation">@1715f608</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">2018</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">08</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">06.530</span> DEBUG <span class="token number">87751</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ctor<span class="token operator">-</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>c<span class="token punctuation">.</span>g<span class="token punctuation">.</span>handler<span class="token punctuation">.</span><span class="token class-name">FilteringWebHandler</span>      <span class="token operator">:</span> <span class="token class-name">Sorted</span> gatewayFilterFactories<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>com<span class="token punctuation">.</span>yibo<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">TokenFilter</span><span class="token annotation punctuation">@309028af</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">NettyWriteResponseFilter</span><span class="token annotation punctuation">@70e889e9</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>factory<span class="token punctuation">.</span><span class="token class-name">StripPrefixGatewayFilterFactory</span>$$<span class="token class-name">Lambda</span>$<span class="token number">337</span><span class="token operator">/</span><span class="token number">577037372</span><span class="token annotation punctuation">@22e84be7</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>factory<span class="token punctuation">.</span><span class="token class-name">AddResponseHeaderGatewayFilterFactory</span>$$<span class="token class-name">Lambda</span>$<span class="token number">339</span><span class="token operator">/</span><span class="token number">1061806694</span><span class="token annotation punctuation">@1715f608</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">RouteToRequestUrlFilter</span><span class="token annotation punctuation">@51351f28</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">LoadBalancerClientFilter</span><span class="token annotation punctuation">@724c5cbe</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">10100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">AdaptCachedBodyGlobalFilter</span><span class="token annotation punctuation">@418c020b</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2147483637</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">WebsocketRoutingFilter</span><span class="token annotation punctuation">@15f2eda3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2147483646</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">NettyRoutingFilter</span><span class="token annotation punctuation">@70101687</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2147483647</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">ForwardRoutingFilter</span><span class="token annotation punctuation">@21618fa7</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2147483647</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token class-name">Copy</span></code></pre><blockquote><p>官方说，未来的版本将对这个接口作出一些调整：<br>This interface and usage are subject to change in future milestones.<br>from <a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.0.0.RC1/single/spring-cloud-gateway.html#_global_filters">Spring Cloud Gateway - Global Filters</a></p></blockquote><h2 id="自定义过滤器工厂"><a href="#自定义过滤器工厂" class="headerlink" title="自定义过滤器工厂"></a>自定义过滤器工厂</h2><p>如果你还对上一篇关于路由的文章有印象，你应该还得我们在配置中有这么一段</p><pre class="language-none"><code class="language-none">filters:  - StripPrefix&#x3D;1  - AddResponseHeader&#x3D;X-Response-Default-Foo, Default-BarCopy</code></pre><p><code>StripPrefix</code>、<code>AddResponseHeader</code>这两个实际上是两个过滤器工厂（GatewayFilterFactory），用这种配置的方式更灵活方便。</p><p>我们就将之前的那个<code>ElapsedFilter</code>改造一下，让它能接收一个<code>boolean</code>类型的参数，来决定是否将请求参数也打印出来。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">LogFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GatewayFilter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">AbstractGatewayFilterFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElapsedGatewayFilterFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractGatewayFilterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ElapsedGatewayFilterFactory</span><span class="token punctuation">.</span><span class="token class-name">Config</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">GatewayFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ELAPSED_TIME_BEGIN <span class="token operator">=</span> <span class="token string">"elapsedTimeBegin"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> KEY <span class="token operator">=</span> <span class="token string">"withParams"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">shortcutFieldOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ElapsedGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">GatewayFilter</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ELAPSED_TIME_BEGIN<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>                    <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">fromRunnable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Long</span> startTime <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>ELAPSED_TIME_BEGIN<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>startTime <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRawPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>                                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span>                                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isWithParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" params:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> withParams<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isWithParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> withParams<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWithParams</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> withParams<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>withParams <span class="token operator">=</span> withParams<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>过滤器工厂的顶级接口是<code>GatewayFilterFactory</code>，我们可以直接继承它的两个抽象类来简化开发<code>AbstractGatewayFilterFactory</code>和<code>AbstractNameValueGatewayFilterFactory</code>，这两个抽象类的区别就是前者接收一个参数（像<code>StripPrefix</code>和我们创建的这种），后者接收两个参数（像<code>AddResponseHeader</code>）。</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr4w5hwis7j30kx09v3zj.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr4w5hwis7j30kx09v3zj.jpg" alt="img"></a></p><p><code>GatewayFilter apply(Config config)</code>方法内部实际上是创建了一个<code>GatewayFilter</code>的匿名类，具体实现和之前的几乎一样，就不解释了。</p><p>静态内部类<code>Config</code>就是为了接收那个<code>boolean</code>类型的参数服务的，里边的变量名可以随意写，但是要重写<code>List&lt;String&gt; shortcutFieldOrder()</code>这个方法。</p><p>这里注意一下，一定要调用一下父类的构造器把<code>Config</code>类型传过去，否则会报<code>ClassCastException</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ElapsedGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>工厂类我们有了，再把它注册到 Spring 当中</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ElapsedGatewayFilterFactory</span> <span class="token function">elapsedGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ElapsedGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>然后添加配置（主要改动在第 8 行）</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">default-filters</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> Elapsed=true      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> service_customer          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//CONSUMER          <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">0</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/customer/<span class="token important">**</span>          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> StripPrefix=1            <span class="token punctuation">-</span> AddResponseHeader=X<span class="token punctuation">-</span>Response<span class="token punctuation">-</span>Default<span class="token punctuation">-</span>Foo<span class="token punctuation">,</span> Default<span class="token punctuation">-</span>Bar</code></pre><p>然后我们再次访问 <a href="http://localhost:10000/customer/hello/yibo?token=1000">http://localhost:10000/customer/hello/yibo?token=1000</a> 即可在控制台看到以下内容</p><pre class="language-none"><code class="language-none">2018-05-08 16:53:02.030  INFO 84423 --- [ctor-http-nio-1] o.s.cloud.gateway.filter.GatewayFilter   : &#x2F;hello&#x2F;yibo: 656ms params:&#123;token&#x3D;[1000]&#125;</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要介绍了 Spring Cloud Gateway 的过滤器，我们实现了自定义局部过滤器、自定义全局过滤器和自定义过滤器工厂，相信大家对 Spring Cloud Gateway 的过滤器有了一定的了解。之后我们将继续在过滤器的基础上研究 如何使用 Spring Cloud Gateway 实现限流和 fallback。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.haoyizebo.com/posts/1e919f7d/">https://www.haoyizebo.com/posts/1e919f7d/</a></p><p><a href="https://blog.csdn.net/forezp/article/details/85057268">https://blog.csdn.net/forezp/article/details/85057268</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Spring Cloud Gateway 已经内置了很多实用的过滤器，但并不能完全满足我们的需求。本文我们就来实现自定义过滤器。虽然现在 Spring Cloud Gateway 的文档还不完善，但是我们依旧可以照猫画虎来定制自己的过滤器。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://wumuwumu.github.io/tags/SpringCloud/"/>
    
    <category term="SpringCloudGateway" scheme="http://wumuwumu.github.io/tags/SpringCloudGateway/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloudGateway基本操作-断言</title>
    <link href="http://wumuwumu.github.io/posts/cbfc80cb.html"/>
    <id>http://wumuwumu.github.io/posts/cbfc80cb.html</id>
    <published>2021-01-25T07:00:00.000Z</published>
    <updated>2021-02-27T06:13:13.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev    <span class="token comment">################################################################spring cloud gateway##############################################################</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>              <span class="token comment">#当访问http://网关地址/服务名称（大写）/**地址会自动转发到http://服务名称（大写）/**地址，如果为false就不会自动转发</span>          <span class="token key atrule">lowerCaseServiceId</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment">#为true表示服务名称（小写）</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>payment  <span class="token comment">#路由id，需要全局统一，建议使用对应的spring.application.name</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8001</span>  <span class="token comment">#路由到对应服务的地址</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/service/<span class="token important">**/*</span>      <span class="token comment">#断言，匹配规则，ant匹配</span>        <span class="token comment">############################################################</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>payment2  <span class="token comment">#路由id，需要全局统一，建议使用对应的spring.application.name</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8002</span>  <span class="token comment">#路由到对应服务的地址</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/service/<span class="token important">**/*</span>      <span class="token comment">#断言，匹配规则，ant匹配</span></code></pre><h2 id="JavaBean配置"><a href="#JavaBean配置" class="headerlink" title="JavaBean配置"></a>JavaBean配置</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemogatewayApplication</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"path_route"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"host_route"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token string">"*.myhost.org"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"rewrite_route"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token string">"*.rewrite.org"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">rewritePath</span><span class="token punctuation">(</span><span class="token string">"/foo/(?&lt;segment>.*)"</span><span class="token punctuation">,</span> <span class="token string">"/$&#123;segment&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"hystrix_route"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token string">"*.hystrix.org"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">hystrix</span><span class="token punctuation">(</span>c <span class="token operator">-></span> c<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"slowcmd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"hystrix_fallback_route"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token string">"*.hystrixfallback.org"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">hystrix</span><span class="token punctuation">(</span>c <span class="token operator">-></span> c<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"slowcmd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFallbackUri</span><span class="token punctuation">(</span><span class="token string">"forward:/hystrixfallback"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"limit_route"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token string">"*.limited.org"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/anything/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">requestRateLimiter</span><span class="token punctuation">(</span>c <span class="token operator">-></span> c<span class="token punctuation">.</span><span class="token function">setRateLimiter</span><span class="token punctuation">(</span><span class="token function">redisRateLimiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="自定义路由Predicate-断言"><a href="#自定义路由Predicate-断言" class="headerlink" title="自定义路由Predicate 断言"></a>自定义路由Predicate 断言</h4><p>在<code>spring-cloud-gateway</code>的官方文档中没有给出自定义Predicate ,只留下一句<code>TODO: document writing Custom Route Predicate Factories</code></p><h5 id="创建RoutePredicateFactory"><a href="#创建RoutePredicateFactory" class="headerlink" title="创建RoutePredicateFactory"></a>创建RoutePredicateFactory</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author WXY */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenRoutePredicateFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRoutePredicateFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TokenRoutePredicateFactory</span><span class="token punctuation">.</span><span class="token class-name">Config</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DATETIME_KEY <span class="token operator">=</span> <span class="token string">"headerName"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TokenRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">shortcutFieldOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>DATETIME_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerWebExchange</span><span class="token punctuation">></span></span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"TokenRoutePredicateFactory Start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> exchange <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">//判断header里有放token</span>            <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> header <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getHeaderName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Token Predicate headers:&#123;&#125;"</span><span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> header<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * 传输token header key         */</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> headerName<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHeaderName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> headerName<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeaderName</span><span class="token punctuation">(</span><span class="token class-name">String</span> headerName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>headerName <span class="token operator">=</span> headerName<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>继承<code>AbstractRoutePredicateFactory&lt;C&gt;</code>主要实现其中的两个方法</p><p><code>shortcutFieldOrder()</code>-Config对应的字段</p><p><code>Predicate&lt;ServerWebExchange&gt; apply(Config config)</code>-具体的逻辑</p><p>还有就是构造方法传入用来装配置的类程序会自动把配置的<code>value</code>传入<code>apply</code>中的入参</p><h5 id="初始化RoutePredicateFactory为bean"><a href="#初始化RoutePredicateFactory为bean" class="headerlink" title="初始化RoutePredicateFactory为bean"></a>初始化RoutePredicateFactory为bean</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token comment">/** * @author WXY * */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoutesConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">TokenRoutePredicateFactory</span> <span class="token function">initTokenRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TokenRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>或者直接在<code>TokenRoutePredicateFactory</code>类上加<code>@Component</code>也行</p><h4 id="配置自定义的Predicate"><a href="#配置自定义的Predicate" class="headerlink" title="配置自定义的Predicate"></a>配置自定义的Predicate</h4><h5 id="使用属性文件配置自定义Predicate"><a href="#使用属性文件配置自定义Predicate" class="headerlink" title="使用属性文件配置自定义Predicate"></a>使用属性文件配置自定义Predicate</h5><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.cloud.gateway.routes[1].predicates[1]</span><span class="token punctuation">=</span><span class="token attr-value">Token=Authorization</span></code></pre><p>其中<code>Toekn</code>为命名<code>RoutePredicateFactory</code>时的前面部分，所以在定义<code>RoutePredicateFactory</code>时类名必须后缀为<code>RoutePredicateFactory</code>,否则找不到自定义的<code>Predicate</code></p><h5 id="使用代码配置"><a href="#使用代码配置" class="headerlink" title="使用代码配置"></a>使用代码配置</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author WXY * */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoutesConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 代码配置路由     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>predicateSpec <span class="token operator">-></span>                predicateSpec<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/order/**"</span><span class="token punctuation">)</span>                     <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asyncPredicate</span><span class="token punctuation">(</span><span class="token function">initTokenRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">applyAsync</span><span class="token punctuation">(</span>config <span class="token operator">-></span> config<span class="token punctuation">.</span><span class="token function">setHeaderName</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                     <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"lb://order-service"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"order-service"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">TokenRoutePredicateFactory</span> <span class="token function">initTokenRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TokenRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>使用代码配置自定义Predicate，主要使用<code>asyncPredicate</code>方法，把所需的自定义<code>RoutePredicateFactory</code>对象传进去配置<code>applyAsync</code>方法传入配置的属性。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://my.oschina.net/zhousc1992/blog/3194740">https://my.oschina.net/zhousc1992/blog/3194740</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本配置&quot;&gt;&lt;a href=&quot;#基本配置&quot; class=&quot;headerlink&quot; title=&quot;基本配置&quot;&gt;&lt;/a&gt;基本配置&lt;/h1&gt;&lt;h2 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; class=&quot;headerlink&quot; title=&quot;配置文件&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://wumuwumu.github.io/tags/SpringCloud/"/>
    
    <category term="SpringCloudGateway" scheme="http://wumuwumu.github.io/tags/SpringCloudGateway/"/>
    
  </entry>
  
</feed>
