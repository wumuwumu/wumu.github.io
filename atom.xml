<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wumu&#39;s blog</title>
  
  <subtitle>wumu的博客</subtitle>
  <link href="http://wumuwumu.github.io/atom.xml" rel="self"/>
  
  <link href="http://wumuwumu.github.io/"/>
  <updated>2021-01-26T07:28:51.091Z</updated>
  <id>http://wumuwumu.github.io/</id>
  
  <author>
    <name>wumu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringCloudGateway基本操作-WebFlux</title>
    <link href="http://wumuwumu.github.io/20201/01/25/java/SpringCloud/SpringCloudGateway%E5%AD%A6%E4%B9%A04-WebFlux/"/>
    <id>http://wumuwumu.github.io/20201/01/25/java/SpringCloud/SpringCloudGateway%E5%AD%A6%E4%B9%A04-WebFlux/</id>
    <published>+020201-01-25T09:00:00.000Z</published>
    <updated>2021-01-26T07:28:51.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Create-a-WebFlux-Handler"><a href="#Create-a-WebFlux-Handler" class="headerlink" title="Create a WebFlux Handler"></a>Create a WebFlux Handler</h2><p>In the Spring Reactive approach, we use a handler to handle the request and create a response, as shown in the following example:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//src/main/java/hello/GreetingHandler.java</span><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">BodyInserters</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreetingHandler</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">></span></span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">ServerResponse</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>TEXT_PLAIN<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">BodyInserters</span><span class="token punctuation">.</span><span class="token function">fromValue</span><span class="token punctuation">(</span><span class="token string">"Hello, Spring!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>This simple reactive class always returns “Hello, Spring!” It could return many other things, including a stream of items from a database, a stream of items that were generated by calculations, and so on. Note the reactive code: a <code>Mono</code> object that holds a <code>ServerResponse</code> body.</p><h2 id="Create-a-Router"><a href="#Create-a-Router" class="headerlink" title="Create a Router"></a>Create a Router</h2><p>In this application, we use a router to handle the only route we expose (“/hello”), as shown in the following example:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//src/main/java/hello/GreetingRouter.java</span><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">RequestPredicates</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">RouterFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">RouterFunctions</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerResponse</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreetingRouter</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> <span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">></span></span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token class-name">GreetingHandler</span> greetingHandler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">RouterFunctions</span>      <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token class-name">RequestPredicates</span><span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">RequestPredicates</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>TEXT_PLAIN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> greetingHandler<span class="token operator">::</span><span class="token function">hello</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>The router listens for traffic on the <code>/hello</code> path and returns the value provided by our reactive handler class.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Create-a-WebFlux-Handler&quot;&gt;&lt;a href=&quot;#Create-a-WebFlux-Handler&quot; class=&quot;headerlink&quot; title=&quot;Create a WebFlux Handler&quot;&gt;&lt;/a&gt;Create a WebFl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringCloudGateway基本操作-限流（详细版）</title>
    <link href="http://wumuwumu.github.io/2021/01/26/java/SpringCloud/SpringCloudGateway%E5%AD%A6%E4%B9%A05-%E9%99%90%E6%B5%81%EF%BC%88%E8%AF%A6%E7%BB%86%E7%89%88%EF%BC%89/"/>
    <id>http://wumuwumu.github.io/2021/01/26/java/SpringCloud/SpringCloudGateway%E5%AD%A6%E4%B9%A05-%E9%99%90%E6%B5%81%EF%BC%88%E8%AF%A6%E7%BB%86%E7%89%88%EF%BC%89/</id>
    <published>2021-01-26T08:00:00.000Z</published>
    <updated>2021-01-26T08:13:14.775Z</updated>
    
    <content type="html"><![CDATA[<p>话说在 Spring Cloud Gateway 问世之前，Spring Cloud 的微服务世界里，网关一定非 Netflix Zuul 莫属。但是由于 Zuul 1.x 存在的一些问题，比如阻塞式的 API，不支持 WebSocket 等，一直被人所诟病，而且 Zuul 升级新版本依赖于 Netflix 公司，经过几次跳票之后，Spring 开源社区决定推出自己的网关组件，替代 Netflix Zuul。</p><p>从 18 年 6 月 Spring Cloud 发布的 Finchley 版本开始，Spring Cloud Gateway 逐渐崭露头角，它基于 Spring 5.0、Spring Boot 2.0 和 Project Reactor 等技术开发，不仅支持响应式和无阻塞式的 API，而且支持 WebSocket，和 Spring 框架紧密集成。尽管 Zuul 后来也推出了 2.x 版本，在底层使用了异步无阻塞式的 API，大大改善了其性能，但是目前看来 Spring 并没有打算继续集成它的计划。</p><p>根据官网的描述，Spring Cloud Gateway 的主要特性如下：</p><ul><li>Built on Spring Framework 5, Project Reactor and Spring Boot 2.0</li><li>Able to match routes on any request attribute</li><li>Predicates and filters are specific to routes</li><li>Hystrix Circuit Breaker integration</li><li>Spring Cloud DiscoveryClient integration</li><li>Easy to write Predicates and Filters</li><li>Request Rate Limiting</li><li>Path Rewriting</li></ul><p>可以看出 Spring Cloud Gateway 可以很方便的和 Spring Cloud 生态中的其他组件进行集成（比如：断路器和服务发现），而且提供了一套简单易写的 <strong>断言</strong>（<strong>Predicates</strong>，有的地方也翻译成 <strong>谓词</strong>）和 <strong>过滤器</strong>（<strong>Filters</strong>）机制，可以对每个 <strong>路由</strong>（<strong>Routes</strong>）进行特殊请求处理。</p><p>最近在项目中使用了 Spring Cloud Gateway，并在它的基础上实现了一些高级特性，如限流和留痕，在网关的使用过程中遇到了不少的挑战，于是趁着项目结束，抽点时间系统地学习并总结下。这篇文章主要学习限流技术，首先我会介绍一些常见的限流场景和限流算法，然后介绍一些关于限流的开源项目，学习别人是如何实现限流的，最后介绍我是如何在网关中实现限流的，并分享一些实现过程中的经验和遇到的坑。</p><h2 id="一、常见的限流场景"><a href="#一、常见的限流场景" class="headerlink" title="一、常见的限流场景"></a>一、常见的限流场景</h2><p><strong>缓存</strong>、<strong>降级</strong> 和 <strong>限流</strong> 被称为高并发、分布式系统的三驾马车，网关作为整个分布式系统中的第一道关卡，限流功能自然必不可少。通过限流，可以控制服务请求的速率，从而提高系统应对突发大流量的能力，让系统更具弹性。限流有着很多实际的应用场景，比如双十一的秒杀活动， 12306 的抢票等。</p><h3 id="1-1-限流的对象"><a href="#1-1-限流的对象" class="headerlink" title="1.1 限流的对象"></a>1.1 限流的对象</h3><p>通过上面的介绍，我们对限流的概念可能感觉还是比较模糊，到底限流限的是什么？顾名思义，限流就是限制流量，但这里的流量是一个比较笼统的概念。如果考虑各种不同的场景，限流是非常复杂的，而且和具体的业务规则密切相关，可以考虑如下几种常见的场景：</p><ul><li>限制某个接口一分钟内最多请求 100 次</li><li>限制某个用户的下载速度最多 100KB/S</li><li>限制某个用户同时只能对某个接口发起 5 路请求</li><li>限制某个 IP 来源禁止访问任何请求</li></ul><p>从上面的例子可以看出，根据不同的请求者和请求资源，可以组合出不同的限流规则。可以根据请求者的 IP 来进行限流，或者根据请求对应的用户来限流，又或者根据某个特定的请求参数来限流。而限流的对象可以是请求的频率，传输的速率，或者并发量等，其中最常见的两个限流对象是请求频率和并发量，他们对应的限流被称为 <strong>请求频率限流</strong>（Request rate limiting）和 <strong>并发量限流</strong>（Concurrent requests limiting）。<strong>传输速率限流</strong> 在下载场景下比较常用，比如一些资源下载站会限制普通用户的下载速度，只有购买会员才能提速，这种限流的做法实际上和请求频率限流类似，只不过一个限制的是请求量的多少，一个限制的是请求数据报文的大小。这篇文章主要介绍请求频率限流和并发量限流。</p><h3 id="1-2-限流的处理方式"><a href="#1-2-限流的处理方式" class="headerlink" title="1.2 限流的处理方式"></a>1.2 限流的处理方式</h3><p>在系统中设计限流方案时，有一个问题值得设计者去仔细考虑，当请求者被限流规则拦截之后，我们该如何返回结果。一般我们有下面三种限流的处理方式：</p><ul><li>拒绝服务</li><li>排队等待</li><li>服务降级</li></ul><p>最简单的做法是拒绝服务，直接抛出异常，返回错误信息（比如返回 HTTP 状态码 429 Too Many Requests），或者给前端返回 302 重定向到一个错误页面，提示用户资源没有了或稍后再试。但是对于一些比较重要的接口不能直接拒绝，比如秒杀、下单等接口，我们既不希望用户请求太快，也不希望请求失败，这种情况一般会将请求放到一个消息队列中排队等待，消息队列可以起到削峰和限流的作用。第三种处理方式是服务降级，当触发限流条件时，直接返回兜底数据，比如查询商品库存的接口，可以默认返回有货。</p><h3 id="1-3-限流的架构"><a href="#1-3-限流的架构" class="headerlink" title="1.3 限流的架构"></a>1.3 限流的架构</h3><p>针对不同的系统架构，需要使用不同的限流方案。如下图所示，服务部署的方式一般可以分为单机模式和集群模式：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loUHVzVllCc2JnVWljU3RLS0VpYzZXRjRYT256cmpBRzZzSW96eWhUUVlKaEg3ZEJtN2JnMWczVncvNjQw?x-oss-process=image/format,png" alt="img"></p><p>单机模式的限流非常简单，可以直接基于内存就可以实现，而集群模式的限流必须依赖于某个“中心化”的组件，比如网关或 Redis，从而引出两种不同的限流架构：<strong>网关层限流</strong> 和 <strong>中间件限流</strong>。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loNE80aWFtRWppY0kzM0U3U1RiaWNWS1p2SkxzNVlJZE1Uek9tZVhxcXhPa3oxSkNoSDUwc0RXdTNRLzY0MA?x-oss-process=image/format,png" alt="img"></p><p>网关作为整个分布式系统的入口，承担了所有的用户请求，所以在网关中进行限流是最合适不过的。网关层限流有时也被称为 <strong>接入层限流</strong>。除了我们使用的 Spring Cloud Gateway，最常用的网关层组件还有 Nginx，可以通过它的 ngx_http_limit_req_module 模块，使用 limit_conn_zone、limit_req_zone、limit_rate 等指令很容易的实现并发量限流、请求频率限流和传输速率限流。这里不对 Nginx 作过多的说明，关于这几个指令的详细信息可以 参考 Nginx 的官方文档。</p><p>另一种限流架构是中间件限流，可以将限流的逻辑下沉到服务层。但是集群中的每个服务必须将自己的流量信息统一汇总到某个地方供其他服务读取，一般来说用 Redis 的比较多，Redis 提供的过期特性和 lua 脚本执行非常适合做限流。除了 Redis 这种中间件，还有很多类似的分布式缓存系统都可以使用，如 Hazelcast、Apache Ignite、Infinispan 等。</p><p>我们可以更进一步扩展上面的架构，将网关改为集群模式，虽然这还是网关层限流架构，但是由于网关变成了集群模式，所以网关必须依赖于中间件进行限流，这和上面讨论的中间件限流没有区别。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loM2VMS2ljTjVPamtQeTg1SnpreGNUREFjOWJ4SG1JZVlpY1VmalVJWkNyTVJtdEYydVlUSVBnaWFBLzY0MA?x-oss-process=image/format,png" alt="img"></p><h2 id="二、常见的限流算法"><a href="#二、常见的限流算法" class="headerlink" title="二、常见的限流算法"></a>二、常见的限流算法</h2><p>通过上面的学习，我们知道限流可以分为请求频率限流和并发量限流，根据系统架构的不同，又可以分为网关层限流和分布式限流。在不同的应用场景下，我们需要采用不同的限流算法。这一节将介绍一些主流的限流算法。</p><p>有一点要注意的是，利用池化技术也可以达到限流的目的，比如线程池或连接池，但这不是本文的重点。</p><h3 id="2-1-固定窗口算法（Fixed-Window）"><a href="#2-1-固定窗口算法（Fixed-Window）" class="headerlink" title="2.1 固定窗口算法（Fixed Window）"></a>2.1 固定窗口算法（Fixed Window）</h3><p>固定窗口算法是一种最简单的限流算法，它根据限流的条件，将请求时间映射到一个时间窗口，再使用计数器累加访问次数。譬如限流条件为每分钟 5 次，那么就按照分钟为单位映射时间窗口，假设一个请求时间为 11:00:45，时间窗口就是 11:00:00 ~ 11:00:59，在这个时间窗口内设定一个计数器，每来一个请求计数器加一，当这个时间窗口的计数器超过 5 时，就触发限流条件。当请求时间落在下一个时间窗口内时（11:01:00 ~ 11:01:59），上一个窗口的计数器失效，当前的计数器清零，重新开始计数。</p><p>计数器算法非常容易实现，在单机场景下可以使用 <code>AtomicLong</code>、<code>LongAdder</code> 或 <code>Semaphore</code> 来实现计数，而在分布式场景下可以通过 Redis 的 <code>INCR</code> 和 <code>EXPIRE</code> 等命令并结合 <code>EVAL</code> 或 lua 脚本来实现，Redis 官网提供了几种简单的实现方式。无论是请求频率限流还是并发量限流都可以使用这个算法。</p><p>不过这个算法的缺陷也比较明显，那就是存在严重的临界问题。由于每过一个时间窗口，计数器就会清零，这使得限流效果不够平滑，恶意用户可以利用这个特点绕过我们的限流规则。如下图所示，我们的限流条件本来是每分钟 5 次，但是恶意用户在 11:00:00 ~ 11:00:59 这个时间窗口的后半分钟发起 5 次请求，接下来又在 11:01:00 ~ 11:01:59 这个时间窗口的前半分钟发起 5 次请求，这样我们的系统就在 1 分钟内承受了 10 次请求。（图片来源）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loamEzMURCRmJlU2s3a0hKc1VHejJyc0Y2ZzRUMWx4eURFS3ljaWFKMm5RUnNUNXpFN0ZTNjZlUS82NDA?x-oss-process=image/format,png" alt="img"></p><h3 id="2-2-滑动窗口算法（Rolling-Window-或-Sliding-Window）"><a href="#2-2-滑动窗口算法（Rolling-Window-或-Sliding-Window）" class="headerlink" title="2.2 滑动窗口算法（Rolling Window 或 Sliding Window）"></a>2.2 滑动窗口算法（Rolling Window 或 Sliding Window）</h3><p>为了解决固定窗口算法的临界问题，可以将时间窗口划分成更小的时间窗口，然后随着时间的滑动删除相应的小窗口，而不是直接滑过一个大窗口，这就是滑动窗口算法。我们为每个小时间窗口都设置一个计数器，大时间窗口的总请求次数就是每个小时间窗口的计数器的和。如下图所示，我们的时间窗口是 5 秒，可以按秒进行划分，将其划分成 5 个小窗口，时间每过一秒，时间窗口就滑过一秒：（图片来源）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loY2M3YVEyZ0R5WERoeXcwdlFQTHF3UmI2TVZXMklCWDdvRUVpYk5IM0hJYUFoMWlhNHBDWnFmVVEvNjQw?x-oss-process=image/format,png" alt="img"></p><p>rolling-window.png</p><p>每次处理请求时，都需要计算所有小时间窗口的计数器的和，考虑到性能问题，划分的小时间窗口不宜过多，譬如限流条件是每小时 N 个，可以按分钟划分为 60 个窗口，而不是按秒划分成 3600 个。当然如果不考虑性能问题，划分粒度越细，限流效果就越平滑。相反，如果划分粒度越粗，限流效果就越不精确，出现临界问题的可能性也就越大，当划分粒度为 1 时，滑动窗口算法就退化成了固定窗口算法。由于这两种算法都使用了计数器，所以也被称为 <strong>计数器算法（Counters）</strong>。</p><p>进一步思考我们发现，如果划分粒度最粗，也就是只有一个时间窗口时，滑动窗口算法退化成了固定窗口算法；那如果我们把划分粒度调到最细，又会如何呢？那么怎样才能让划分的时间窗口最细呢？时间窗口细到一定地步时，意味着每个时间窗口中只能容纳一个请求，这样我们可以省略计数器，只记录每个请求的时间，然后统计一段时间内的请求数有多少个即可。具体的实现可以参考 这里的 Redis sorted set 技巧 和 这里的 Sliding window log 算法。</p><h3 id="2-3-漏桶算法（Leaky-Bucket）"><a href="#2-3-漏桶算法（Leaky-Bucket）" class="headerlink" title="2.3 漏桶算法（Leaky Bucket）"></a>2.3 漏桶算法（Leaky Bucket）</h3><p>除了计数器算法，另一个很自然的限流思路是将所有的请求缓存到一个队列中，然后按某个固定的速度慢慢处理，这其实就是漏桶算法（Leaky Bucket）。漏桶算法假设将请求装到一个桶中，桶的容量为 M，当桶满时，请求被丢弃。在桶的底部有一个洞，桶中的请求像水一样按固定的速度（每秒 r 个）漏出来。我们用下面这个形象的图来表示漏桶算法：（图片来源）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loS1JnaWFpYTVSMkxweENBOFE5WDdRdGRTWWVKQUhiNnVrNnNLN2hNemtsTTVMdjVqMGR3SUxBWmcvNjQw?x-oss-process=image/format,png" alt="img"></p><p>桶的上面是个水龙头，我们的请求从水龙头流到桶中，水龙头流出的水速不定，有时快有时慢，这种忽快忽慢的流量叫做 <strong>Bursty flow</strong>。如果桶中的水满了，多余的水就会溢出去，相当于请求被丢弃。从桶底部漏出的水速是固定不变的，可以看出漏桶算法可以平滑请求的速率。</p><p>漏桶算法可以通过一个队列来实现，如下图所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loeWRQTms4NjRnSXVZeGdBajRIdmc5NmF1aWJlRXdHUFlUd1VNczF0aWFRRGlieG42WEd4RExIU1RRLzY0MA?x-oss-process=image/format,png" alt="img"></p><p>当请求到达时，不直接处理请求，而是将其放入一个队列，然后另一个线程以固定的速率从队列中读取请求并处理，从而达到限流的目的。注意的是这个队列可以有不同的实现方式，比如设置请求的存活时间，或将队列改造成 PriorityQueue，根据请求的优先级排序而不是先进先出。当然队列也有满的时候，如果队列已经满了，那么请求只能被丢弃了。漏桶算法有一个缺陷，在处理突发流量时效率很低，于是人们又想出了下面的令牌桶算法。</p><h3 id="2-4-令牌桶算法（Token-Bucket）"><a href="#2-4-令牌桶算法（Token-Bucket）" class="headerlink" title="2.4 令牌桶算法（Token Bucket）"></a>2.4 令牌桶算法（Token Bucket）</h3><p>令牌桶算法（Token Bucket）是目前应用最广泛的一种限流算法，它的基本思想由两部分组成：<strong>生成令牌</strong> 和 <strong>消费令牌</strong>。</p><ul><li>生成令牌：假设有一个装令牌的桶，最多能装 M 个，然后按某个固定的速度（每秒 r 个）往桶中放入令牌，桶满时不再放入；</li><li>消费令牌：我们的每次请求都需要从桶中拿一个令牌才能放行，当桶中没有令牌时即触发限流，这时可以将请求放入一个缓冲队列中排队等待，或者直接拒绝；</li></ul><p>令牌桶算法的图示如下：（图片来源）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loRjlkN29XemljV3RydWV1VTh4M01OV1NEbWdwbGljUXdJbW4zNTZyWk9zTDZxV2lhZFh2S29pYW9XZy82NDA?x-oss-process=image/format,png" alt="img"></p><p>在上面的图中，我们将请求放在一个缓冲队列中，可以看出这一部分的逻辑和漏桶算法几乎一模一样，只不过在处理请求上，一个是以固定速率处理，一个是从桶中获取令牌后才处理。</p><p>仔细思考就会发现，令牌桶算法有一个很关键的问题，就是桶大小的设置，正是这个参数可以让令牌桶算法具备处理突发流量的能力。譬如将桶大小设置为 100，生成令牌的速度设置为每秒 10 个，那么在系统空闲一段时间的之后（桶中令牌一直没有消费，慢慢的会被装满），突然来了 50 个请求，这时系统可以直接按每秒 50 个的速度处理，随着桶中的令牌很快用完，处理速度又会慢慢降下来，和生成令牌速度趋于一致。这是令牌桶算法和漏桶算法最大的区别，漏桶算法无论来了多少请求，只会一直以每秒 10 个的速度进行处理。当然，处理突发流量虽然提高了系统性能，但也给系统带来了一定的压力，如果桶大小设置不合理，突发的大流量可能会直接压垮系统。</p><p>通过上面对令牌桶的原理分析，一般会有两种不同的实现方式。第一种方式是启动一个内部线程，不断的往桶中添加令牌，处理请求时从桶中获取令牌，和上面图中的处理逻辑一样。第二种方式不依赖于内部线程，而是在每次处理请求之前先实时计算出要填充的令牌数并填充，然后再从桶中获取令牌。下面是第二种方式的一种经典实现，其中 <code>capacity</code> 表示令牌桶大小，<code>refillTokensPerOneMillis</code> 表示填充速度，每毫秒填充多少个，<code>availableTokens</code> 表示令牌桶中还剩多少个令牌，<code>lastRefillTimestamp</code> 表示上一次填充时间。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenBucket</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> refillTokensPerOneMillis<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> availableTokens<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> lastRefillTimestamp<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">TokenBucket</span><span class="token punctuation">(</span><span class="token keyword">long</span> capacity<span class="token punctuation">,</span> <span class="token keyword">long</span> refillTokens<span class="token punctuation">,</span> <span class="token keyword">long</span> refillPeriodMillis<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>refillTokensPerOneMillis <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> refillTokens <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> refillPeriodMillis<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>availableTokens <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastRefillTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">synchronized</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryConsume</span><span class="token punctuation">(</span><span class="token keyword">int</span> numberTokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">refill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>availableTokens <span class="token operator">&lt;</span> numberTokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            availableTokens <span class="token operator">-=</span> numberTokens<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">refill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> currentTimeMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentTimeMillis <span class="token operator">></span> lastRefillTimestamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> millisSinceLastRefill <span class="token operator">=</span> currentTimeMillis <span class="token operator">-</span> lastRefillTimestamp<span class="token punctuation">;</span>            <span class="token keyword">double</span> refill <span class="token operator">=</span> millisSinceLastRefill <span class="token operator">*</span> refillTokensPerOneMillis<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>availableTokens <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> availableTokens <span class="token operator">+</span> refill<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lastRefillTimestamp <span class="token operator">=</span> currentTimeMillis<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>可以像下面这样创建一个令牌桶（桶大小为 100，且每秒生成 100 个令牌）：</p><pre class="language-go" data-language="go"><code class="language-go">TokenBucket limiter <span class="token operator">=</span> <span class="token builtin">new</span> <span class="token function">TokenBucket</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>从上面的代码片段可以看出，令牌桶算法的实现非常简单也非常高效，仅仅通过几个变量的运算就实现了完整的限流功能。核心逻辑在于 <code>refill()</code> 这个方法，在每次消费令牌时，计算当前时间和上一次填充的时间差，并根据填充速度计算出应该填充多少令牌。在重新填充令牌后，再判断请求的令牌数是否足够，如果不够，返回 false，如果足够，则减去令牌数，并返回 true。</p><p>在实际的应用中，往往不会直接使用这种原始的令牌桶算法，一般会在它的基础上作一些改进，比如，填充速率支持动态调整，令牌总数支持透支，基于 Redis 支持分布式限流等，不过总体来说还是符合令牌桶算法的整体框架，我们在后面学习一些开源项目时对此会有更深的体会。</p><h2 id="三、一些开源项目"><a href="#三、一些开源项目" class="headerlink" title="三、一些开源项目"></a>三、一些开源项目</h2><p>有很多开源项目中都实现了限流的功能，这一节通过一些开源项目的学习，了解限流是如何实现的。</p><h3 id="3-1-Guava-的-RateLimiter"><a href="#3-1-Guava-的-RateLimiter" class="headerlink" title="3.1 Guava 的 RateLimiter"></a>3.1 Guava 的 RateLimiter</h3><p>Google Guava 是一个强大的核心库，包含了很多有用的工具类，例如：集合、缓存、并发库、字符串处理、I/O 等等。其中在并发库中，Guava 提供了两个和限流相关的类：RateLimiter 和 SmoothRateLimiter。Guava 的 RateLimiter 基于令牌桶算法实现，不过在传统的令牌桶算法基础上做了点改进，支持两种不同的限流方式：<strong>平滑突发限流（SmoothBursty）</strong> 和 <strong>平滑预热限流（SmoothWarmingUp）</strong>。</p><p>下面的方法可以创建一个平滑突发限流器（SmoothBursty）：</p><pre class="language-go" data-language="go"><code class="language-go">RateLimiter limiter <span class="token operator">=</span> RateLimiter<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>RateLimiter.create(5)</code> 表示这个限流器容量为 5，并且每秒生成 5 个令牌，也就是每隔 200 毫秒生成一个。我们可以使用 <code>limiter.acquire()</code> 消费令牌，如果桶中令牌足够，返回 0，如果令牌不足，则阻塞等待，并返回等待的时间。我们连续请求几次：</p><pre class="language-go" data-language="go"><code class="language-go">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">``</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">``</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">``</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出结果如下：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token number">0.0</span><span class="token string">``</span><span class="token number">0.198239</span><span class="token string">``</span><span class="token number">0.196083</span><span class="token string">``</span><span class="token number">0.200609</span></code></pre><p>可以看出限流器创建之后，初始会有一个令牌，然后每隔 200 毫秒生成一个令牌，所以第一次请求直接返回 0，后面的请求都会阻塞大约 200 毫秒。另外，<code>SmoothBursty</code> 还具有应对突发的能力，而且 <strong>还允许消费未来的令牌</strong>，比如下面的例子：</p><pre class="language-go" data-language="go"><code class="language-go">RateLimiter limiter <span class="token operator">=</span> RateLimiter<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>会得到类似下面的输出：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token number">0.01</span><span class="token number">.997428</span>  <span class="token number">0.192273</span>  <span class="token number">0.200616</span></code></pre><p>限流器创建之后，初始令牌只有一个，但是我们请求 10 个令牌竟然也通过了，只不过看后面请求发现，第二次请求花了 2 秒左右的时间把前面的透支的令牌给补上了。</p><p>Guava 支持的另一种限流方式是平滑预热限流器（SmoothWarmingUp），可以通过下面的方法创建：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">RateLimiter</span> limiter <span class="token operator">=</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第一个参数还是每秒创建的令牌数量，这里是每秒 2 个，也就是每 500 毫秒生成一个，后面的参数表示从冷启动速率过渡到平均速率的时间间隔，也就是所谓的热身时间间隔（warm up period）。我们看下输出结果：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token number">0.0</span> <span class="token number">1.329289</span>  <span class="token number">0.994375</span>  <span class="token number">0.662888</span>  <span class="token number">0.501287</span></code></pre><p>第一个请求还是立即得到令牌，但是后面的请求和上面平滑突发限流就完全不一样了，按理来说 500 毫秒就会生成一个令牌，但是我们发现第二个请求却等了 1.3s，而不是 0.5s，后面第三个和第四个请求也等了一段时间。不过可以看出，等待时间在慢慢的接近 0.5s，直到第五个请求等待时间才开始变得正常。从第一个请求到第五个请求，这中间的时间间隔就是热身阶段，可以算出热身的时间就是我们设置的 3 秒。</p><p>关于热身的算法很有意思，也比较烧脑，有兴趣的同学可以参考 这里 和 这里 的过程分析。</p><h3 id="3-2-Bucket4j"><a href="#3-2-Bucket4j" class="headerlink" title="3.2 Bucket4j"></a>3.2 Bucket4j</h3><p>Bucket4j 是一个基于令牌桶算法实现的强大的限流库，它不仅支持单机限流，还支持通过诸如 Hazelcast、Ignite、Coherence、Infinispan 或其他兼容 JCache API (JSR 107) 规范的分布式缓存实现分布式限流。</p><p>在使用 Bucket4j 之前，我们有必要先了解 Bucket4j 中的几个核心概念：</p><ul><li>Bucket</li><li>Bandwidth</li><li>Refill</li></ul><p><code>Bucket</code> 接口代表了令牌桶的具体实现，也是我们操作的入口。它提供了诸如 <code>tryConsume</code> 和 <code>tryConsumeAndReturnRemaining</code> 这样的方法供我们消费令牌。可以通过下面的构造方法来创建 <code>Bucket</code>：</p><pre class="language-go" data-language="go"><code class="language-go">Bucket bucket <span class="token operator">=</span> Bucket4j<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLimit</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>bucket<span class="token punctuation">.</span><span class="token function">tryConsume</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>Bandwidth</code> 的意思是带宽，可以理解为限流的规则。Bucket4j 提供了两种方法来创建 Bandwidth：<code>simple</code> 和 <code>classic</code>。下面是 simple 方式创建的 Bandwidth，表示桶大小为 10，填充速度为每分钟 10 个令牌：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Bandwidth</span> limit <span class="token operator">=</span> <span class="token class-name">Bandwidth</span><span class="token punctuation">.</span><span class="token function">simple</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>simple 方式桶大小和填充速度是一样的，classic 方式更灵活一点，可以自定义填充速度，下面的例子表示桶大小为 10，填充速度为每分钟 5 个令牌：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Refill</span> filler <span class="token operator">=</span> <span class="token class-name">Refill</span><span class="token punctuation">.</span><span class="token function">greedy</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Bandwidth</span> limit <span class="token operator">=</span> <span class="token class-name">Bandwidth</span><span class="token punctuation">.</span><span class="token function">classic</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> filler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中，<code>Refill</code> 用于填充令牌桶，可以通过它定义填充速度，Bucket4j 有两种填充令牌的策略：<strong>间隔策略（intervally）</strong> 和 <strong>贪婪策略（greedy）</strong>。在上面的例子中我们使用的是贪婪策略，如果使用间隔策略可以像下面这样创建 <code>Refill</code>：</p><pre class="language-go" data-language="go"><code class="language-go">Refill filler <span class="token operator">=</span> Refill<span class="token punctuation">.</span><span class="token function">intervally</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Duration<span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>所谓间隔策略指的是每隔一段时间，一次性的填充所有令牌，比如上面的例子，会每隔一分钟，填充 5 个令牌，如下所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loMDVLV2xpYUs2UVhvOHdwTVlxTThZeFRYUFppYm9pYWFNb3NtRjNPNUhKNmxjVllWMlgyZDF1MVR3LzY0MA?x-oss-process=image/format,png" alt="img"></p><p>intervally.png</p><p>而贪婪策略会尽可能贪婪的填充令牌，同样是上面的例子，会将一分钟划分成 5 个更小的时间单元，每隔 12 秒，填充 1 个令牌，如下所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loaFpvM3VqbHBjWnI4YUtwNGlhVE15aWNRUWljWTRLZThtOWpCMXVaYVdTcVlvNzhUNDJDMzZRZUJnLzY0MA?x-oss-process=image/format,png" alt="img"></p><p>在了解了 Bucket4j 中的几个核心概念之后，我们再来看看官网介绍的一些特性：</p><ul><li>基于令牌桶算法</li><li>高性能，无锁实现</li><li>不存在精度问题，所有计算都是基于整型的</li><li>支持通过符合 JCache API 规范的分布式缓存系统实现分布式限流</li><li>支持为每个 Bucket 设置多个 Bandwidth</li><li>支持同步和异步 API</li><li>支持可插拔的监听 API，用于集成监控和日志</li><li>不仅可以用于限流，还可以用于简单的调度</li></ul><p>Bucket4j 提供了丰富的文档，推荐在使用 Bucket4j 之前，先把官方文档中的 基本用法 和 高级特性 仔细阅读一遍。另外，关于 Bucket4j 的使用，推荐这篇文章 Rate limiting Spring MVC endpoints with bucket4j，这篇文章详细的讲解了如何在 Spring MVC 中使用拦截器和 Bucket4j 打造业务无侵入的限流方案，另外还讲解了如何使用 Hazelcast 实现分布式限流；另外，Rate Limiting a Spring API Using Bucket4j 这篇文章也是一份很好的入门教程，介绍了 Bucket4j 的基础知识，在文章的最后还提供了 Spring Boot Starter 的集成方式，结合 Spring Boot Actuator 很容易将限流指标集成到监控系统中。</p><p>和 Guava 的限流器相比，Bucket4j 的功能显然要更胜一筹，毕竟 Guava 的目的只是用作通用工具类，而不是用于限流的。使用 Bucket4j 基本上可以满足我们的大多数要求，不仅支持单机限流和分布式限流，而且可以很好的集成监控，搭配 Prometheus 和 Grafana 简直完美。值得一提的是，有很多开源项目譬如 JHipster API Gateway 就是使用 Bucket4j 来实现限流的。</p><p>Bucket4j 唯一不足的地方是它只支持请求频率限流，不支持并发量限流，另外还有一点，虽然 Bucket4j 支持分布式限流，但它是基于 Hazelcast 这样的分布式缓存系统实现的，不能使用 Redis，这在很多使用 Redis 作缓存的项目中就很不爽，所以我们还需要在开源的世界里继续探索。</p><h3 id="3-3-Resilience4j"><a href="#3-3-Resilience4j" class="headerlink" title="3.3 Resilience4j"></a>3.3 Resilience4j</h3><p>Resilience4j 是一款轻量级、易使用的高可用框架。用过 Spring Cloud 早期版本的同学肯定都听过 Netflix Hystrix，Resilience4j 的设计灵感就来自于它。自从 Hystrix 停止维护之后，官方也推荐大家使用 Resilience4j 来代替 Hystrix。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loOFdsQjZVSjVQZFFsYnBFUE02c0RWOXByZktieUlMQlNCaWNWdjV6QXdxck40b0JpY1d5Y3huMHcvNjQw?x-oss-process=image/format,png" alt="img"></p><p>hystrix.png</p><p>Resilience4j 的底层采用 Vavr，这是一个非常轻量级的 Java 函数式库，使得 Resilience4j 非常适合函数式编程。Resilience4j 以装饰器模式提供对函数式接口或 lambda 表达式的封装，提供了一波高可用机制：<strong>重试（Retry）</strong>、<strong>熔断（Circuit Breaker）</strong>、<strong>限流（Rate Limiter）</strong>、<strong>限时（Timer Limiter）</strong>、<strong>隔离（Bulkhead）</strong>、<strong>缓存（Caceh）</strong> 和 <strong>降级（Fallback）</strong>。我们重点关注这里的两个功能：限流（Rate Limiter） 和 隔离（Bulkhead），Rate Limiter 是请求频率限流，Bulkhead 是并发量限流。</p><p>Resilience4j 提供了两种限流的实现：<strong>SemaphoreBasedRateLimiter</strong> 和 <strong>AtomicRateLimiter</strong>。<strong>SemaphoreBasedRateLimiter</strong> 基于信号量实现，用户的每次请求都会申请一个信号量，并记录申请的时间，申请通过则允许请求，申请失败则限流，另外有一个内部线程会定期扫描过期的信号量并释放，很显然这是令牌桶的算法。<strong>AtomicRateLimiter</strong> 和上面的经典实现类似，不需要额外的线程，在处理每次请求时，根据距离上次请求的时间和生成令牌的速度自动填充。关于这二者的区别可以参考这篇文章 Rate Limiter Internals in Resilience4j。</p><p>Resilience4j 也提供了两种隔离的实现：<strong>SemaphoreBulkhead</strong> 和 <strong>ThreadPoolBulkhead</strong>，通过信号量或线程池控制请求的并发数，具体的用法参考官方文档，这里不再赘述。</p><p>下面是一个同时使用限流和隔离的例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个 Bulkhead，最大并发量为 150</span><span class="token class-name">BulkheadConfig</span> bulkheadConfig <span class="token operator">=</span> <span class="token class-name">BulkheadConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">maxConcurrentCalls</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">maxWaitTime</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Bulkhead</span> bulkhead <span class="token operator">=</span> <span class="token class-name">Bulkhead</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"backendName"</span><span class="token punctuation">,</span> bulkheadConfig<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个 RateLimiter，每秒允许一次请求</span><span class="token class-name">RateLimiterConfig</span> rateLimiterConfig <span class="token operator">=</span> <span class="token class-name">RateLimiterConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">timeoutDuration</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">limitRefreshPeriod</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">limitForPeriod</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RateLimiter</span> rateLimiter <span class="token operator">=</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"backendName"</span><span class="token punctuation">,</span> rateLimiterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 Bulkhead 和 RateLimiter 装饰业务逻辑</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> backendService<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> decoratedSupplier <span class="token operator">=</span> <span class="token class-name">Decorators</span><span class="token punctuation">.</span><span class="token function">ofSupplier</span><span class="token punctuation">(</span>supplier<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">withBulkhead</span><span class="token punctuation">(</span>bulkhead<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">withRateLimiter</span><span class="token punctuation">(</span>rateLimiter<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用业务逻辑</span><span class="token class-name">Try</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token keyword">try</span> <span class="token operator">=</span> <span class="token class-name">Try</span><span class="token punctuation">.</span><span class="token function">ofSupplier</span><span class="token punctuation">(</span>decoratedSupplier<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token keyword">try</span><span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Resilience4j 在功能特性上比 Bucket4j 强大不少，而且还支持并发量限流。不过最大的遗憾是，Resilience4j 不支持分布式限流。</p><h3 id="3-4-其他"><a href="#3-4-其他" class="headerlink" title="3.4 其他"></a>3.4 其他</h3><p>网上还有很多限流相关的开源项目，不可能一一介绍，这里列出来的只是冰山之一角：</p><ul><li><a href="https://github.com/mokies/ratelimitj">https://github.com/mokies/ratelimitj</a></li><li><a href="https://github.com/wangzheng0822/ratelimiter4j">https://github.com/wangzheng0822/ratelimiter4j</a></li><li><a href="https://github.com/wukq/rate-limiter">https://github.com/wukq/rate-limiter</a></li><li><a href="https://github.com/marcosbarbero/spring-cloud-zuul-ratelimit">https://github.com/marcosbarbero/spring-cloud-zuul-ratelimit</a></li><li><a href="https://github.com/onblog/SnowJena">https://github.com/onblog/SnowJena</a></li><li><a href="https://gitee.com/zhanghaiyang/spring-boot-starter-current-limiting">https://gitee.com/zhanghaiyang/spring-boot-starter-current-limiting</a></li><li><a href="https://github.com/Netflix/concurrency-limits">https://github.com/Netflix/concurrency-limits</a></li></ul><p>可以看出，限流技术在实际项目中应用非常广泛，大家对实现自己的限流算法乐此不疲，新算法和新实现层出不穷。但是找来找去，目前还没有找到一款开源项目完全满足我的需求。</p><p>我的需求其实很简单，需要同时满足两种不同的限流场景：请求频率限流和并发量限流，并且能同时满足两种不同的限流架构：单机限流和分布式限流。下面我们就开始在 Spring Cloud Gateway 中实现这几种限流，通过前面介绍的那些项目，我们取长补短，基本上都能用比较成熟的技术实现，只不过对于最后一种情况，分布式并发量限流，网上没有搜到现成的解决方案，在和同事讨论了几个晚上之后，想出一种新型的基于双窗口滑动的限流算法，我在这里抛砖引玉，欢迎大家批评指正，如果大家有更好的方法，也欢迎讨论。</p><h2 id="四、在网关中实现限流"><a href="#四、在网关中实现限流" class="headerlink" title="四、在网关中实现限流"></a>四、在网关中实现限流</h2><p>在文章一开始介绍 Spring Cloud Gateway 的特性时，我们注意到其中有一条 <code>Request Rate Limiting</code>，说明网关自带了限流的功能，但是 Spring Cloud Gateway 自带的限流有很多限制，譬如不支持单机限流，不支持并发量限流，而且它的请求频率限流也是不尽人意，这些都需要我们自己动手来解决。</p><h3 id="4-1-实现单机请求频率限流"><a href="#4-1-实现单机请求频率限流" class="headerlink" title="4.1 实现单机请求频率限流"></a>4.1 实现单机请求频率限流</h3><p>Spring Cloud Gateway 中定义了关于限流的一个接口 <code>RateLimiter</code>，如下：</p><pre class="language-go" data-language="go"><code class="language-go">public <span class="token keyword">interface</span> RateLimiter<span class="token operator">&lt;</span>C<span class="token operator">></span> extends StatefulConfigurable<span class="token operator">&lt;</span>C<span class="token operator">></span> <span class="token punctuation">&#123;</span>    Mono<span class="token operator">&lt;</span>RateLimiter<span class="token punctuation">.</span>Response<span class="token operator">></span> <span class="token function">isAllowed</span><span class="token punctuation">(</span>String routeId<span class="token punctuation">,</span> String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这个接口就一个方法 <code>isAllowed</code>，第一个参数 <code>routeId</code> 表示请求路由的 ID，根据 routeId 可以获取限流相关的配置，第二个参数 <code>id</code> 表示要限流的对象的唯一标识，可以是用户名，也可以是 IP，或者其他的可以从 <code>ServerWebExchange</code> 中得到的信息。我们看下 <code>RequestRateLimiterGatewayFilterFactory</code> 中对 <code>isAllowed</code> 的调用逻辑：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">GatewayFilter</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 从配置中得到 KeyResolver</span>    <span class="token class-name">KeyResolver</span> resolver <span class="token operator">=</span> <span class="token function">getOrDefault</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>keyResolver<span class="token punctuation">,</span> defaultKeyResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 从配置中得到 RateLimiter</span>    <span class="token class-name">RateLimiter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> limiter <span class="token operator">=</span> <span class="token function">getOrDefault</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>rateLimiter<span class="token punctuation">,</span>            defaultRateLimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> denyEmpty <span class="token operator">=</span> <span class="token function">getOrDefault</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>denyEmptyKey<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>denyEmptyKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpStatusHolder</span> emptyKeyStatus <span class="token operator">=</span> <span class="token class-name">HttpStatusHolder</span>            <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>emptyKeyStatus<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>emptyKeyStatusCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span> <span class="token operator">-></span> resolver<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">defaultIfEmpty</span><span class="token punctuation">(</span>EMPTY_KEY<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>key <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 通过 KeyResolver 得到 key，作为唯一标识 id 传入 isAllowed() 方法</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>EMPTY_KEY<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>denyEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">setResponseStatus</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> emptyKeyStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 获取当前路由 ID，作为 routeId 参数传入 isAllowed() 方法</span>                <span class="token class-name">String</span> routeId <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getRouteId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>routeId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Route</span> route <span class="token operator">=</span> exchange                            <span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchangeUtils</span><span class="token punctuation">.</span>GATEWAY_ROUTE_ATTR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    routeId <span class="token operator">=</span> route<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> limiter<span class="token punctuation">.</span><span class="token function">isAllowed</span><span class="token punctuation">(</span>routeId<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>response <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> header <span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                header<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// 请求允许，直接走到下一个 filter</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// 请求被限流，返回设置的 HTTP 状态码（默认是 429）</span>                    <span class="token function">setResponseStatus</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>从上面的逻辑可以看出，通过实现 <code>KeyResolver</code> 接口的 <code>resolve</code> 方法就可以自定义要限流的对象了。</p><pre class="language-go" data-language="go"><code class="language-go">public <span class="token keyword">interface</span> KeyResolver <span class="token punctuation">&#123;</span>    Mono<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>比如下面的 <code>HostAddrKeyResolver</code> 可以根据 IP 来限流：</p><pre class="language-go" data-language="go"><code class="language-go">public class HostAddrKeyResolver implements KeyResolver <span class="token punctuation">&#123;</span>    @Override    public Mono<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>我们继续看 Spring Cloud Gateway 的代码发现，<code>RateLimiter</code> 接口只提供了一个实现类 <code>RedisRateLimiter</code>：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loMGliN1FITnhkWXlWREZFNG9oQnVsd2lhR2IzUmljNmRPRk9QZmY3V1BiVm9MTjN4NlVIY3I1WDR3LzY0MA?x-oss-process=image/format,png" alt="img"></p><p>redis-rate-limiter.png</p><p>很显然是基于 Redis 实现的限流，虽说通过 Redis 也可以实现单机限流，但是总感觉有些大材小用，而且对于那些没有 Redis 的环境很不友好。所以，我们要实现真正的本地限流。</p><p>我们从 Spring Cloud Gateway 的 pull request 中发现了一个新特性 Feature/local-rate-limiter，而且看提交记录，这个新特性很有可能会合并到 3.0.0 版本中。我们不妨来看下这个 local-rate-limiter 的实现：LocalRateLimiter.java，可以看出它是基于 <code>Resilience4j</code> 实现的：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Response</span><span class="token punctuation">></span></span> <span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token class-name">String</span> routeId<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Config</span> routeConfig <span class="token operator">=</span> <span class="token function">loadConfiguration</span><span class="token punctuation">(</span>routeId<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// How many requests per second do you want a user to be allowed to do?</span>    <span class="token keyword">int</span> replenishRate <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getReplenishRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// How many seconds for a token refresh?</span>    <span class="token keyword">int</span> refreshPeriod <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getRefreshPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// How many tokens are requested per request?</span>    <span class="token keyword">int</span> requestedTokens <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getRequestedTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">final</span> io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>resilience4j<span class="token punctuation">.</span>ratelimiter<span class="token punctuation">.</span><span class="token class-name">RateLimiter</span> rateLimiter <span class="token operator">=</span> <span class="token class-name">RateLimiterRegistry</span>            <span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">rateLimiter</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token function">createRateLimiterConfig</span><span class="token punctuation">(</span>refreshPeriod<span class="token punctuation">,</span> replenishRate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">final</span> <span class="token keyword">boolean</span> allowed <span class="token operator">=</span> rateLimiter<span class="token punctuation">.</span><span class="token function">acquirePermission</span><span class="token punctuation">(</span>requestedTokens<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Long</span> tokensLeft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> rateLimiter<span class="token punctuation">.</span><span class="token function">getMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAvailablePermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>allowed<span class="token punctuation">,</span> <span class="token function">getHeaders</span><span class="token punctuation">(</span>routeConfig<span class="token punctuation">,</span> tokensLeft<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>有意思的是，这个类 还有一个早期版本，是基于 Bucket4j 实现的：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Response</span><span class="token punctuation">></span></span> <span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token class-name">String</span> routeId<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">Config</span> routeConfig <span class="token operator">=</span> <span class="token function">loadConfiguration</span><span class="token punctuation">(</span>routeId<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// How many requests per second do you want a user to be allowed to do?</span>    <span class="token keyword">int</span> replenishRate <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getReplenishRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// How much bursting do you want to allow?</span>    <span class="token keyword">int</span> burstCapacity <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getBurstCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// How many tokens are requested per request?</span>    <span class="token keyword">int</span> requestedTokens <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getRequestedTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">final</span> <span class="token class-name">Bucket</span> bucket <span class="token operator">=</span> bucketMap<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>            <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">createBucket</span><span class="token punctuation">(</span>replenishRate<span class="token punctuation">,</span> burstCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">final</span> <span class="token keyword">boolean</span> allowed <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">tryConsume</span><span class="token punctuation">(</span>requestedTokens<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>allowed<span class="token punctuation">,</span>            <span class="token function">getHeaders</span><span class="token punctuation">(</span>routeConfig<span class="token punctuation">,</span> bucket<span class="token punctuation">.</span><span class="token function">getAvailableTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>实现方式都是类似的，在上面对 Bucket4j 和 Resilience4j 已经作了比较详细的介绍，这里不再赘述。不过从这里也可以看出 Spring 生态圈对 Resilience4j 是比较看好的，我们也可以将其引入到我们的项目中。</p><h3 id="4-2-实现分布式请求频率限流"><a href="#4-2-实现分布式请求频率限流" class="headerlink" title="4.2 实现分布式请求频率限流"></a>4.2 实现分布式请求频率限流</h3><p>上面介绍了如何实现单机请求频率限流，接下来再看下分布式请求频率限流。这个就比较简单了，因为上面说了，Spring Cloud Gateway 自带了一个限流实现，就是 <code>RedisRateLimiter</code>，可以用于分布式限流。它的实现原理依然是基于令牌桶算法的，不过实现逻辑是放在一段 lua 脚本中的，我们可以在 <code>src/main/resources/META-INF/scripts</code> 目录下找到该脚本文件 <code>request_rate_limiter.lua</code>：</p><pre class="language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> tokens_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">local</span> timestamp_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">local</span> rate <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">local</span> capacity <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">local</span> now <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">local</span> requested <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">local</span> fill_time <span class="token operator">=</span> capacity<span class="token operator">/</span>rate<span class="token keyword">local</span> ttl <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>fill_time<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">local</span> last_tokens <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> last_tokens <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>  last_tokens <span class="token operator">=</span> capacity<span class="token keyword">end</span> <span class="token keyword">local</span> last_refreshed <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> last_refreshed <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>  last_refreshed <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">end</span> <span class="token keyword">local</span> delta <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> now<span class="token operator">-</span>last_refreshed<span class="token punctuation">)</span><span class="token keyword">local</span> filled_tokens <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> last_tokens<span class="token operator">+</span><span class="token punctuation">(</span>delta<span class="token operator">*</span>rate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">local</span> allowed <span class="token operator">=</span> filled_tokens <span class="token operator">>=</span> requested<span class="token keyword">local</span> new_tokens <span class="token operator">=</span> filled_tokens<span class="token keyword">local</span> allowed_num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> allowed <span class="token keyword">then</span>  new_tokens <span class="token operator">=</span> filled_tokens <span class="token operator">-</span> requested  allowed_num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">end</span> <span class="token keyword">if</span> ttl <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">then</span>  redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"setex"</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> new_tokens<span class="token punctuation">)</span>  redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"setex"</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token keyword">end</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> allowed_num<span class="token punctuation">,</span> new_tokens <span class="token punctuation">&#125;</span></code></pre><p>这段代码和上面介绍令牌桶算法时用 Java 实现的那段经典代码几乎是一样的。这里使用 lua 脚本，主要是利用了 Redis 的单线程特性，以及执行 lua 脚本的原子性，避免了并发访问时可能出现请求量超出上限的现象。想象目前令牌桶中还剩 1 个令牌，此时有两个请求同时到来，判断令牌是否足够也是同时的，两个请求都认为还剩 1 个令牌，于是两个请求都被允许了。</p><p>有两种方式来配置 Spring Cloud Gateway 自带的限流。第一种方式是通过配置文件，比如下面所示的代码，可以对某个 route 进行限流：</p><pre class="language-java" data-language="java"><code class="language-java">spring<span class="token operator">:</span>  cloud<span class="token operator">:</span>    gateway<span class="token operator">:</span>      routes<span class="token operator">:</span>      <span class="token operator">-</span> id<span class="token operator">:</span> test        uri<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>httpbin<span class="token punctuation">.</span>org<span class="token operator">:</span><span class="token number">80</span><span class="token operator">/</span>get        filters<span class="token operator">:</span>        <span class="token operator">-</span> name<span class="token operator">:</span> <span class="token class-name">RequestRateLimiter</span>          args<span class="token operator">:</span>            key<span class="token operator">-</span>resolver<span class="token operator">:</span> <span class="token string">'#&#123;@hostAddrKeyResolver&#125;'</span>            redis<span class="token operator">-</span>rate<span class="token operator">-</span>limiter<span class="token punctuation">.</span>replenishRate<span class="token operator">:</span> <span class="token number">1</span></code></pre><p>其中，<code>key-resolver</code> 使用 SpEL 表达式 <code>#&#123;@beanName&#125;</code> 从 Spring 容器中获取 <code>hostAddrKeyResolver</code> 对象，<code>burstCapacity</code> 表示令牌桶的大小，<code>replenishRate</code> 表示每秒往桶中填充多少个令牌，也就是填充速度。</p><p>第二种方式是通过下面的代码来配置：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">myRoutes</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>p <span class="token operator">-></span> p      <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>filter <span class="token operator">-></span> filter<span class="token punctuation">.</span><span class="token function">requestRateLimiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">rateLimiter</span><span class="token punctuation">(</span><span class="token class-name">RedisRateLimiter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> rl <span class="token operator">-></span> rl<span class="token punctuation">.</span><span class="token function">setBurstCapacity</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setReplenishRate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org:80"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这样就可以对某个 route 进行限流了。但是这里有一点要注意，Spring Cloud Gateway 自带的限流器有一个很大的坑，replenishRate 不支持设置小数，也就是说往桶中填充的 token 的速度最少为每秒 1 个，所以，如果我的限流规则是每分钟 10 个请求（按理说应该每 6 秒填充一次，或每秒填充 1/6 个 token），这种情况 Spring Cloud Gateway 就没法正确的限流。网上也有人提了 issue，support greater than a second resolution for the rate limiter，但还没有得到解决。</p><h3 id="4-3-实现单机并发量限流"><a href="#4-3-实现单机并发量限流" class="headerlink" title="4.3 实现单机并发量限流"></a>4.3 实现单机并发量限流</h3><p>上面学习 Resilience4j 的时候，我们提到了 Resilience4j 的一个功能特性，叫 <strong>隔离（Bulkhead）</strong>。Bulkhead 这个单词的意思是船的舱壁，利用舱壁可以将不同的船舱隔离起来，这样如果一个船舱破损进水，那么只损失这一个船舱，其它船舱可以不受影响。借鉴造船行业的经验，这种模式也被引入到软件行业，我们把它叫做 舱壁模式（Bulkhead pattern）。舱壁模式一般用于服务隔离，对于一些比较重要的系统资源，如 CPU、内存、连接数等，可以为每个服务设置各自的资源限制，防止某个异常的服务把系统的所有资源都消耗掉。这种服务隔离的思想同样可以用来做并发量限流。</p><p>正如前文所述，Resilience4j 提供了两种 Bulkhead 的实现：<code>SemaphoreBulkhead</code> 和 <code>ThreadPoolBulkhead</code>，这也正是舱壁模式常见的两种实现方案：一种是带计数的信号量，一种是固定大小的线程池。考虑到多线程场景下的线程切换成本，默认推荐使用信号量。</p><p>在操作系统基础课程中，我们学习过两个名词：<strong>互斥量（Mutex）</strong> 和 <strong>信号量（Semaphores）</strong>。互斥量用于线程的互斥，它和临界区有点相似，只有拥有互斥对象的线程才有访问资源的权限，由于互斥对象只有一个，因此任何情况下只会有一个线程在访问此共享资源，从而保证了多线程可以安全的访问和操作共享资源。而信号量是用于线程的同步，这是由荷兰科学家 E.W.Dijkstra 提出的概念，它和互斥量不同，信号允许多个线程同时使用共享资源，但是它同时设定了访问共享资源的线程最大数目，从而可以进行并发量控制。</p><p>下面是使用信号量限制并发访问的一个简单例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreTest</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request processing ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这里我们创建了 100 个线程同时执行，但是由于信号量计数为 10，所以同时只能有 10 个线程在处理请求。说到计数，实际上，在 Java 里除了 <code>Semaphore</code> 还有很多类也可以用作计数，比如 <code>AtomicLong</code> 或 <code>LongAdder</code>，这在并发量限流中非常常见，只是无法提供像信号量那样的阻塞能力：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicLongTest</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AtomicLong</span> atomic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>atomic<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request rejected ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request processing ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        atomic<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4-4-实现分布式并发量限流"><a href="#4-4-实现分布式并发量限流" class="headerlink" title="4.4 实现分布式并发量限流"></a>4.4 实现分布式并发量限流</h3><p>通过在单机实现并发量限流，我们掌握了几种常用的手段：信号量、线程池、计数器，这些都是单机上的概念。那么稍微拓展下，如果能实现分布式信号量、分布式线程池、分布式计数器，那么实现分布式并发量限流不就易如反掌了吗？</p><p>关于分布式线程池，是我自己杜撰的词，在网上并没有找到类似的概念，比较接近的概念是资源调度和分发，但是又感觉不像，这里直接忽略吧。</p><p>关于分布式信号量，还真有这样的东西，比如 Apache Ignite 就提供了 <code>IgniteSemaphore</code> 用于创建分布式信号量，它的使用方式和 <code>Semaphore</code> 非常类似，参考这里。使用 Redis 的 ZSet 也可以实现分布式信号量，比如 这篇博客介绍的方法，还有《Redis in Action》这本电子书中也提到了这样的例子，教你如何实现 Counting semaphores。另外，Redisson 也实现了基于 Redis 的分布式信号量 RSemaphore，用法也和 <code>Semaphore</code> 类似。使用分布式信号量可以很容易实现分布式并发量限流，实现方式和上面的单机并发量限流几乎是一样的。</p><p>最后，关于分布式计数器，实现方案也是多种多样。比如使用 Redis 的 <code>INCR</code> 就很容易实现，更有甚者，使用 MySQL 数据库也可以实现。只不过使用计数器要注意操作的原子性，每次请求时都要经过这三步操作：取计数器当前的值、判断是否超过阈值，超过则拒绝、将计数器的值自增。这其实和信号量的 P 操作是一样的，而释放就对应 V 操作。</p><p>所以，利用分布式信号量和计数器就可以实现并发量限流了吗？问题当然没有这么简单。实际上，上面通过信号量和计数器实现单机并发量限流的代码片段有一个严重 BUG：</p><pre class="language-go" data-language="go"><code class="language-go">semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request processing ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>想象一下如果在处理请求时出现异常了会怎么样？很显然，信号量被该线程获取了，但是却永远不会释放，如果请求异常多了，这将导致信号量被占满，最后一个请求也进不来。在单机场景下，这个问题可以很容易解决，加一个 finally 就行了：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request processing ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>由于无论出现何种异常，finally 中的代码一定会执行，这样就保证了信号量一定会被释放。但是在分布式系统中，就不是加一个 finally 这么简单了。这是因为在分布式系统中可能存在的异常不一定是可被捕获的代码异常，还有可能是服务崩溃或者不可预知的系统宕机，就算是正常的服务重启也可能导致分布式信号量无法释放。</p><p>对于这个问题，我和几个同事连续讨论了几个晚上，想出了两种解决方法：第一种方法是使用带 TTL 的计数器，第二种方法是基于双窗口滑动的一种比较 tricky 的算法。</p><p>第一种方法比较容易理解，我们为每个请求赋予一个唯一 ID，并在 Redis 里写入一个键值对，key 为 <code>requests_xxx</code>（xxx 为请求 ID），value 为 1，并给这个 key 设置一个 TTL（如果你的应用中存在耗时非常长的请求，譬如对于一些 WebSockket 请求可能会持续几个小时，还需要开一个线程定期去刷新这个 key 的 TTL）。然后在判断并发量时，使用 <code>KEYS</code> 命令查询 <code>requests_*</code> 开头的 key 的个数，就可以知道当前一共有多少个请求，如果超过并发量上限则拒绝请求。这种方法可以很好的应对服务崩溃或重启的问题，由于每个 key 都设置了 TTL，所以经过一段时间后，这些 key 就会自动消失，就不会出现信号量占满不释放的情况了。但是这里使用 <code>KEYS</code> 命令查询请求个数是一个非常低效的做法，在请求量比较多的情况下，网关的性能会受到严重影响。我们可以把 <code>KEYS</code> 命令换成 <code>SCAN</code>，性能会得到些许提升，但总体来说效果还是很不理想的。</p><p>针对第一种方法，我们可以进一步优化，不用为每个请求写一个键值对，而是为每个分布式系统中的每个实例赋予一个唯一 ID，并在 Redis 里写一个键值对，key 为 <code>instances_xxx</code>（xxx 为实例 ID），value 为这个实例当前的并发量。同样的，我们为这个 key 设置一个 TTL，并且开启一个线程定期去刷新这个 TTL。每接受一个请求后，计数器加一，请求结束，计数器减一，这和单机场景下的处理方式一样，只不过在判断并发量时，还是需要使用 <code>KEYS</code> 或 <code>SCAN</code> 获取所有的实例，并计算出并发量的总和。不过由于实例个数是有限的，性能比之前的做法有了明显的提升。</p><p>第二种方法我称之为 <strong>双窗口滑动算法</strong>，结合了 TTL 计数器和滑动窗口算法。我们按分钟来设置一个时间窗口，在 Redis 里对应 <code>202009051130</code> 这样的一个 key，value 为计数器，表示请求的数量。当接受一个请求后，在当前的时间窗口中加一，当请求结束，在当前的时间窗口中减一，注意，接受请求和请求结束的时间窗口可能不是同一个。另外，我们还需要一个本地列表来记录当前实例正在处理的所有请求和请求对应的时间窗口，并通过一个小于时间窗口的定时线程（如 30 秒）来迁移过期的请求，所谓过期，指的是请求的时间窗口和当前时间窗口不一致。那么具体如何迁移呢？我们首先需要统计列表中一共有多少请求过期了，然后将列表中的过期请求时间更新为当前时间窗口，并从 Redis 中上一个时间窗口移动相应数量到当前时间窗口，也就是上一个时间窗口减 X，当前时间窗口加 X。由于迁移线程定期执行，所以过期的请求总是会被移动到当前窗口，最终 Redis 中只有当前时间窗口和上个时间窗口这两个时间窗口中有数据，再早一点的窗口时间中的数据会被往后迁移，所以可以给这个 key 设置一个 3 分钟或 5 分钟的 TTL。判断并发量时，由于只有两个 key，只需要使用 <code>MGET</code> 获取两个值相加即可。下面的流程图详细描述了算法的运行过程：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loYlVQUzRHYTFYem90aGF2VWhJTXo5ZnBxc2gwS1FZekRyNWczbm1hVGFESVZSaWJLN1FpYkRaSEEvNjQw?x-oss-process=image/format,png" alt="img"></p><p>其中有几个需要注意的细节：</p><ol><li>请求结束时，直接在 Redis 中当前时间窗口减一即可，就算是负数也没关系。请求列表中的该请求不用急着删除，可以打上结束标记，在迁移线程中统一删除（当然，如果请求的开始时间和结束时间在同一个窗口，可以直接删除）；</li><li>迁移的时间间隔要小于时间窗口，一般设置为 30s；</li><li>Redis 中的 key 一定要设置 TTL，时间至少为 2 个时间窗口，一般设置为 3 分钟；</li><li>迁移过程涉及到“从上一个时间窗口减”和“在当前时间窗口加”两个操作，要注意操作的原子性；</li><li>获取当前并发量可以通过 <code>MGET</code> 一次性读取两个时间窗口的值，不用 <code>GET</code> 两次；</li><li>获取并发量和判断并发量是否超限，这个过程也要注意操作的原子性。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>网关作为微服务架构中的重要一环，充当着一夫当关万夫莫开的角色，所以对网关服务的稳定性要求和性能要求都非常高。为保证网关服务的稳定性，一代又一代的程序员们前仆后继，想出了十八般武艺：限流、熔断、隔离、缓存、降级、等等等等。这篇文章从限流入手，详细介绍了限流的场景和算法，以及源码实现和可能踩到的坑。尽管限流只是网关的一个非常小的功能，但却影响到网关的方方面面，在系统架构的设计中至关重要。虽然我试着从不同的角度希望把限流介绍的更完全，但终究是管中窥豹，只见一斑，还有很多的内容没有介绍到，比如阿里开源的 Sentinel 组件也可以用于限流，因为篇幅有限未能展开。另外前文提到的 Netflix 不再维护 Hystrix 项目，这是因为他们把精力放到另一个限流项目 concurrency-limits 上了，这个项目的目标是打造一款自适应的，极具弹性的限流组件，它借鉴了 <strong>TCP 拥塞控制的算法（TCP congestion control algorithm）</strong>，实现系统的自动限流，感兴趣的同学可以去它的项目主页了解更多内容。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://blog.csdn.net/weixin_38405253/article/details/108891772">https://blog.csdn.net/weixin_38405253/article/details/108891772</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;话说在 Spring Cloud Gateway 问世之前，Spring Cloud 的微服务世界里，网关一定非 Netflix Zuul 莫属。但是由于 Zuul 1.x 存在的一些问题，比如阻塞式的 API，不支持 WebSocket 等，一直被人所诟病，而且 Zuul</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringCloudGateway基础操作-熔断</title>
    <link href="http://wumuwumu.github.io/2021/01/26/java/SpringCloud/SpringCloudGateway%E5%AD%A6%E4%B9%A06-%E7%86%94%E6%96%AD/"/>
    <id>http://wumuwumu.github.io/2021/01/26/java/SpringCloud/SpringCloudGateway%E5%AD%A6%E4%B9%A06-%E7%86%94%E6%96%AD/</id>
    <published>2021-01-26T07:00:00.000Z</published>
    <updated>2021-01-26T07:30:28.114Z</updated>
    
    <content type="html"><![CDATA[<p>微服务系统中熔断限流环节，对保护系统的稳定性起到了很大的作用，作为网关，Spring Cloud Gateway也提供了很好的支持。先来理解下熔断限流概念：</p><blockquote><ul><li><code>熔断降级</code>：在分布式系统中，网关作为流量的入口，大量请求进入网关，向后端远程系统或服务发起调用，后端服务不可避免的会产生调用失败（超时或者异常），失败时不能让请求堆积在网关上，需要快速失败并返回回去，这就需要在网关上做熔断、降级操作。</li><li><code>限流</code>：网关上有大量请求，对指定服务进行限流，可以很大程度上提高服务的可用性与稳定性，限流的目的是通过对并发访问/请求进行限速，或对一个时间窗口内的请求进行限速来保护系统。一旦达到限制速率则可以拒绝服务、排队或等待、降级。</li></ul></blockquote><p>下文就网关如何进行超时熔断、异常熔断和访问限流进行示例说明。示例包含两个模块项目，一个为网关项目<code>gateway</code>，一个为下游业务项目<code>downstream</code>。</p><p><img src="https://upload-images.jianshu.io/upload_images/5056014-42c7c5a4b2b0a8b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/467/format/webp" alt="img"></p><h2 id="超时异常熔断"><a href="#超时异常熔断" class="headerlink" title="超时异常熔断"></a>超时异常熔断</h2><h3 id="构建网关目："><a href="#构建网关目：" class="headerlink" title="构建网关目："></a>构建网关目：</h3><p>pom.xml</p><pre class="language-xml" data-language="xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.boot.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.cloud.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.spring.platform<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>platform-bom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.platform.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>application.yml</p><pre class="language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8089</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> service_customer          <span class="token comment">#下游服务地址</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>8083/          <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">0</span>          <span class="token comment">#网关断言匹配</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/gateway/<span class="token important">**</span>          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token comment">#熔断过滤器</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Hystrix              <span class="token key atrule">args</span><span class="token punctuation">:</span>                <span class="token key atrule">name</span><span class="token punctuation">:</span> fallbackcmd                <span class="token key atrule">fallbackUri</span><span class="token punctuation">:</span> forward<span class="token punctuation">:</span>/defaultfallback            <span class="token punctuation">-</span> StripPrefix=1<span class="token comment">#熔断器配置</span><span class="token key atrule">hystrix</span><span class="token punctuation">:</span>  <span class="token key atrule">command</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">execution</span><span class="token punctuation">:</span>        <span class="token key atrule">isolation</span><span class="token punctuation">:</span>          <span class="token key atrule">strategy</span><span class="token punctuation">:</span> SEMAPHORE          <span class="token key atrule">thread</span><span class="token punctuation">:</span>            <span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">3000</span>  <span class="token key atrule">shareSecurityContext</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">#网关日志输出</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">org.springframework.cloud.gateway</span><span class="token punctuation">:</span> TRACE    <span class="token key atrule">org.springframework.http.server.reactive</span><span class="token punctuation">:</span> DEBUG    <span class="token key atrule">org.springframework.web.reactive</span><span class="token punctuation">:</span> DEBUG    <span class="token key atrule">reactor.ipc.netty</span><span class="token punctuation">:</span> DEBUG</code></pre><p>以上配置的意思是：</p><ul><li>网关服务以端口8089暴露</li><li>访问<code>http://127.0.0.1:8089/gateway/</code>开头的请求，将都被路由到下游<code>http://127.0.0.1:8083/</code>下，且<code>gateway</code>部分将被移除（<code>StripPrefix=1</code>）。比如<a href="https://links.jianshu.com/go?to=http://127.0.0.1:8089/gateway/test">http://127.0.0.1:8089/gateway/test</a> —-&gt; <a href="https://links.jianshu.com/go?to=http://127.0.0.1:8083/test">http://127.0.0.1:8083/test</a></li><li>超时异常熔断采用hystrix的SEMAPHORE策略，超时时间为3秒，如果下游服务不可达（异常），将由fallbackcmd处理，路由到本地<a href="https://links.jianshu.com/go?to=http://127.0.0.1:8089/defaultfallback">http://127.0.0.1:8089/defaultfallback</a> 处理。</li></ul><h3 id="构建defaultfallback处理器"><a href="#构建defaultfallback处理器" class="headerlink" title="构建defaultfallback处理器"></a>构建defaultfallback处理器</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelfHystrixController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/defaultfallback"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">defaultfallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求被熔断."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Code"</span><span class="token punctuation">,</span><span class="token string">"fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Message"</span><span class="token punctuation">,</span><span class="token string">"服务异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>先不构建下游服务，直接运行网关，访问地址<code>http://127.0.0.1:8089/gateway/test</code>，出现如下情况：</p><p><img src="https://upload-images.jianshu.io/upload_images/5056014-f2a77eedb84ae8bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/589/format/webp" alt="img"></p><p>构建下游服务项目，该项目为简单的spring boot web项目，具体配置不详述，添加服务类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/timeout"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"timeout params:"</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.jianshu.com/p/b58c13b227bf">https://www.jianshu.com/p/b58c13b227bf</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;微服务系统中熔断限流环节，对保护系统的稳定性起到了很大的作用，作为网关，Spring Cloud Gateway也提供了很好的支持。先来理解下熔断限流概念：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;熔断降级&lt;/code&gt;：在分布式系统中，网关作为流量</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringCloudGateway总结</title>
    <link href="http://wumuwumu.github.io/2021/01/25/java/SpringCloud/SpringCloudGateway%E5%AD%A6%E4%B9%A07-%E6%80%BB%E7%BB%93/"/>
    <id>http://wumuwumu.github.io/2021/01/25/java/SpringCloud/SpringCloudGateway%E5%AD%A6%E4%B9%A07-%E6%80%BB%E7%BB%93/</id>
    <published>2021-01-25T11:00:00.000Z</published>
    <updated>2021-01-26T03:45:32.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="过滤器的常用功能"><a href="#过滤器的常用功能" class="headerlink" title="过滤器的常用功能"></a>过滤器的常用功能</h1><ol><li>黑名单、白名单</li><li>数据转换（将请求头转换成请求参数）</li><li>数据统计</li><li>限流</li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;过滤器的常用功能&quot;&gt;&lt;a href=&quot;#过滤器的常用功能&quot; class=&quot;headerlink&quot; title=&quot;过滤器的常用功能&quot;&gt;&lt;/a&gt;过滤器的常用功能&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;黑名单、白名单&lt;/li&gt;
&lt;li&gt;数据转换（将请求头转换成请求参数）&lt;/li&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringCloudGateway基本操作-限流</title>
    <link href="http://wumuwumu.github.io/2021/01/25/java/SpringCloud/SpringCloudGateway%E5%AD%A6%E4%B9%A05-%E9%99%90%E6%B5%81/"/>
    <id>http://wumuwumu.github.io/2021/01/25/java/SpringCloud/SpringCloudGateway%E5%AD%A6%E4%B9%A05-%E9%99%90%E6%B5%81/</id>
    <published>2021-01-25T10:00:00.000Z</published>
    <updated>2021-01-25T09:40:48.945Z</updated>
    
    <content type="html"><![CDATA[<p>在高并发的应用中，<strong>限流</strong>是一个绕不开的话题。限流可以保障我们的 API 服务对所有用户的可用性，也可以防止网络攻击。</p><p>一般开发高并发系统常见的限流有：限制总并发数（比如数据库连接池、线程池）、限制瞬时并发数（如 nginx 的 limit_conn 模块，用来限制瞬时并发连接数）、限制时间窗口内的平均速率（如 Guava 的 RateLimiter、nginx 的 limit_req 模块，限制每秒的平均速率）；其他还有如限制远程接口调用速率、限制 MQ 的消费速率。另外还可以根据网络连接数、网络流量、CPU 或内存负载等来限流。</p><p>本文详细探讨在 Spring Cloud Gateway 中如何实现限流。</p><h2 id="限流算法"><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h2><p>做限流 (Rate Limiting/Throttling) 的时候，除了简单的控制并发，如果要准确的控制 TPS，简单的做法是维护一个单位时间内的 Counter，如判断单位时间已经过去，则将 Counter 重置零。此做法被认为没有很好的处理单位时间的边界，比如在前一秒的最后一毫秒里和下一秒的第一毫秒都触发了最大的请求数，也就是在两毫秒内发生了两倍的 TPS。</p><p>常用的更平滑的限流算法有两种：漏桶算法和令牌桶算法。很多传统的服务提供商如华为中兴都有类似的专利，参考<a href="http://www.google.com/patents/CN1536815A?cl=zh">采用令牌漏桶进行报文限流的方法</a>。</p><h3 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h3><p>漏桶（<a href="https://en.wikipedia.org/wiki/Leaky_bucket">Leaky Bucket</a>）算法思路很简单，水（请求）先进入到漏桶里，漏桶以一定的速度出水（接口有响应速率），当水流入速度过大会直接溢出（访问频率超过接口响应速率），然后就拒绝请求，可以看出漏桶算法能强行限制数据的传输速率。</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr6048q7rdj30bs086mxd.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr6048q7rdj30bs086mxd.jpg" alt="Leaky Bucket"></a></p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr6048q7rdj30bs086mxd.jpg">Leaky Bucket</a></p><p>可见这里有两个变量，一个是桶的大小，支持流量突发增多时可以存多少的水（burst），另一个是水桶漏洞的大小（rate）。因为漏桶的漏出速率是固定的参数，所以，即使网络中不存在资源冲突（没有发生拥塞），漏桶算法也不能使流突发（burst）到端口速率。因此，漏桶算法对于存在突发特性的流量来说缺乏效率。</p><h3 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h3><p>令牌桶算法（Token Bucket）和 Leaky Bucket 效果一样但方向相反的算法，更加容易理解。随着时间流逝，系统会按恒定 1/QPS 时间间隔（如果 QPS=100，则间隔是 10ms）往桶里加入 Token（想象和漏洞漏水相反，有个水龙头在不断的加水），如果桶已经满了就不再加了。新请求来临时，会各自拿走一个 Token，如果没有 Token 可拿了就阻塞或者拒绝服务。</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr553720h0j30bp06pwek.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr553720h0j30bp06pwek.jpg" alt="Token Bucket"></a></p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr553720h0j30bp06pwek.jpg">Token Bucket</a></p><p>令牌桶的另外一个好处是可以方便的改变速度。一旦需要提高速率，则按需提高放入桶中的令牌的速率。一般会定时（比如 100 毫秒）往桶中增加一定数量的令牌，有些变种算法则实时的计算应该增加的令牌的数量。</p><blockquote><p>Guava 中的 RateLimiter 采用了令牌桶的算法，设计思路参见  <a href="https://github.com/google/guava/blob/v18.0/guava/src/com/google/common/util/concurrent/SmoothRateLimiter.java#L25:L144">How is the RateLimiter designed, and why?</a>，详细的算法实现参见<a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/util/concurrent/RateLimiter.java">源码</a>。</p></blockquote><h3 id="Leakly-Bucket-vs-Token-Bucket"><a href="#Leakly-Bucket-vs-Token-Bucket" class="headerlink" title="Leakly Bucket vs Token Bucket"></a>Leakly Bucket vs Token Bucket</h3><table><thead><tr><th>对比项</th><th>Leakly bucket</th><th>Token bucket</th><th>Token bucket 的备注</th></tr></thead><tbody><tr><td>依赖 token</td><td>否</td><td>是</td><td></td></tr><tr><td>立即执行</td><td>是</td><td>否</td><td>有足够的 token 才能执行</td></tr><tr><td>堆积 token</td><td>否</td><td>是</td><td></td></tr><tr><td>速率恒定</td><td>是</td><td>否</td><td>可以大于设定的 QPS</td></tr></tbody></table><h2 id="限流实现"><a href="#限流实现" class="headerlink" title="限流实现"></a>限流实现</h2><p>在 Gateway 上实现限流是个不错的选择，只需要编写一个过滤器就可以了。有了前边过滤器的基础，写起来很轻松。（如果你对 Spring Cloud Gateway 的过滤器还不了解，请先看<a href="https://www.haoyizebo.com/posts/1e919f7d/">这里</a>）</p><p>我们这里采用令牌桶算法，Google Guava 的<code>RateLimiter</code>、<a href="https://github.com/vladimir-bukhtoyarov/bucket4j">Bucket4j</a>、<a href="https://github.com/mokies/ratelimitj">RateLimitJ</a> 都是一些基于此算法的实现，只是他们支持的 back-ends（JCache、Hazelcast、Redis 等）不同罢了，你可以根据自己的技术栈选择相应的实现。</p><p>这里我们使用 Bucket4j，引入它的依赖坐标，为了方便顺便引入 Lombok</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.vladimir-bukhtoyarov<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>bucket4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.16.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>我们来实现具体的过滤器</p><pre class="language-xml" data-language="xml"><code class="language-xml">@CommonsLog@Builder@Data@AllArgsConstructor@NoArgsConstructorpublic class RateLimitByIpGatewayFilter implements GatewayFilter，Ordered &#123;    int capacity;    int refillTokens;    Duration refillDuration;    private static final Map<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String，Bucket</span><span class="token punctuation">></span></span> CACHE = new ConcurrentHashMap&lt;>();    private Bucket createNewBucket() &#123;        Refill refill = Refill.of(refillTokens，refillDuration);        Bandwidth limit = Bandwidth.classic(capacity，refill);        return Bucket4j.builder().addLimit(limit).build();    &#125;    @Override    public Mono<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Void</span><span class="token punctuation">></span></span> filter(ServerWebExchange exchange，GatewayFilterChain chain) &#123;        // if (!enableRateLimit)&#123;        //     return chain.filter(exchange);        // &#125;        String ip = exchange.getRequest().getRemoteAddress().getAddress().getHostAddress();        Bucket bucket = CACHE.computeIfAbsent(ip，k -> createNewBucket());        log.debug("IP: " + ip + "，TokenBucket Available Tokens: " + bucket.getAvailableTokens());        if (bucket.tryConsume(1)) &#123;            return chain.filter(exchange);        &#125; else &#123;            exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);            return exchange.getResponse().setComplete();        &#125;    &#125;    @Override    public int getOrder() &#123;        return -1000;    &#125;&#125;</code></pre><p>通过对令牌桶算法的了解，我们知道需要定义三个变量：</p><ul><li><code>capacity</code>：桶的最大容量，即能装载 Token 的最大数量</li><li><code>refillTokens</code>：每次 Token 补充量</li><li><code>refillDuration</code>：补充 Token 的时间间隔</li></ul><p>在这个实现中，我们使用了 IP 来进行限制，当达到最大流量就返回<code>429</code>错误。这里我们简单使用一个 Map 来存储 bucket，所以也决定了它只能单点使用，如果是分布式的话，可以采用 Hazelcast 或 Redis 等解决方案。</p><p>在 Route 中我们添加这个过滤器，这里指定了 bucket 的容量为 10 且每一秒会补充 1 个 Token。</p><pre class="language-xml" data-language="xml"><code class="language-xml">.route(r -> r.path("/throttle/customer/**")             .filters(f -> f.stripPrefix(2)                            .filter(new RateLimitByIpGatewayFilter(10，1，Duration.ofSeconds(1))))             .uri("lb://CONSUMER")             .order(0)             .id("throttle_customer_service"))</code></pre><p>启动服务并多次快速刷新改接口，就会看到 Tokens 的数量在不断减小，等一会又会增加上来</p><pre class="language-none"><code class="language-none">2018-05-09 15:42:08.601 DEBUG 96278 --- [ctor-http-nio-2] com.yibo.filter.RateLimitByIpGatewayFilter  : IP: 0:0:0:0:0:0:0:1，TokenBucket Available Tokens: 22018-05-09 15:42:08.958 DEBUG 96278 --- [ctor-http-nio-2] com.yibo.filter.RateLimitByIpGatewayFilter  : IP: 0:0:0:0:0:0:0:1，TokenBucket Available Tokens: 12018-05-09 15:42:09.039 DEBUG 96278 --- [ctor-http-nio-2] com.yibo.filter.RateLimitByIpGatewayFilter  : IP: 0:0:0:0:0:0:0:1，TokenBucket Available Tokens: 02018-05-09 15:42:10.201 DEBUG 96278 --- [ctor-http-nio-2] com.yibo.filter.RateLimitByIpGatewayFilter  : IP: 0:0:0:0:0:0:0:1，TokenBucket Available Tokens: 1</code></pre><h2 id="RequestRateLimiter"><a href="#RequestRateLimiter" class="headerlink" title="RequestRateLimiter"></a>RequestRateLimiter</h2><p>刚刚我们通过过滤器实现了限流的功能，你可能在想为什么不直接创建一个过滤器工厂呢，那样多方便。这是因为 Spring Cloud Gateway 已经内置了一个<code>RequestRateLimiterGatewayFilterFactory</code>，我们可以直接使用（这里有坑，后边详说）。</p><p>目前<code>RequestRateLimiterGatewayFilterFactory</code>的实现依赖于 Redis，所以我们还要引入<code>spring-boot-starter-data-redis-reactive</code></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis-reactive<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>因为这里有坑，所以把 application.yml 的配置再全部贴一遍，新增的部分我已经用<code># ---</code>标出来了</p><pre class="language-xml" data-language="xml"><code class="language-xml">spring:  application:    name: cloud-gateway  cloud:    gateway:      discovery:        locator:          enabled: true      routes:        - id: service_customer          uri: lb://CONSUMER          order: 0          predicates:            - Path=/customer/**          filters:            - StripPrefix=1            # -------            - name: RequestRateLimiter              args:                key-resolver: '#&#123;@remoteAddrKeyResolver&#125;'                redis-rate-limiter.replenishRate: 1                redis-rate-limiter.burstCapacity: 5            # -------            - AddResponseHeader=X-Response-Default-Foo，Default-Bar      default-filters:        - Elapsed=true  # -------  redis:    host: localhost    port: 6379    database: 0  # -------server:  port: 10000eureka:  client:    service-url:      defaultZone: http://localhost:7000/eureka/logging:  level:    org.springframework.cloud.gateway: debug    com.yibo.filter: debug</code></pre><p>默认情况下，是基于<strong>令牌桶算法</strong>实现的限流，有个三个参数需要配置：</p><ul><li><code>burstCapacity</code>，令牌桶容量。</li><li><code>replenishRate</code>，令牌桶每秒填充平均速率。</li><li><code>key-resolver</code>，用于限流的键的解析器的 Bean 对象名字（有些绕，看代码吧）。它使用 SpEL 表达式根据<code>#&#123;@beanName&#125;</code>从 Spring 容器中获取 Bean 对象。默认情况下，使用<code>PrincipalNameKeyResolver</code>，以请求认证的<code>java.security.Principal</code>作为限流键。</li></ul><blockquote><p>关于<code>filters</code>的那段配置格式，参考<a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/167">这里</a></p></blockquote><p>我们实现一个使用请求 IP 作为限流键的<code>KeyResolver</code></p><pre class="language-xml" data-language="xml"><code class="language-xml">public class RemoteAddrKeyResolver implements KeyResolver &#123;    public static final String BEAN_NAME = "remoteAddrKeyResolver";    @Override    public Mono<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span> resolve(ServerWebExchange exchange) &#123;        return Mono.just(exchange.getRequest().getRemoteAddress().getAddress().getHostAddress());    &#125;&#125;</code></pre><p>配置<code>RemoteAddrKeyResolver</code> Bean 对象</p><pre class="language-xml" data-language="xml"><code class="language-xml">@Bean(name = RemoteAddrKeyResolver.BEAN_NAME)public RemoteAddrKeyResolver remoteAddrKeyResolver() &#123;    return new RemoteAddrKeyResolver();&#125;</code></pre><p>以上就是代码部分，我们还差一个 Redis，我就本地用 docker 来快速启动了</p><pre class="language-none"><code class="language-none">docker run --name redis -p 6379:6379 -d redis</code></pre><p>万事俱备，只欠测试了。以上的代码的和配置都是 OK 的，可以自行测试。下面来说一下这里边的坑。</p><h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><h4 id="配置不生效"><a href="#配置不生效" class="headerlink" title="配置不生效"></a>配置不生效</h4><p>参考这个 <a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/167">issue</a></p><h4 id="No-Configuration-found-for-route"><a href="#No-Configuration-found-for-route" class="headerlink" title="No Configuration found for route"></a>No Configuration found for route</h4><p>这个异常信息如下：</p><pre class="language-none"><code class="language-none">java.lang.IllegalArgumentException: No Configuration found for route service_customer    at org.springframework.cloud.gateway.filter.ratelimit.RedisRateLimiter.isAllowed(RedisRateLimiter.java:93) ~[spring-cloud-gateway-core-2.0.0.RC1.jar:2.0.0.RC1]Copy</code></pre><p>出现在将 RequestRateLimiter 配置为 defaultFilters 的情况下，比如像这样</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">default-filters</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> RequestRateLimiter    <span class="token key atrule">args</span><span class="token punctuation">:</span>      <span class="token key atrule">key-resolver</span><span class="token punctuation">:</span> <span class="token string">'#&#123;@remoteAddrKeyResolver&#125;'</span>      <span class="token key atrule">redis-rate-limiter.replenishRate</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">redis-rate-limiter.burstCapacity</span><span class="token punctuation">:</span> <span class="token number">5</span></code></pre><p>这时候就会导致这个异常。我通过分析源码，发现了一些端倪，感觉像是一个 bug，已经提交了 <a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/310">issue</a></p><p>我们从异常入手来看， <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/filter/ratelimit/RedisRateLimiter.java#L89">RedisRateLimiter#isAllowed</a> 这个方法要获取 routeId 对应的 routerConfig，如果获取不到就抛出刚才我们看到的那个异常。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Response</span><span class="token punctuation">></span></span> <span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token class-name">String</span> routeId，<span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>initialized<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"RedisRateLimiter is not initialized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 只为 defaultFilters 配置 RequestRateLimiter 的时候</span>    <span class="token comment">// config map 里边的 key 只有 "defaultFilters"</span>    <span class="token comment">// 但是我们实际请求的 routeId 为 "customer_service"</span>    <span class="token class-name">Config</span> routeConfig <span class="token operator">=</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>routeId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>routeConfig <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultConfig <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"No Configuration found for route "</span> <span class="token operator">+</span> routeId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        routeConfig <span class="token operator">=</span> defaultConfig<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 省略若干代码...</span><span class="token punctuation">&#125;</span></code></pre><p>既然这里要 get，那必然有个地方要 put。put 的相关代码在 <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/filter/ratelimit/AbstractRateLimiter.java#L55">AbstractRateLimiter#onApplicationEvent</a> 这个方法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">FilterArgsEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span>，<span class="token class-name">Object</span><span class="token operator">></span> args <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// hasRelevantKey 检查 args 是否包含 configurationPropertyName</span>    <span class="token comment">// 只有 defaultFilters 包含</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">hasRelevantKey</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> routeId <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getRouteId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">C</span> routeConfig <span class="token operator">=</span> <span class="token function">newConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ConfigurationUtils</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>routeConfig，args<span class="token punctuation">,</span>                            configurationPropertyName，configurationPropertyName，validator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>routeId，routeConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasRelevantKey</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span>，<span class="token class-name">Object</span><span class="token operator">></span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>key <span class="token operator">-></span> key<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>configurationPropertyName <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>上边的 args 里是是配置参数的键值对，比如我们之前自定义的过滤器工厂<code>Elapsed</code>，有个参数<code>withParams</code>，这里就是<code>withParams=true</code>。关键代码在第 7 行，<code>hasRelevantKey</code>方法用于检测 args 里边是否包含<code>configurationPropertyName.</code>，具体到本例就是是否包含<code>redis-rate-limiter.</code>。悲剧就发生在这里，因为我们只为 defaultFilters 配置了相关 args，注定其他的 route 到这里就直接 return 了。</p><p>现在不清楚这是 bug 还是设计者有意为之，等答复吧。</p><h2 id="基于系统负载的动态限流"><a href="#基于系统负载的动态限流" class="headerlink" title="基于系统负载的动态限流"></a>基于系统负载的动态限流</h2><p>在实际工作中，我们可能还需要根据网络连接数、网络流量、CPU 或内存负载等来进行动态限流。在这里我们以 CPU 为栗子。</p><p>我们需要借助 Spring Boot Actuator 提供的 Metrics 能力进行实现基于 CPU 的限流——当 CPU 使用率高于某个阈值就开启限流，否则不开启限流。</p><p>我们在项目中引入 Actuator 的依赖坐标</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>因为 Spring Boot 2.x 之后，Actuator 被重新设计了，和 1.x 的区别还是挺大的（参考<a href="http://www.baeldung.com/spring-boot-actuators">这里</a>）。我们先在配置中设置<code>management.endpoints.web.exposure.include=*</code>来观察一下新的 Metrics 的能力</p><p><a href="http://localhost:10000/actuator/metrics">http://localhost:10000/actuator/metrics</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"names"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"jvm.buffer.memory.used"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.memory.used"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.buffer.count"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.gc.memory.allocated"</span><span class="token punctuation">,</span>    <span class="token string">"logback.events"</span><span class="token punctuation">,</span>    <span class="token string">"process.uptime"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.memory.committed"</span><span class="token punctuation">,</span>    <span class="token string">"system.load.average.1m"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.gc.pause"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.gc.max.data.size"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.buffer.total.capacity"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.memory.max"</span><span class="token punctuation">,</span>    <span class="token string">"system.cpu.count"</span><span class="token punctuation">,</span>    <span class="token string">"system.cpu.usage"</span><span class="token punctuation">,</span>    <span class="token string">"process.files.max"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.threads.daemon"</span><span class="token punctuation">,</span>    <span class="token string">"http.server.requests"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.threads.live"</span><span class="token punctuation">,</span>    <span class="token string">"process.start.time"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.classes.loaded"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.classes.unloaded"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.threads.peak"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.gc.live.data.size"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.gc.memory.promoted"</span><span class="token punctuation">,</span>    <span class="token string">"process.files.open"</span><span class="token punctuation">,</span>    <span class="token string">"process.cpu.usage"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>我们可以利用里边的系统 CPU 使用率<code>system.cpu.usage</code></p><p><a href="http://localhost:10000/actuator/metrics/system.cpu.usage">http://localhost:10000/actuator/metrics/system.cpu.usage</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"system.cpu.usage"</span><span class="token punctuation">,</span>  <span class="token property">"measurements"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"statistic"</span><span class="token operator">:</span> <span class="token string">"VALUE"</span><span class="token punctuation">,</span>      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">0.5189003436426117</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"availableTags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>最近一分钟内的平均负载<code>system.load.average.1m</code>也是一样的</p><p><a href="http://localhost:10000/actuator/metrics/system.load.average.1m">http://localhost:10000/actuator/metrics/system.load.average.1m</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"system.load.average.1m"</span><span class="token punctuation">,</span>  <span class="token property">"measurements"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"statistic"</span><span class="token operator">:</span> <span class="token string">"VALUE"</span><span class="token punctuation">,</span>      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">5.33203125</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"availableTags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>知道了 Metrics 提供的指标，我们就来看在代码里具体怎么实现吧。Actuator 2.x 里边已经没有了之前 1.x 里边提供的<code>SystemPublicMetrics</code>，但是经过阅读源码可以发现<code>MetricsEndpoint</code>这个类可以提供类似的功能。就用它来撸代码吧</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CommonsLog</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimitByCpuGatewayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GatewayFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MetricsEndpoint</span> metricsEndpoint<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> METRIC_NAME <span class="token operator">=</span> <span class="token string">"system.cpu.usage"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> MAX_USAGE <span class="token operator">=</span> <span class="token number">0.50D</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// if (!enableRateLimit)&#123;</span>        <span class="token comment">//     return chain.filter(exchange);</span>        <span class="token comment">// &#125;</span>        <span class="token class-name">Double</span> systemCpuUsage <span class="token operator">=</span> metricsEndpoint<span class="token punctuation">.</span><span class="token function">metric</span><span class="token punctuation">(</span>METRIC_NAME<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getMeasurements</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token operator">::</span><span class="token function">nonNull</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">MetricsEndpoint</span><span class="token punctuation">.</span><span class="token class-name">Sample</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token operator">::</span><span class="token function">isFinite</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0.0D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> ok <span class="token operator">=</span> systemCpuUsage <span class="token operator">&lt;</span> MAX_USAGE<span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"system.cpu.usage: "</span> <span class="token operator">+</span> systemCpuUsage <span class="token operator">+</span> <span class="token string">" ok: "</span> <span class="token operator">+</span> ok<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>TOO_MANY_REQUESTS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>配置 Route</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RateLimitByCpuGatewayFilter</span> rateLimitByCpuGatewayFilter<span class="token punctuation">;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customerRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// @formatter:off</span>    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/throttle/customer/**"</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">stripPrefix</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>rateLimitByCpuGatewayFilter<span class="token punctuation">)</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"lb://CONSUMER"</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"throttle_customer_service"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// @formatter:on</span><span class="token punctuation">&#125;</span></code></pre><p>至于效果嘛，自己试试吧。因为 CPU 的使用率一般波动较大，测试效果还是挺明显的，实际使用就得慎重了。</p><p>示例代码可以从 Github 获取：<a href="https://github.com/zhaoyibo/spring-cloud-study">https://github.com/zhaoyibo/spring-cloud-study</a></p><h2 id="改进与提升"><a href="#改进与提升" class="headerlink" title="改进与提升"></a>改进与提升</h2><p>实际项目中，除以上实现的限流方式，还可能会：一、在上文的基础上，增加配置项，控制每个路由的限流指标，并实现动态刷新，从而实现更加灵活的管理。二、实现不同维度的限流，例如：</p><ul><li>对请求的目标 URL 进行限流（例如：某个 URL 每分钟只允许调用多少次）</li><li>对客户端的访问 IP 进行限流（例如：某个 IP 每分钟只允许请求多少次）</li><li>对某些特定用户或者用户组进行限流（例如：非 VIP 用户限制每分钟只允许调用 100 次某个 API 等）</li><li>多维度混合的限流。此时，就需要实现一些限流规则的编排机制（与、或、非等关系）</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.haoyizebo.com/posts/ced8ea9/">https://www.haoyizebo.com/posts/ced8ea9/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在高并发的应用中，&lt;strong&gt;限流&lt;/strong&gt;是一个绕不开的话题。限流可以保障我们的 API 服务对所有用户的可用性，也可以防止网络攻击。&lt;/p&gt;
&lt;p&gt;一般开发高并发系统常见的限流有：限制总并发数（比如数据库连接池、线程池）、限制瞬时并发数（如 nginx 的 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringCloudGateway基本操作-动态路由</title>
    <link href="http://wumuwumu.github.io/2021/01/25/java/SpringCloud/SpringCloudGateway%E5%AD%A6%E4%B9%A03-%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/"/>
    <id>http://wumuwumu.github.io/2021/01/25/java/SpringCloud/SpringCloudGateway%E5%AD%A6%E4%B9%A03-%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/</id>
    <published>2021-01-25T08:00:00.000Z</published>
    <updated>2021-01-25T08:40:03.682Z</updated>
    
    <content type="html"><![CDATA[<p>gateway配置路由主要有两种方式，一种是用yml配置文件，一种是写代码里，这两种方式都是不支持动态配置的。如：</p><p><img src="https://img-blog.csdnimg.cn/20181026112026523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"><img src="https://img-blog.csdnimg.cn/20181026112045783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>下面就来看看gateway是如何加载这些配置信息的。</p><h3 id="1-路由初始化"><a href="#1-路由初始化" class="headerlink" title="1 路由初始化"></a>1 路由初始化</h3><p>无论是yml还是代码，这些配置最终都是被封装到RouteDefinition对象中。</p><p><img src="https://img-blog.csdnimg.cn/20181026112443317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>一个RouteDefinition有个唯一的ID，如果不指定，就默认是UUID，多个RouteDefinition组成了gateway的路由系统。</p><p>所有路由信息在系统启动时就被加载装配好了，并存到了内存里。我们从源码来看看。<img src="https://img-blog.csdnimg.cn/20181026113033137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>圆圈里就是装配yml文件的，它返回的是PropertiesRouteDefinitionLocator，该类继承了RouteDefinitionLocator，RouteDefinitionLocator就是路由的装载器，里面只有一个方法，就是获取路由信息的。该接口有多个实现类，分别对应不同方式配置的路由方式。</p><p><img src="https://img-blog.csdnimg.cn/20181026113950773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20181026113753850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/2018102612081129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>通过这几个实现类，再结合上面的AutoConfiguration里面的Primary信息，就知道加载配置信息的顺序。</p><p>PropertiesRouteDefinitionLocator–&gt;|配置文件加载初始化| CompositeRouteDefinitionLocator<br>RouteDefinitionRepository–&gt;|存储器中加载初始化| CompositeRouteDefinitionLocator<br>DiscoveryClientRouteDefinitionLocator–&gt;|注册中心加载初始化| CompositeRouteDefinitionLocator</p><p>参考：<a href="https://www.jianshu.com/p/b02c7495eb5e">https://www.jianshu.com/p/b02c7495eb5e</a></p><p><a href="https://blog.csdn.net/X5fnncxzq4/article/details/80221488">https://blog.csdn.net/X5fnncxzq4/article/details/80221488</a></p><p><img src="https://img-blog.csdnimg.cn/20181026114644355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>这是第一顺序，就是从CachingRouteLocator中获取路由信息，我们可以打开该类进行验证。<img src="https://img-blog.csdnimg.cn/20181026114836900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>不管发起什么请求，必然会走上面的断点处。请求一次，走一次。这是将路由信息缓存到了Map中。配置信息一旦请求过一次，就会被缓存到上图的CachingRouteLocator类中，再次发起请求后，会直接从map中读取。</p><p>如果想动态刷新配置信息，就需要发起一个RefreshRoutesEvent的事件，上图的cache会监听该事件，并重新拉取路由配置信息。</p><p>通过下图，可以看到如果没有RouteDefinitionRepository的实例，则默认用InMemoryRouteDefinitionRepository。而做动态路由的关键就在这里。即通过自定义的RouteDefinitionRepository类，来提供路由配置信息。</p><p><img src="https://img-blog.csdnimg.cn/20181026120724858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>例如：</p><p><img src="https://img-blog.csdnimg.cn/2018102612162119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>在getRouteDefinitions方法返回你自定义的路由配置信息即可。这里可以用数据库、nosql等等任意你喜欢的方式来提供。而且配置信息修改后，发起一次RefreshRoutesEvent事件即可让配置生效。这就是动态配置路由的核心所在，下面来看具体代码实现。</p><h3 id="2-基于数据库、缓存的动态路由"><a href="#2-基于数据库、缓存的动态路由" class="headerlink" title="2 基于数据库、缓存的动态路由"></a>2 基于数据库、缓存的动态路由</h3><p>pom.xml如下</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.maimeng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>apigateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>apigateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Finchley.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-webflux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.51<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--&lt;dependency>            &lt;groupId>mysql&lt;/groupId>            &lt;artifactId>mysql-connector-java&lt;/artifactId>            &lt;scope>runtime&lt;/scope>        &lt;/dependency>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring-cloud.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20181026160616350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>注意这里是SR1，经测试SR2有bug，会出问题。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"redisTemplate"</span><span class="token punctuation">,</span> <span class="token string">"stringRedisTemplate"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">StringRedisTemplate</span> <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringRedisTemplate</span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre><p>核心类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisRouteDefinitionRepository</span> <span class="token keyword">implements</span> <span class="token class-name">RouteDefinitionRepository</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> GATEWAY_ROUTES <span class="token operator">=</span> <span class="token string">"geteway_routes"</span><span class="token punctuation">;</span>     <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RouteDefinition</span><span class="token punctuation">></span></span> <span class="token function">getRouteDefinitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RouteDefinition</span><span class="token punctuation">></span></span> routeDefinitions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>GATEWAY_ROUTES<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>routeDefinition <span class="token operator">-></span> routeDefinitions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>routeDefinition<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">RouteDefinition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span>routeDefinitions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RouteDefinition</span><span class="token punctuation">></span></span> route<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> routeId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre><p>主要是在get方法里，此处从redis里获取配置好的Definition。</p><p>然后我们的工作就是将配置信息，放到redis里即可。</p><p>下面就是我模拟的一个配置，等同于在yml里</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> header        <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8888/header        <span class="token key atrule">filters</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> AddRequestHeader=header<span class="token punctuation">,</span> addHeader        <span class="token punctuation">-</span> AddRequestParameter=param<span class="token punctuation">,</span> addParam        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> Path=/jd</code></pre><p>定义好后，将其放到redis里，之后启动项目访问/jd，再启动后台的localhost:8888项目。即可进行验证。</p><p>之后如果要动态修改配置，就可以通过类似于上面的方式，来获取json字符串，然后将字符串放到redis里进行替换。替换后，需要通知gateway主动刷新一下。</p><p><img src="https://img-blog.csdnimg.cn/20181026161549838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20181026161611891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>刷新时，可以定义一个controller，然后调用一下notifyChanged()方法，就能完成新配置的替换了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://blog.csdn.net/tianyaleixiaowu/article/details/83412301">https://blog.csdn.net/tianyaleixiaowu/article/details/83412301</a></p><p><a href="https://www.haoyizebo.com/posts/1962f450/">https://www.haoyizebo.com/posts/1962f450/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;gateway配置路由主要有两种方式，一种是用yml配置文件，一种是写代码里，这两种方式都是不支持动态配置的。如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20181026112026523.png?x-oss-proces</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringCloudGateway基本操作-过滤器</title>
    <link href="http://wumuwumu.github.io/2021/01/25/java/SpringCloud/SpringCloudGateway%E5%AD%A6%E4%B9%A01-%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://wumuwumu.github.io/2021/01/25/java/SpringCloud/SpringCloudGateway%E5%AD%A6%E4%B9%A01-%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2021-01-25T07:00:00.000Z</published>
    <updated>2021-01-27T09:42:34.039Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Cloud Gateway 已经内置了很多实用的过滤器，但并不能完全满足我们的需求。本文我们就来实现自定义过滤器。虽然现在 Spring Cloud Gateway 的文档还不完善，但是我们依旧可以照猫画虎来定制自己的过滤器。</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr4wcu9jgkj30nk0bqabh.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr4wcu9jgkj30nk0bqabh.jpg" alt="img"></a></p><h2 id="Filter-的作用"><a href="#Filter-的作用" class="headerlink" title="Filter 的作用"></a>Filter 的作用</h2><p>其实前边在介绍 Zuul 的的时候已经介绍过 Zuul 的 Filter 的作用了，同作为网关服务，Spring Cloud Gateway 的 Filter 作用也类似。</p><p>这里就简单用两张图来解释一下吧。</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr43eek154j316c0g4wgz.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr43eek154j316c0g4wgz.jpg" alt="img"></a></p><p>当使用微服务构建整个 API 服务时，一般有许多不同的应用在运行，如上图所示的<code>mst-user-service</code>、<code>mst-good-service</code>和<code>mst-order-service</code>，这些服务都需要对客户端的请求的进行 Authentication。最简单粗暴的方法就是像上图一样，为每个微服务应用都实现一套用于校验的过滤器或拦截器。</p><p>对于这样的问题，更好的做法是通过前置的网关服务来完成这些非业务性质的校验，就像下图</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr43dop520j31j60ni413.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr43dop520j31j60ni413.jpg" alt="img"></a></p><h2 id="Filter-的生命周期"><a href="#Filter-的生命周期" class="headerlink" title="Filter 的生命周期"></a>Filter 的生命周期</h2><p>Spring Cloud Gateway 的 Filter 的生命周期不像 Zuul 的那么丰富，它只有两个：“pre”和“post”。</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr48yqx3ouj31kw17pn81.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr48yqx3ouj31kw17pn81.jpg" alt="image-20180508184542206"></a></p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr48yqx3ouj31kw17pn81.jpg">image-20180508184542206</a></p><p>“pre”和“post”分别会在请求被执行前调用和被执行后调用，和 Zuul Filter 或 Spring Interceptor 中相关生命周期类似，但在形式上有些不一样。</p><p>Zuul 的 Filter 是通过<code>filterType()</code>方法来指定，一个 Filter 只能对应一种类型，要么是“pre”要么是“post”。Spring Interceptor 是通过重写<code>HandlerInterceptor</code>中的三个方法来实现的。而 Spring Cloud Gateway 基于 Project Reactor 和 WebFlux，采用响应式编程风格，打开它的 Filter 的接口<code>GatewayFilter</code>你会发现它只有一个方法<code>filter</code>。</p><p>仅通过这一个方法，怎么来区分是“pre”还是“post”呢？我们下边就通过自定义过滤器来看看。</p><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><p>现在假设我们要统计某个服务的响应时间，我们可以在代码中</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// do something...</span><span class="token keyword">long</span> elapsed <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime<span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"elapsed: &#123;&#125;ms"</span><span class="token punctuation">,</span> elapsed<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>每次都要这么写是不是很烦？Spring 告诉我们有个东西叫 AOP。但是我们是微服务啊，在每个服务里都写也很烦。这时候就该网关的过滤器登台表演了。</p><p>自定义过滤器需要实现<code>GatewayFilter</code>和<code>Ordered</code>。其中<code>GatewayFilter</code>中的这个方法就是用来实现你的自定义的逻辑的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Copy</span></code></pre><p>而<code>Ordered</code>中的<code>int getOrder()</code>方法是来给过滤器设定优先级别的，值越大则优先级越低。</p><p>好了，让我们来撸代码吧</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">LogFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GatewayFilter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GatewayFilterChain</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Ordered</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerWebExchange</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElapsedFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GatewayFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">GatewayFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ELAPSED_TIME_BEGIN <span class="token operator">=</span> <span class="token string">"elapsedTimeBegin"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ELAPSED_TIME_BEGIN<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>                <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">fromRunnable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Long</span> startTime <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>ELAPSED_TIME_BEGIN<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>startTime <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRawPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Ordered</span><span class="token punctuation">.</span>LOWEST_PRECEDENCE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>我们在请求刚刚到达时，往<code>ServerWebExchange</code>中放入了一个属性<code>elapsedTimeBegin</code>，属性值为当时的毫秒级时间戳。然后在请求执行结束后，又从中取出我们之前放进去的那个时间戳，与当前时间的差值即为该请求的耗时。因为这是与业务无关的日志所以将<code>Ordered</code>设为<code>Integer.MAX_VALUE</code>以降低优先级。</p><p>现在再来看我们之前的问题：怎么来区分是“pre”还是“post”呢？其实就是<code>chain.filter(exchange)</code>之前的就是“pre”部分，之后的也就是<code>then</code>里边的是“post”部分。</p><p>创建好 Filter 之后我们将它添加到我们的 Filter Chain 里边</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customerRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// @formatter:off</span>    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/fluent/customer/**"</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">stripPrefix</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ElapsedFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                        <span class="token punctuation">.</span><span class="token function">addResponseHeader</span><span class="token punctuation">(</span><span class="token string">"X-Response-Default-Foo"</span><span class="token punctuation">,</span> <span class="token string">"Default-Bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"lb://CONSUMER"</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"fluent_customer_service"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// @formatter:on</span><span class="token punctuation">&#125;</span></code></pre><p>现在再尝试访问 <a href="http://localhost:10000/customer/hello/yibo">http://localhost:10000/customer/hello/yibo</a> 即可在控制台里看到请求路径与对应的耗时</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">2018</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">08</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">04.197</span>  INFO <span class="token number">83726</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ctor<span class="token operator">-</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">GatewayFilter</span>   <span class="token operator">:</span> <span class="token operator">/</span>hello<span class="token operator">/</span>yibo<span class="token operator">:</span> <span class="token number">40</span>ms</code></pre><blockquote><p>实际在使用 Spring Cloud 的过程中，我们会<a href="https://www.haoyizebo.com/posts/6d06094e/">使用 Sleuth+Zipkin 来进行耗时分析</a>。</p></blockquote><h2 id="自定义全局过滤器"><a href="#自定义全局过滤器" class="headerlink" title="自定义全局过滤器"></a>自定义全局过滤器</h2><p>前边讲了自定义的过滤器，那个过滤器只是局部的，如果我们有多个路由就需要一个一个来配置，<strong>并不能</strong>通过像下面这样来实现全局有效（也未在 Fluent Java API 中找到能设置 defaultFilters 的方法）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ElapsedFilter</span> <span class="token function">elapsedFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ElapsedFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这在我们要全局统一处理某些业务的时候就显得比较麻烦，比如像最开始我们说的要做身份校验，有没有简单的方法呢？这时候就该全局过滤器出场了。</p><p>有了前边的基础，我们创建全局过滤器就简单多了。只需要把实现的接口<code>GatewayFilter</code>换成<code>GlobalFilter</code>，就完事大吉了。比如下面的 Demo 就是从请求参数中获取<code>token</code>字段，如果能获取到就 pass，获取不到就直接返回<code>401</code>错误，虽然简单，但足以说明问题了。</p><pre class="language-none"><code class="language-none">import org.springframework.cloud.gateway.filter.GatewayFilterChain;import org.springframework.cloud.gateway.filter.GlobalFilter;import org.springframework.core.Ordered;import org.springframework.http.HttpStatus;import org.springframework.web.server.ServerWebExchange;import reactor.core.publisher.Mono;public class TokenFilter implements GlobalFilter, Ordered &#123;    @Override    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;        String token &#x3D; exchange.getRequest().getQueryParams().getFirst(&quot;token&quot;);        if (token &#x3D;&#x3D; null || token.isEmpty()) &#123;            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);            return exchange.getResponse().setComplete();        &#125;        return chain.filter(exchange);    &#125;    @Override    public int getOrder() &#123;        return -100;    &#125;&#125;</code></pre><p>然后在 Spring Config 中配置这个 Bean</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">TokenFilter</span> <span class="token function">tokenFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TokenFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>重启应用就能看到效果了</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">2018</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">08</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">06.528</span> DEBUG <span class="token number">87751</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ctor<span class="token operator">-</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>c<span class="token punctuation">.</span>g<span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token class-name">RoutePredicateHandlerMapping</span>   <span class="token operator">:</span> <span class="token class-name">Mapping</span> <span class="token punctuation">[</span><span class="token class-name">Exchange</span><span class="token operator">:</span> GET http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">10000</span><span class="token operator">/</span>customer<span class="token operator">/</span>hello<span class="token operator">/</span>yibo<span class="token operator">?</span>token<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">]</span> <span class="token keyword">to</span> <span class="token class-name">Route</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token string">'service_customer'</span><span class="token punctuation">,</span> uri<span class="token operator">=</span>lb<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>CONSUMER<span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> predicate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>predicate<span class="token punctuation">.</span><span class="token class-name">PathRoutePredicateFactory</span>$$<span class="token class-name">Lambda</span>$<span class="token number">334</span><span class="token operator">/</span><span class="token number">1871259950</span><span class="token annotation punctuation">@2aa090be</span><span class="token punctuation">,</span> gatewayFilters<span class="token operator">=</span><span class="token punctuation">[</span><span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>factory<span class="token punctuation">.</span><span class="token class-name">StripPrefixGatewayFilterFactory</span>$$<span class="token class-name">Lambda</span>$<span class="token number">337</span><span class="token operator">/</span><span class="token number">577037372</span><span class="token annotation punctuation">@22e84be7</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>factory<span class="token punctuation">.</span><span class="token class-name">AddResponseHeaderGatewayFilterFactory</span>$$<span class="token class-name">Lambda</span>$<span class="token number">339</span><span class="token operator">/</span><span class="token number">1061806694</span><span class="token annotation punctuation">@1715f608</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">2018</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">08</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">06.530</span> DEBUG <span class="token number">87751</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ctor<span class="token operator">-</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>c<span class="token punctuation">.</span>g<span class="token punctuation">.</span>handler<span class="token punctuation">.</span><span class="token class-name">FilteringWebHandler</span>      <span class="token operator">:</span> <span class="token class-name">Sorted</span> gatewayFilterFactories<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>com<span class="token punctuation">.</span>yibo<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">TokenFilter</span><span class="token annotation punctuation">@309028af</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">NettyWriteResponseFilter</span><span class="token annotation punctuation">@70e889e9</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>factory<span class="token punctuation">.</span><span class="token class-name">StripPrefixGatewayFilterFactory</span>$$<span class="token class-name">Lambda</span>$<span class="token number">337</span><span class="token operator">/</span><span class="token number">577037372</span><span class="token annotation punctuation">@22e84be7</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>factory<span class="token punctuation">.</span><span class="token class-name">AddResponseHeaderGatewayFilterFactory</span>$$<span class="token class-name">Lambda</span>$<span class="token number">339</span><span class="token operator">/</span><span class="token number">1061806694</span><span class="token annotation punctuation">@1715f608</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">RouteToRequestUrlFilter</span><span class="token annotation punctuation">@51351f28</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">LoadBalancerClientFilter</span><span class="token annotation punctuation">@724c5cbe</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">10100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">AdaptCachedBodyGlobalFilter</span><span class="token annotation punctuation">@418c020b</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2147483637</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">WebsocketRoutingFilter</span><span class="token annotation punctuation">@15f2eda3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2147483646</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">NettyRoutingFilter</span><span class="token annotation punctuation">@70101687</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2147483647</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">ForwardRoutingFilter</span><span class="token annotation punctuation">@21618fa7</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2147483647</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token class-name">Copy</span></code></pre><blockquote><p>官方说，未来的版本将对这个接口作出一些调整：<br>This interface and usage are subject to change in future milestones.<br>from <a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.0.0.RC1/single/spring-cloud-gateway.html#_global_filters">Spring Cloud Gateway - Global Filters</a></p></blockquote><h2 id="自定义过滤器工厂"><a href="#自定义过滤器工厂" class="headerlink" title="自定义过滤器工厂"></a>自定义过滤器工厂</h2><p>如果你还对上一篇关于路由的文章有印象，你应该还得我们在配置中有这么一段</p><pre class="language-none"><code class="language-none">filters:  - StripPrefix&#x3D;1  - AddResponseHeader&#x3D;X-Response-Default-Foo, Default-BarCopy</code></pre><p><code>StripPrefix</code>、<code>AddResponseHeader</code>这两个实际上是两个过滤器工厂（GatewayFilterFactory），用这种配置的方式更灵活方便。</p><p>我们就将之前的那个<code>ElapsedFilter</code>改造一下，让它能接收一个<code>boolean</code>类型的参数，来决定是否将请求参数也打印出来。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">LogFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GatewayFilter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">AbstractGatewayFilterFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElapsedGatewayFilterFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractGatewayFilterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ElapsedGatewayFilterFactory</span><span class="token punctuation">.</span><span class="token class-name">Config</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">GatewayFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ELAPSED_TIME_BEGIN <span class="token operator">=</span> <span class="token string">"elapsedTimeBegin"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> KEY <span class="token operator">=</span> <span class="token string">"withParams"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">shortcutFieldOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ElapsedGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">GatewayFilter</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ELAPSED_TIME_BEGIN<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>                    <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">fromRunnable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Long</span> startTime <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>ELAPSED_TIME_BEGIN<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>startTime <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRawPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>                                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span>                                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isWithParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" params:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> withParams<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isWithParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> withParams<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWithParams</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> withParams<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>withParams <span class="token operator">=</span> withParams<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>过滤器工厂的顶级接口是<code>GatewayFilterFactory</code>，我们可以直接继承它的两个抽象类来简化开发<code>AbstractGatewayFilterFactory</code>和<code>AbstractNameValueGatewayFilterFactory</code>，这两个抽象类的区别就是前者接收一个参数（像<code>StripPrefix</code>和我们创建的这种），后者接收两个参数（像<code>AddResponseHeader</code>）。</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr4w5hwis7j30kx09v3zj.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr4w5hwis7j30kx09v3zj.jpg" alt="img"></a></p><p><code>GatewayFilter apply(Config config)</code>方法内部实际上是创建了一个<code>GatewayFilter</code>的匿名类，具体实现和之前的几乎一样，就不解释了。</p><p>静态内部类<code>Config</code>就是为了接收那个<code>boolean</code>类型的参数服务的，里边的变量名可以随意写，但是要重写<code>List&lt;String&gt; shortcutFieldOrder()</code>这个方法。</p><p>这里注意一下，一定要调用一下父类的构造器把<code>Config</code>类型传过去，否则会报<code>ClassCastException</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ElapsedGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>工厂类我们有了，再把它注册到 Spring 当中</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ElapsedGatewayFilterFactory</span> <span class="token function">elapsedGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ElapsedGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>然后添加配置（主要改动在第 8 行）</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">default-filters</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> Elapsed=true      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> service_customer          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//CONSUMER          <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">0</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/customer/<span class="token important">**</span>          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> StripPrefix=1            <span class="token punctuation">-</span> AddResponseHeader=X<span class="token punctuation">-</span>Response<span class="token punctuation">-</span>Default<span class="token punctuation">-</span>Foo<span class="token punctuation">,</span> Default<span class="token punctuation">-</span>Bar</code></pre><p>然后我们再次访问 <a href="http://localhost:10000/customer/hello/yibo?token=1000">http://localhost:10000/customer/hello/yibo?token=1000</a> 即可在控制台看到以下内容</p><pre class="language-none"><code class="language-none">2018-05-08 16:53:02.030  INFO 84423 --- [ctor-http-nio-1] o.s.cloud.gateway.filter.GatewayFilter   : &#x2F;hello&#x2F;yibo: 656ms params:&#123;token&#x3D;[1000]&#125;</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要介绍了 Spring Cloud Gateway 的过滤器，我们实现了自定义局部过滤器、自定义全局过滤器和自定义过滤器工厂，相信大家对 Spring Cloud Gateway 的过滤器有了一定的了解。之后我们将继续在过滤器的基础上研究 如何使用 Spring Cloud Gateway 实现限流和 fallback。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.haoyizebo.com/posts/1e919f7d/">https://www.haoyizebo.com/posts/1e919f7d/</a></p><p><a href="https://blog.csdn.net/forezp/article/details/85057268">https://blog.csdn.net/forezp/article/details/85057268</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Spring Cloud Gateway 已经内置了很多实用的过滤器，但并不能完全满足我们的需求。本文我们就来实现自定义过滤器。虽然现在 Spring Cloud Gateway 的文档还不完善，但是我们依旧可以照猫画虎来定制自己的过滤器。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringCloudGateway基本操作-断言</title>
    <link href="http://wumuwumu.github.io/2021/01/25/java/SpringCloud/SpringCloudGateway%E5%AD%A6%E4%B9%A02-%E6%96%AD%E8%A8%80/"/>
    <id>http://wumuwumu.github.io/2021/01/25/java/SpringCloud/SpringCloudGateway%E5%AD%A6%E4%B9%A02-%E6%96%AD%E8%A8%80/</id>
    <published>2021-01-25T07:00:00.000Z</published>
    <updated>2021-01-25T08:31:25.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev    <span class="token comment">################################################################spring cloud gateway##############################################################</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>              <span class="token comment">#当访问http://网关地址/服务名称（大写）/**地址会自动转发到http://服务名称（大写）/**地址，如果为false就不会自动转发</span>          <span class="token key atrule">lowerCaseServiceId</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment">#为true表示服务名称（小写）</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>payment  <span class="token comment">#路由id，需要全局统一，建议使用对应的spring.application.name</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8001</span>  <span class="token comment">#路由到对应服务的地址</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/service/<span class="token important">**/*</span>      <span class="token comment">#断言，匹配规则，ant匹配</span>        <span class="token comment">############################################################</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>payment2  <span class="token comment">#路由id，需要全局统一，建议使用对应的spring.application.name</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8002</span>  <span class="token comment">#路由到对应服务的地址</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/service/<span class="token important">**/*</span>      <span class="token comment">#断言，匹配规则，ant匹配</span></code></pre><h2 id="JavaBean配置"><a href="#JavaBean配置" class="headerlink" title="JavaBean配置"></a>JavaBean配置</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemogatewayApplication</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"path_route"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"host_route"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token string">"*.myhost.org"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"rewrite_route"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token string">"*.rewrite.org"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">rewritePath</span><span class="token punctuation">(</span><span class="token string">"/foo/(?&lt;segment>.*)"</span><span class="token punctuation">,</span> <span class="token string">"/$&#123;segment&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"hystrix_route"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token string">"*.hystrix.org"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">hystrix</span><span class="token punctuation">(</span>c <span class="token operator">-></span> c<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"slowcmd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"hystrix_fallback_route"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token string">"*.hystrixfallback.org"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">hystrix</span><span class="token punctuation">(</span>c <span class="token operator">-></span> c<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"slowcmd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFallbackUri</span><span class="token punctuation">(</span><span class="token string">"forward:/hystrixfallback"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"limit_route"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token string">"*.limited.org"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/anything/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">requestRateLimiter</span><span class="token punctuation">(</span>c <span class="token operator">-></span> c<span class="token punctuation">.</span><span class="token function">setRateLimiter</span><span class="token punctuation">(</span><span class="token function">redisRateLimiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="自定义路由Predicate-断言"><a href="#自定义路由Predicate-断言" class="headerlink" title="自定义路由Predicate 断言"></a>自定义路由Predicate 断言</h4><p>在<code>spring-cloud-gateway</code>的官方文档中没有给出自定义Predicate ,只留下一句<code>TODO: document writing Custom Route Predicate Factories</code></p><h5 id="创建RoutePredicateFactory"><a href="#创建RoutePredicateFactory" class="headerlink" title="创建RoutePredicateFactory"></a>创建RoutePredicateFactory</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author WXY */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenRoutePredicateFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRoutePredicateFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TokenRoutePredicateFactory</span><span class="token punctuation">.</span><span class="token class-name">Config</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DATETIME_KEY <span class="token operator">=</span> <span class="token string">"headerName"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TokenRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">shortcutFieldOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>DATETIME_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerWebExchange</span><span class="token punctuation">></span></span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"TokenRoutePredicateFactory Start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> exchange <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">//判断header里有放token</span>            <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> header <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getHeaderName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Token Predicate headers:&#123;&#125;"</span><span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> header<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * 传输token header key         */</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> headerName<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHeaderName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> headerName<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeaderName</span><span class="token punctuation">(</span><span class="token class-name">String</span> headerName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>headerName <span class="token operator">=</span> headerName<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>继承<code>AbstractRoutePredicateFactory&lt;C&gt;</code>主要实现其中的两个方法</p><p><code>shortcutFieldOrder()</code>-Config对应的字段</p><p><code>Predicate&lt;ServerWebExchange&gt; apply(Config config)</code>-具体的逻辑</p><p>还有就是构造方法传入用来装配置的类程序会自动把配置的<code>value</code>传入<code>apply</code>中的入参</p><h5 id="初始化RoutePredicateFactory为bean"><a href="#初始化RoutePredicateFactory为bean" class="headerlink" title="初始化RoutePredicateFactory为bean"></a>初始化RoutePredicateFactory为bean</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token comment">/** * @author WXY * */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoutesConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">TokenRoutePredicateFactory</span> <span class="token function">initTokenRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TokenRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>或者直接在<code>TokenRoutePredicateFactory</code>类上加<code>@Component</code>也行</p><h4 id="配置自定义的Predicate"><a href="#配置自定义的Predicate" class="headerlink" title="配置自定义的Predicate"></a>配置自定义的Predicate</h4><h5 id="使用属性文件配置自定义Predicate"><a href="#使用属性文件配置自定义Predicate" class="headerlink" title="使用属性文件配置自定义Predicate"></a>使用属性文件配置自定义Predicate</h5><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.cloud.gateway.routes[1].predicates[1]</span><span class="token punctuation">=</span><span class="token attr-value">Token=Authorization</span></code></pre><p>其中<code>Toekn</code>为命名<code>RoutePredicateFactory</code>时的前面部分，所以在定义<code>RoutePredicateFactory</code>时类名必须后缀为<code>RoutePredicateFactory</code>,否则找不到自定义的<code>Predicate</code></p><h5 id="使用代码配置"><a href="#使用代码配置" class="headerlink" title="使用代码配置"></a>使用代码配置</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author WXY * */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoutesConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 代码配置路由     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>predicateSpec <span class="token operator">-></span>                predicateSpec<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/order/**"</span><span class="token punctuation">)</span>                     <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asyncPredicate</span><span class="token punctuation">(</span><span class="token function">initTokenRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">applyAsync</span><span class="token punctuation">(</span>config <span class="token operator">-></span> config<span class="token punctuation">.</span><span class="token function">setHeaderName</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                     <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"lb://order-service"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"order-service"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">TokenRoutePredicateFactory</span> <span class="token function">initTokenRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TokenRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>使用代码配置自定义Predicate，主要使用<code>asyncPredicate</code>方法，把所需的自定义<code>RoutePredicateFactory</code>对象传进去配置<code>applyAsync</code>方法传入配置的属性。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://my.oschina.net/zhousc1992/blog/3194740">https://my.oschina.net/zhousc1992/blog/3194740</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本配置&quot;&gt;&lt;a href=&quot;#基本配置&quot; class=&quot;headerlink&quot; title=&quot;基本配置&quot;&gt;&lt;/a&gt;基本配置&lt;/h1&gt;&lt;h2 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; class=&quot;headerlink&quot; title=&quot;配置文件&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>maven生成Manifest文件</title>
    <link href="http://wumuwumu.github.io/2021/01/22/java/maven%E7%94%9F%E6%88%90Manifest%E6%96%87%E4%BB%B6/"/>
    <id>http://wumuwumu.github.io/2021/01/22/java/maven%E7%94%9F%E6%88%90Manifest%E6%96%87%E4%BB%B6/</id>
    <published>2021-01-22T10:00:00.000Z</published>
    <updated>2021-01-23T02:35:30.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="maven-jar-plugin常用"><a href="#maven-jar-plugin常用" class="headerlink" title="maven-jar-plugin常用"></a>maven-jar-plugin常用</h1><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-jar-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestFile</span><span class="token punctuation">></span></span>$&#123;project.build.outputDirectory&#125;/META-INF/MANIFEST.MF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestFile</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        ...      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><h1 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h1><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addMavenDescriptor</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compress</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>forced</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>index</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pomPropertiesFile</span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestFile</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addClasspath</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addDefaultEntries</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addDefaultImplementationEntries</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addDefaultSpecificationEntries</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addBuildEnvironmentEntries</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addExtensions</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classpathLayoutType</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classpathPrefix</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>customClasspathLayout</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packageName</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>useUniqueVersions</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestEntries</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>value<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestEntries</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestSections</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestSection</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestEntries</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>value<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestEntries</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestSection</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestSections</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">></span></span></code></pre><h2 id="存档"><a href="#存档" class="headerlink" title="存档"></a>存档</h2><table><thead><tr><th>元素</th><th>描述</th><th>类型</th><th>自</th></tr></thead><tbody><tr><td>addMavenDescriptor</td><td>创建的归档文件是否包含这两个Maven文件: 1. pom 文件, 位于归档文件中 META-INF/maven/g r o u p I d / {groupId}/<em>g<strong>r</strong>o<strong>u</strong>p<strong>I</strong>d</em>/{artifactId}/pom.xml 2. pom.properties 文件, 位于归档文件中 META-INF/maven/g r o u p I d / {groupId}/<em>g<strong>r</strong>o<strong>u</strong>p<strong>I</strong>d</em>/{artifactId}/pom.properties 默认值为true。</td><td>boolean</td><td></td></tr><tr><td>compress</td><td>为存档激活压缩。默认值为true。</td><td>boolean</td><td></td></tr><tr><td>forced</td><td>是否强制重新创建存档(默认情况下)。将此选项设置为false，意味着归档程序应该将所包含文件的时间戳与目标归档的时间戳进行比较，并仅在后一个时间戳先于前一个时间戳的情况下重新构建归档。检查时间戳通常会提高性能(特别是，如果可以取消构建中的以下步骤，如果没有重新创建归档)，而不考虑您不时得到不准确结果的成本。特别是，不会检测到源文件的删除。 归档器不一定支持最新的检查。如果是，将该选项设置为true将被忽略。 默认值为true。</td><td>boolean</td><td>2.2</td></tr><tr><td>index</td><td>创建的存档是否包含 INDEX.LIST 文件。默认值为false。</td><td>boolean</td><td></td></tr><tr><td>pomPropertiesFile</td><td>使用它来覆盖自动创建的 <a href="https://maven.apache.org/shared/maven-archiver/#pom-properties-content">pom.properties</a> 文件(仅当addMavenDescriptor被设置为true时)</td><td>File</td><td>2.3</td></tr><tr><td>manifestFile</td><td>有了它，您可以提供自己的清单文件。</td><td>File</td><td></td></tr><tr><td><a href="https://maven.apache.org/shared/maven-archiver/#class_manifest">manifest</a></td><td></td><td></td><td></td></tr><tr><td>manifestEntries</td><td>要添加到清单中的键/值对列表。</td><td>Map</td><td></td></tr><tr><td><a href="https://maven.apache.org/shared/maven-archiver/#class_manifestSection">manifestSections</a></td><td></td><td></td><td></td></tr></tbody></table><h2 id="pom-properties-内容"><a href="#pom-properties-内容" class="headerlink" title="pom.properties 内容"></a>pom.properties 内容</h2><p>自动创建 pom.properties 文件将包含以下内容：</p><pre class="language-xml" data-language="xml"><code class="language-xml">artifactId=$&#123;project.artifactId&#125;groupId=$&#123;project.groupId&#125;version=$&#123;project.version&#125;</code></pre><h2 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a>manifest</h2><table><thead><tr><th>元素</th><th>描述</th><th>类型</th><th>自</th></tr></thead><tbody><tr><td>addClasspath</td><td>是否创建 Class-Path 清单项。默认值为false。</td><td>boolean</td><td></td></tr><tr><td>addDefaultEntries</td><td>如果清单将包含以下条目:</td><td>boolean</td><td>3.4.0</td></tr><tr><td>addDefaultImplementationEntries</td><td></td><td></td><td></td></tr><tr><td>addDefaultSpecificationEntries</td><td></td><td></td><td></td></tr><tr><td>addBuildEnvironmentEntries</td><td></td><td></td><td></td></tr><tr><td>addExtensions</td><td></td><td></td><td></td></tr><tr><td>classpathLayoutType</td><td>格式化创建的 Class-Path 中的条目时要使用的布局类型。有效值是:simple、repository(与Maven类路径布局相同)和custom。 注意:如果指定 custom 类型，还必须设置 customClasspathLayout。默认值很简单。</td><td></td><td></td></tr><tr><td>classpathPrefix</td><td>将作为所有Class-Path条目前缀的文本。默认值为“”</td><td></td><td></td></tr><tr><td>customClasspathLayout</td><td>。</td><td></td><td></td></tr><tr><td>mainClass</td><td>Main-Class清单条目</td><td>String</td><td></td></tr></tbody></table><h3 id="manifestSection"><a href="#manifestSection" class="headerlink" title="manifestSection"></a>manifestSection</h3><table><thead><tr><th align="left">Element</th><th align="left">Description</th><th align="left">Type</th><th align="left">Since</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">The name of the section.</td><td align="left">String</td><td align="left"></td></tr><tr><td align="left">manifestEntries</td><td align="left">A list of key/value pairs to add to the manifest.</td><td align="left">Map</td><td align="left"></td></tr></tbody></table><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://maven.apache.org/shared/maven-archiver/examples/classpath.html">https://maven.apache.org/shared/maven-archiver/examples/classpath.html</a></p><p><a href="https://maven.apache.org/shared/maven-archiver/">https://maven.apache.org/shared/maven-archiver/</a></p><p><a href="https://blog.csdn.net/ksdb0468473/article/details/110833520">https://blog.csdn.net/ksdb0468473/article/details/110833520</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;maven-jar-plugin常用&quot;&gt;&lt;a href=&quot;#maven-jar-plugin常用&quot; class=&quot;headerlink&quot; title=&quot;maven-jar-plugin常用&quot;&gt;&lt;/a&gt;maven-jar-plugin常用&lt;/h1&gt;&lt;pre clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java队列</title>
    <link href="http://wumuwumu.github.io/2021/01/21/java/%E9%98%9F%E5%88%97/"/>
    <id>http://wumuwumu.github.io/2021/01/21/java/%E9%98%9F%E5%88%97/</id>
    <published>2021-01-21T04:00:00.000Z</published>
    <updated>2021-01-22T10:51:48.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="队列的常用方法"><a href="#队列的常用方法" class="headerlink" title="队列的常用方法"></a>队列的常用方法</h1><ul><li><strong>add</strong>：增加一个元索 如果队列已满，则抛出一个IIIegaISlabEepeplian异常。</li><li><strong>element</strong>：返回队列头部的元素 如果队列为空，则抛出一个NoSuchElementException异常 。</li><li><strong>remove</strong>： 移除并返回队列头部的元素 如果队列为空，则抛出一个NoSuchElementException异常。</li><li><strong>offer</strong>：添加一个元素并返回true 如果队列已满，则返回false。</li><li><strong>poll</strong>：移除并返问队列头部的元素 如果队列为空，则返回null。</li><li><strong>peek</strong>：返回队列头部的元素 如果队列为空，则返回null。</li><li><strong>put</strong>：添加一个元素 如果队列满，则阻塞。</li><li><strong>take</strong>：移除并返回队列头部的元素 如果队列为空，则阻塞</li></ul><h1 id="常用的队列"><a href="#常用的队列" class="headerlink" title="常用的队列"></a>常用的队列</h1><h2 id="没有实现阻塞接口"><a href="#没有实现阻塞接口" class="headerlink" title="没有实现阻塞接口"></a>没有实现阻塞接口</h2><ol><li>LinkList</li><li>PriorityQueue</li><li>ConcurrentLinkedQueue</li></ol><h2 id="实现阻塞接口"><a href="#实现阻塞接口" class="headerlink" title="实现阻塞接口"></a>实现阻塞接口</h2><ol><li>ArrayBlockingQueue</li><li>LinkedBlockingQueue</li><li>PriorityBlockingQueue</li><li>DelayQueue</li></ol><h1 id="双向队列"><a href="#双向队列" class="headerlink" title="双向队列"></a>双向队列</h1><table><thead><tr><th>类</th><th>描述</th></tr></thead><tbody><tr><td>AbstractDueue</td><td>此类提供某些 Queue 方法的骨干实现，为其它类集合的实现提供方便</td></tr><tr><td>PriorityQueue</td><td>一个基于优先级堆的无界优先级队列。优先级队列的元素按照其自然顺序进行排序，或者根据构造队列时提供的 Comparator 进行排序，具体取决于所使用的构造方法</td></tr><tr><td>ArrayDeque</td><td>双端队列的一个数组实现， 数组双端队列没有容量限制；它们可根据需要增加以支持使用</td></tr><tr><td>LinkedLis</td><td>通过继承 AbstractSequentialList 来实现链接列表</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;队列的常用方法&quot;&gt;&lt;a href=&quot;#队列的常用方法&quot; class=&quot;headerlink&quot; title=&quot;队列的常用方法&quot;&gt;&lt;/a&gt;队列的常用方法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;add&lt;/strong&gt;：增加一个元索 如果队列已满，则抛出一个IIIe</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java创建自定义名称线程工厂</title>
    <link href="http://wumuwumu.github.io/2021/01/21/java/java%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%8D%E7%A7%B0%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%8E%82/"/>
    <id>http://wumuwumu.github.io/2021/01/21/java/java%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%8D%E7%A7%B0%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%8E%82/</id>
    <published>2021-01-21T02:31:35.000Z</published>
    <updated>2021-01-21T10:34:56.925Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ThreadFactoryBuilder"><a href="#ThreadFactoryBuilder" class="headerlink" title="ThreadFactoryBuilder"></a><code>ThreadFactoryBuilder</code></h3><p>Google guava 工具类 提供的 <code>ThreadFactoryBuilder</code> ,使用链式方法创建。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ThreadFactory</span> guavaThreadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"retryClient-pool-"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">ExecutorService</span> exec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>         <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>         <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>guavaThreadFactory <span class="token punctuation">)</span><span class="token punctuation">;</span> exec<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>     logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"--记忆中的颜色是什么颜色---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="自定义ThreadFactory"><a href="#自定义ThreadFactory" class="headerlink" title="自定义ThreadFactory"></a>自定义<code>ThreadFactory</code></h1><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MssThreadFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ThreadFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> threadNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> namePrefix<span class="token punctuation">;</span>    <span class="token class-name">MssThreadFactory</span><span class="token punctuation">(</span><span class="token class-name">String</span> namePrefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>namePrefix <span class="token operator">=</span> namePrefix<span class="token operator">+</span><span class="token string">"-"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span> r<span class="token punctuation">,</span>namePrefix <span class="token operator">+</span> threadNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            t<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span>            t<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="BasicThreadFactory"><a href="#BasicThreadFactory" class="headerlink" title="BasicThreadFactory"></a><code>BasicThreadFactory</code></h1><p>Apache commons-lang3 提供的 <code>BasicThreadFactory</code>.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ThreadFactory</span> basicThreadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicThreadFactory</span><span class="token punctuation">.</span><span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">namingPattern</span><span class="token punctuation">(</span><span class="token string">"basicThreadFactory-"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ExecutorService</span> exec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>basicThreadFactory <span class="token punctuation">)</span><span class="token punctuation">;</span>exec<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"--记忆中的颜色是什么颜色---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ThreadFactoryBuilder&quot;&gt;&lt;a href=&quot;#ThreadFactoryBuilder&quot; class=&quot;headerlink&quot; title=&quot;ThreadFactoryBuilder&quot;&gt;&lt;/a&gt;&lt;code&gt;ThreadFactoryBuilder</summary>
      
    
    
    
    
    <category term="java" scheme="http://wumuwumu.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Mqtt5协议新特性</title>
    <link href="http://wumuwumu.github.io/2021/01/18/java/Mqtt5%E5%8D%8F%E8%AE%AE%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://wumuwumu.github.io/2021/01/18/java/Mqtt5%E5%8D%8F%E8%AE%AE%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2021-01-18T04:00:00.000Z</published>
    <updated>2021-01-20T10:14:50.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>首先，协议上，增加了一个 <code>Property</code>字段，正是这个字段，使得 MQTT 5.0 可以支持众多的新特性。而在MQTT 3.1.1中，MQTT没有任何可以拓展的地方，限制了MQTT拓展功能的可能性。</p><h2 id="request-response-模式"><a href="#request-response-模式" class="headerlink" title="request/response 模式"></a>request/response 模式</h2><p>MQTT 本身是 订阅/推送 模式，不像HTTP那样 请求/响应 模式。那么MQTT是如何在 订阅/推送 模式下支持 request/response 模式呢？<br>这里简单翻译了 <code>http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.html#_Request_/_Response</code> 中举例的场景：</p><p>（1）A publish 一个消息，消息topic假设是”topicA”，该消息 通过<code>Property</code>携带了<code>Response Topic</code>，假设该字段是”topicresponse”。<br>（2）订阅了”topicA”的接收端B（有可能有多个）收到了该消息。<br>（3）B处理完”topicA”后，会publish 一个 topic 名字是 “topicresponse” 的消息。该消息有可能是A订阅的，也有可能是其他人订阅的。<br>（4）A publish 的消息，可能还会携带<code>Correlation Data</code>属性，假设其值是”msgresponse”，这样B发publish的消息就是(“topicresponse”, “msgresponse”)。</p><h2 id="Server-redirection"><a href="#Server-redirection" class="headerlink" title="Server redirection"></a>Server redirection</h2><p>Server可以发送 <code>CONNACK</code> 或者 <code>DISCONNECT</code>，其 <code>Reason Codes</code> 可以是0x9c或者0x9d，表示Client需要往另一个Server发送请求。<br>0x9C 类似 HTTP 的 302, 0x9d 类似 HTTP的 301。<br><code>CONNACK</code> 或者 <code>DISCONNECT</code> 可以通过 <code>Property</code>携带<code>Server redirection</code>，其值可以告诉Client往哪个Server发送请求，类似HTTP的”Location”首部。</p><h2 id="AUTH控制报文"><a href="#AUTH控制报文" class="headerlink" title="AUTH控制报文"></a>AUTH控制报文</h2><p>MQTT 单纯通过 <code>CONNECT</code>可能无法提供足够的信息给Server进行身份认证，所以 Server 在收到 MQTT 的 <code>CONNECT</code> 后，回复 AUTH控制报文给Client，Client接着也用 <code>AUTH</code>包发送附加信息，Server直到 认证完成后，才会发送 <code>CONNACK</code>。</p><h2 id="Topic-Alias"><a href="#Topic-Alias" class="headerlink" title="Topic Alias"></a>Topic Alias</h2><p>类似<code>HTTP2</code>的头部压缩效果，当然，没有同<code>HPACK</code>那么复杂的东西。</p><p>我们知道，<code>PUBLISH</code>消息的时候，需要携带 topic和message，其中topic往往是固定的，那么我们只需要第一次发送完整的 topic，并且通过<code>Property</code>中携带<code>Topic Alias</code>告知对端下次这个PUBLISH的topic会使用<code>Topic Alias</code>中的值代替，<code>Topic Alias</code>的值是一个<code>整数</code>类型的值。</p><p>client 通过 <code>CONNECT</code> 中 <code>Topic Alias Maximum</code> 告知 Server自己能处理的最多的 <code>Topic Alias</code> 个数。<br>Server 通过 <code>CONNACK</code>中 <code>Topic Alias Maximum</code> 告知 Client自己能处理的最多的 <code>Topic Alias</code> 个数。</p><p>如果当前PUBLISH消息的topic长度不为0，那么接受方需要解析 <code>Topic Alias</code> 中的值，并且 将topic和该值进行映射。<br>如果当前PUBLISH消息的topic为0，那么接受方需要解析 <code>Topic Alias</code> 中的值，用该值去查找对应的topic。</p><h2 id="User-Property"><a href="#User-Property" class="headerlink" title="User Property"></a>User Property</h2><p>自定义属性，可以添加两端约定的数据。例如可以加入类似HTTP的 “Header:value”信息。MQTT本身没有类似HTTP的HOST信息，我们可以使用<code>User Property</code>特性让MQTT支持。</p><h2 id="Session-Expiry-Interval"><a href="#Session-Expiry-Interval" class="headerlink" title="Session Expiry Interval"></a>Session Expiry Interval</h2><p>之前的MQTT版本，当cleansession为0时，server和client会尝试保存session信息（sub信息、PUBLISH状态等），但是有个问题，server 不知道需要保存这个session多久。MQTT 5.0 就 在 <code>Property</code>字段中增加了<code>Session Expiry Interval</code>属性来告知server这个session希望被保存多久。</p><p>如果MQTT 5.0 不携带 <code>Session Expiry Interval</code>或者 <code>Session Expiry Interval</code>设置为0，server和client则不会保存session信息。<br>如果<code>Session Expiry Interval</code>设置为0xffffffff，则表示session永远不会老化。</p><p>当然，这个字段是需要配合<code>Clean Start</code>使用的，如果<code>Clean Start</code>为1，那么 <code>Session Expiry Interval</code>设置多大都无意义。</p><p>CONNECT、CONNACK、DISCONNECT都会发送 <code>Session Expiry Interval</code>字段。<code>DISCONNECT</code>中携带该字段可以告知Server更新老化时间。<br>CONNACK中的<code>Session Expiry Interval</code>只有当CONNECT不携带该字段时才有用，当client携带该字段，server发送该字段只是表明自己最大的老化时间，不会强制client必须按照这个值。</p><h2 id="Maximum-QoS"><a href="#Maximum-QoS" class="headerlink" title="Maximum QoS"></a>Maximum QoS</h2><p>Server 可以发送 <code>Maximum QoS</code>属性告知Client自己支持最大的Qos是多少，Client发送的PUBLISH的Qos必然不能大于该值。</p><h2 id="Receive-Maximum"><a href="#Receive-Maximum" class="headerlink" title="Receive Maximum"></a>Receive Maximum</h2><p>告知对方自己希望处理<code>未决</code>的最大的 Qos1 或者 Qos2 PUBLISH消息个数，如果不存在，则默认是65535。<br>作用：流控。<br>因为当处理 Qos &gt; 0 的PUBLISH的时候，需要回复对端PUBACK、PUBREC PUBCOMP等。<code>Receive Maximum</code>属性提供了告诉对端发送Qos&gt;0的PUBLISH的速率，对端发现未决PUBLISH个数等于<code>Receive Maximum</code>时，不能再发送Qos &gt; 0 的PUBLISH消息了。</p><h2 id="Maximum-Packet-Size"><a href="#Maximum-Packet-Size" class="headerlink" title="Maximum Packet Size"></a>Maximum Packet Size</h2><p>顾名思义，单个 MQTT控制报文 的大小，如果不携带，表示不限制。<br>这个大小指整个 MQTT控制报文 的大小。对端如果发现将发送的包大于该大小，就默默丢弃，不关闭连接。如果自己收到超过自己通告的<code>Maximum Packet Size</code>需要关闭连接。</p><h2 id="Topic-Alias-Maximum"><a href="#Topic-Alias-Maximum" class="headerlink" title="Topic Alias Maximum"></a>Topic Alias Maximum</h2><p>作用见上文<code>Topic Alias</code>。</p><h2 id="Reason-Code"><a href="#Reason-Code" class="headerlink" title="Reason Code"></a>Reason Code</h2><p>MQTT 3.1.1 只有CONNACK有是否成功还是失败的标志位，现在MQTT 5.0所有的ACK都有该标志位。具体各个ACK中code值得含义在规范中有定义，这里不再列举。<br>需要注意的是，SUBACK中，MQTT 3.1.1 的 <code>Granted Qos</code>被取代为<code>Reason Code</code>，<code>Reason Code</code>中有状态码表示了具体的<code>Granted Qos</code>。<br>如果PUBLISH是成功的，其ACK的的<code>Reason Code</code>可以不添加。</p><h2 id="Reason-String"><a href="#Reason-String" class="headerlink" title="Reason String"></a>Reason String</h2><p>所有的ACK以及DISCONNECT 都可以携带 <code>Reason String</code>属性告知对方一些特殊的信息，一般来说是ACK失败的情况下会使用该属性告知对端为什么失败，可用来弥补<code>Reason Code</code>信息不够。</p><h2 id="Clean-Start"><a href="#Clean-Start" class="headerlink" title="Clean Start"></a>Clean Start</h2><p><code>Clean Start</code>取代了 MQTT3.1.1 中 CleanSession，在协议格式上，直接占用了<code>CleanSession</code>原本的field，这也表示<code>Clean Start</code>语义上和 <code>CleanSession</code>是一样的。</p><h2 id="Payload-Format-Indicator"><a href="#Payload-Format-Indicator" class="headerlink" title="Payload Format Indicator"></a>Payload Format Indicator</h2><p>指定了PUBLISH 消息的message部分是utf8格式的还是二进制的，接收方必须验证payload是否是该属性定义的格式。<br><code>Payload Format Indicator</code> 为 0，表示 是二进制，和不携带该属性的语义是一样的。<br><code>Payload Format Indicator</code> 为 1，表示 是utf8编码数据。</p><h2 id="Message-Expiry-Interval"><a href="#Message-Expiry-Interval" class="headerlink" title="Message Expiry Interval"></a>Message Expiry Interval</h2><p>指定了PUBLISH数据在Server的最长等待时间。超过这个时间，这个数据不能被publish到匹配topic的subscriber</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.emqx.cn/mqtt/mqtt5">https://www.emqx.cn/mqtt/mqtt5</a></p><p><a href="https://blog.csdn.net/mrpre/article/details/87267400">https://blog.csdn.net/mrpre/article/details/87267400</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;格式&quot;&gt;&lt;a href=&quot;#格式&quot; class=&quot;headerlink&quot; title=&quot;格式&quot;&gt;&lt;/a&gt;格式&lt;/h2&gt;&lt;p&gt;首先，协议上，增加了一个 &lt;code&gt;Property&lt;/code&gt;字段，正是这个字段，使得 MQTT 5.0 可以支持众多的新特性。而在M</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq延迟队列</title>
    <link href="http://wumuwumu.github.io/2021/01/05/java/rabbitmq%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/"/>
    <id>http://wumuwumu.github.io/2021/01/05/java/rabbitmq%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/</id>
    <published>2021-01-05T04:00:00.000Z</published>
    <updated>2021-01-09T07:46:20.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>在上一篇中，介绍了RabbitMQ中的死信队列是什么，何时使用以及如何使用RabbitMQ的死信队列。相信通过上一篇的学习，对于死信队列已经有了更多的了解，这一篇的内容也跟死信队列息息相关，如果你还不了解死信队列，那么建议你先进行上一篇文章的阅读。</p><p>这一篇里，我们将继续介绍RabbitMQ的高级特性，通过本篇的学习，你将收获：</p><ol><li>什么是延时队列</li><li>延时队列使用场景</li><li>RabbitMQ中的TTL</li><li>如何利用RabbitMQ来实现延时队列</li></ol><h2 id="二、本文大纲"><a href="#二、本文大纲" class="headerlink" title="二、本文大纲"></a>二、本文大纲</h2><p>以下是本文大纲：</p><p><img src="https://i.loli.net/2019/07/28/5d3d74d99699d43032.png" alt="1.png"></p><p>本文阅读前，需要对RabbitMQ以及死信队列有一个简单的了解。</p><h2 id="三、什么是延时队列"><a href="#三、什么是延时队列" class="headerlink" title="三、什么是延时队列"></a>三、什么是延时队列</h2><p><code>延时队列</code>，首先，它是一种队列，队列意味着内部的元素是<code>有序</code>的，元素出队和入队是有方向性的，元素从一端进入，从另一端取出。</p><p>其次，<code>延时队列</code>，最重要的特性就体现在它的<code>延时</code>属性上，跟普通的队列不一样的是，<code>普通队列中的元素总是等着希望被早点取出处理，而延时队列中的元素则是希望被在指定时间得到取出和处理</code>，所以延时队列中的元素是都是带时间属性的，通常来说是需要被处理的消息或者任务。</p><p>简单来说，延时队列就是用来存放需要在指定时间被处理的元素的队列。</p><h2 id="四、延时队列使用场景"><a href="#四、延时队列使用场景" class="headerlink" title="四、延时队列使用场景"></a>四、延时队列使用场景</h2><p>那么什么时候需要用延时队列呢？考虑一下以下场景：</p><ol><li>订单在十分钟之内未支付则自动取消。</li><li>新创建的店铺，如果在十天内都没有上传过商品，则自动发送消息提醒。</li><li>账单在一周内未支付，则自动结算。</li><li>用户注册成功后，如果三天内没有登陆则进行短信提醒。</li><li>用户发起退款，如果三天内没有得到处理则通知相关运营人员。</li><li>预定会议后，需要在预定的时间点前十分钟通知各个与会人员参加会议。</li></ol><p>这些场景都有一个特点，需要在某个事件发生之后或者之前的指定时间点完成某一项任务，如：发生订单生成事件，在十分钟之后检查该订单支付状态，然后将未支付的订单进行关闭；发生店铺创建事件，十天后检查该店铺上新商品数，然后通知上新数为0的商户；发生账单生成事件，检查账单支付状态，然后自动结算未支付的账单；发生新用户注册事件，三天后检查新注册用户的活动数据，然后通知没有任何活动记录的用户；发生退款事件，在三天之后检查该订单是否已被处理，如仍未被处理，则发送消息给相关运营人员；发生预定会议事件，判断离会议开始是否只有十分钟了，如果是，则通知各个与会人员。</p><p>看起来似乎使用定时任务，一直轮询数据，每秒查一次，取出需要被处理的数据，然后处理不就完事了吗？如果数据量比较少，确实可以这样做，比如：对于“如果账单一周内未支付则进行自动结算”这样的需求，如果对于时间不是严格限制，而是宽松意义上的一周，那么每天晚上跑个定时任务检查一下所有未支付的账单，确实也是一个可行的方案。但对于数据量比较大，并且时效性较强的场景，如：“订单十分钟内未支付则关闭“，短期内未支付的订单数据可能会有很多，活动期间甚至会达到百万甚至千万级别，对这么庞大的数据量仍旧使用轮询的方式显然是不可取的，很可能在一秒内无法完成所有订单的检查，同时会给数据库带来很大压力，无法满足业务要求而且性能低下。</p><p>更重要的一点是，不！优！雅！</p><p>没错，作为一名有追求的程序员，始终应该追求更优雅的架构和更优雅的代码风格，写代码要像写诗一样优美。【滑稽】</p><p>这时候，延时队列就可以闪亮登场了，以上场景，正是延时队列的用武之地。</p><p>既然<code>延时队列</code>可以解决很多特定场景下，带时间属性的任务需求，那么如何构造一个延时队列呢？接下来，本文将介绍如何用RabbitMQ来实现延时队列。</p><h2 id="五、RabbitMQ中的TTL"><a href="#五、RabbitMQ中的TTL" class="headerlink" title="五、RabbitMQ中的TTL"></a>五、RabbitMQ中的TTL</h2><p>在介绍延时队列之前，还需要先介绍一下RabbitMQ中的一个高级特性——<code>TTL（Time To Live）</code>。</p><p><code>TTL</code>是什么呢？<code>TTL</code>是RabbitMQ中一个消息或者队列的属性，表明<code>一条消息或者该队列中的所有消息的最大存活时间</code>，单位是毫秒。换句话说，如果一条消息设置了TTL属性或者进入了设置TTL属性的队列，那么这条消息如果在TTL设置的时间内没有被消费，则会成为“死信”（至于什么是死信，请翻看上一篇）。如果同时配置了队列的TTL和消息的TTL，那么较小的那个值将会被使用。</p><p>那么，如何设置这个TTL值呢？有两种方式，第一种是在创建队列的时候设置队列的“x-message-ttl”属性，如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> durable<span class="token punctuation">,</span> exclusive<span class="token punctuation">,</span> autoDelete<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样所有被投递到该队列的消息都最多不会存活超过6s。</p><p>另一种方式便是针对每条消息设置TTL，代码如下：</p><pre class="language-java" data-language="java"><code class="language-java">AMQP<span class="token punctuation">.</span><span class="token class-name">BasicProperties</span><span class="token punctuation">.</span><span class="token class-name">Builder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> AMQP<span class="token punctuation">.</span><span class="token class-name">BasicProperties</span><span class="token punctuation">.</span><span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">expiration</span><span class="token punctuation">(</span><span class="token string">"6000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>AMQP<span class="token punctuation">.</span><span class="token class-name">BasicProperties</span> properties <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> routingKey<span class="token punctuation">,</span> mandatory<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> <span class="token string">"msg body"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样这条消息的过期时间也被设置成了6s。</p><p>但这两种方式是有区别的，<strong>如果设置了队列的TTL属性，那么一旦消息过期，就会被队列丢弃，而第二种方式，消息即使过期，也不一定会被马上丢弃，因为消息是否过期是在即将投递到消费者之前判定的，如果当前队列有严重的消息积压情况，则已过期的消息也许还能存活较长时间。</strong></p><p>另外，还需要注意的一点是，如果不设置TTL，表示消息永远不会过期，如果将TTL设置为0，则表示除非此时可以直接投递该消息到消费者，否则该消息将会被丢弃。</p><h2 id="六、如何利用RabbitMQ实现延时队列"><a href="#六、如何利用RabbitMQ实现延时队列" class="headerlink" title="六、如何利用RabbitMQ实现延时队列"></a>六、如何利用RabbitMQ实现延时队列</h2><p>前一篇里介绍了如果设置死信队列，前文中又介绍了TTL，至此，利用RabbitMQ实现延时队列的两大要素已经集齐，接下来只需要将它们进行调和，再加入一点点调味料，延时队列就可以新鲜出炉了。</p><p>想想看，<code>延时队列</code>，不就是想要消息延迟多久被处理吗，TTL则刚好能让消息在延迟多久之后成为死信，另一方面，成为死信的消息都会被投递到死信队列里，这样只需要消费者一直消费死信队列里的消息就万事大吉了，因为里面的消息都是希望被立即处理的消息。</p><p>从下图可以大致看出消息的流向：</p><p><img src="https://i.loli.net/2019/07/28/5d3d743143ecc85643.png" alt="23.png"></p><p>生产者生产一条延时消息，根据需要延时时间的不同，利用不同的routingkey将消息路由到不同的延时队列，每个队列都设置了不同的TTL属性，并绑定在同一个死信交换机中，消息过期后，根据routingkey的不同，又会被路由到不同的死信队列中，消费者只需要监听对应的死信队列进行处理即可。</p><p>下面来看代码：</p><p>先声明交换机、队列以及他们的绑定关系：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAY_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAY_QUEUEA_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.queuea"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAY_QUEUEA_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.queuea.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAY_QUEUEB_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.queueb.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEAD_LETTER_EXCHANGE <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEAD_LETTER_QUEUEA_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.delay_10s.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEAD_LETTER_QUEUEB_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.delay_60s.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEAD_LETTER_QUEUEA_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.queuea"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEAD_LETTER_QUEUEB_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.queueb"</span><span class="token punctuation">;</span>    <span class="token comment">// 声明延时Exchange</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"delayExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">delayExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DELAY_EXCHANGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明死信Exchange</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明延时队列A 延时10s</span>    <span class="token comment">// 并绑定到对应的死信交换机</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"delayQueueA"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">delayQueueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// x-dead-letter-exchange    这里声明当前队列绑定的死信交换机</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// x-dead-letter-routing-key  这里声明当前队列的死信路由key</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> DEAD_LETTER_QUEUEA_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// x-message-ttl  声明队列的TTL</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEA_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明延时队列B 延时 60s</span>    <span class="token comment">// 并绑定到对应的死信交换机</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"delayQueueB"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">delayQueueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// x-dead-letter-exchange    这里声明当前队列绑定的死信交换机</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// x-dead-letter-routing-key  这里声明当前队列的死信路由key</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> DEAD_LETTER_QUEUEB_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// x-message-ttl  声明队列的TTL</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEB_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明死信队列A 用于接收延时10s处理的消息</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueA"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">deadLetterQueueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEA_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明死信队列B 用于接收延时60s处理的消息</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueB"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">deadLetterQueueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEB_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明延时队列A绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">delayBindingA</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayQueueA"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span>                                    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayExchange"</span><span class="token punctuation">)</span> <span class="token class-name">DirectExchange</span> exchange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>DELAY_QUEUEA_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明业务队列B绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">delayBindingB</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayQueueB"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span>                                    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayExchange"</span><span class="token punctuation">)</span> <span class="token class-name">DirectExchange</span> exchange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>DELAY_QUEUEB_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明死信队列A绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">deadLetterBindingA</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueA"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span>                                    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span> <span class="token class-name">DirectExchange</span> exchange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEA_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明死信队列B绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">deadLetterBindingB</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueB"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span>                                      <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span> <span class="token class-name">DirectExchange</span> exchange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEB_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>接下来，创建两个消费者，分别对两个死信队列的消息进行消费：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLetterQueueConsumer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> DEAD_LETTER_QUEUEA_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveA</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：&#123;&#125;,死信队列A收到消息：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> DEAD_LETTER_QUEUEB_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveB</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：&#123;&#125;,死信队列B收到消息：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>然后是消息的生产者：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayMessageSender</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">DelayTypeEnum</span> type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token class-name">DELAY_10s</span><span class="token operator">:</span>                rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>DELAY_EXCHANGE_NAME<span class="token punctuation">,</span> DELAY_QUEUEA_ROUTING_KEY<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">DELAY_60s</span><span class="token operator">:</span>                rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>DELAY_EXCHANGE_NAME<span class="token punctuation">,</span> DELAY_QUEUEB_ROUTING_KEY<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>接下来，我们暴露一个web接口来生产消息：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"rabbitmq"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQMsgController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">DelayMessageSender</span> sender<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"sendmsg"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">Integer</span> delayType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：&#123;&#125;,收到请求，msg:&#123;&#125;,delayType:&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> delayType<span class="token punctuation">)</span><span class="token punctuation">;</span>        sender<span class="token punctuation">.</span><span class="token function">sendMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span><span class="token class-name">DelayTypeEnum</span><span class="token punctuation">.</span><span class="token function">getDelayTypeEnumByValue</span><span class="token punctuation">(</span>delayType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>准备就绪，启动！</p><p>打开rabbitMQ的<a href="http://localhost:15672/">管理后台</a>，可以看到我们刚才创建的交换机和队列信息：</p><p><img src="https://i.loli.net/2019/07/28/5d3d54e15534398514.png" alt="2.png"></p><p><img src="https://i.loli.net/2019/07/28/5d3d54e17df8183993.png" alt="4.png"></p><p><img src="https://i.loli.net/2019/07/28/5d3d54e16952546955.png" alt="3.png"></p><p>接下来，我们来发送几条消息，<a href="http://localhost:8080/rabbitmq/sendmsg?msg=testMsg1&amp;delayType=1">http://localhost:8080/rabbitmq/sendmsg?msg=testMsg1&amp;delayType=1</a> <a href="http://localhost:8080/rabbitmq/sendmsg?msg=testMsg2&amp;delayType=2">http://localhost:8080/rabbitmq/sendmsg?msg=testMsg2&amp;delayType=2</a></p><p>日志如下：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">2019<span class="token operator">-</span>07<span class="token operator">-</span>28 16:02:19<span class="token punctuation">.</span>813  INFO 3860 <span class="token operator">--</span><span class="token operator">-</span> <span class="token namespace">[nio-8080-exec-9]</span> c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>RabbitMQMsgController   : 当前时间：Sun Jul 28 16:02:19 CST 2019<span class="token punctuation">,</span>收到请求，msg:testMsg1<span class="token punctuation">,</span>delayType:12019<span class="token operator">-</span>07<span class="token operator">-</span>28 16:02:19<span class="token punctuation">.</span>815  INFO 3860 <span class="token operator">--</span><span class="token operator">-</span> <span class="token namespace">[nio-8080-exec-9]</span> <span class="token punctuation">.</span>l<span class="token punctuation">.</span>DirectReplyToMessageListenerContainer : SimpleConsumer <span class="token namespace">[queue=amq.rabbitmq.reply-to, consumerTag=amq.ctag-o-qPpkWIkRm73DIrOIVhig identity=766339]</span> started2019<span class="token operator">-</span>07<span class="token operator">-</span>28 16:02:25<span class="token punctuation">.</span>829  INFO 3860 <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ntContainer<span class="token comment">#1-1] c.m.d.mq.DeadLetterQueueConsumer         : 当前时间：Sun Jul 28 16:02:25 CST 2019,死信队列A收到消息：testMsg1</span>2019<span class="token operator">-</span>07<span class="token operator">-</span>28 16:02:41<span class="token punctuation">.</span>326  INFO 3860 <span class="token operator">--</span><span class="token operator">-</span> <span class="token namespace">[nio-8080-exec-1]</span> c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>RabbitMQMsgController   : 当前时间：Sun Jul 28 16:02:41 CST 2019<span class="token punctuation">,</span>收到请求，msg:testMsg2<span class="token punctuation">,</span>delayType:22019<span class="token operator">-</span>07<span class="token operator">-</span>28 16:03:41<span class="token punctuation">.</span>329  INFO 3860 <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ntContainer<span class="token comment">#0-1] c.m.d.mq.DeadLetterQueueConsumer         : 当前时间：Sun Jul 28 16:03:41 CST 2019,死信队列B收到消息：testMsg2</span></code></pre><p>第一条消息在6s后变成了死信消息，然后被消费者消费掉，第二条消息在60s之后变成了死信消息，然后被消费掉，这样，一个还算ok的延时队列就打造完成了。</p><p>不过，等等，如果这样使用的话，岂不是每增加一个新的时间需求，就要新增一个队列，这里只有6s和60s两个时间选项，如果需要一个小时后处理，那么就需要增加TTL为一个小时的队列，如果是预定会议室然后提前通知这样的场景，岂不是要增加无数个队列才能满足需求？？</p><p>嗯，仔细想想，事情并不简单。</p><h2 id="七、RabbitMQ延时队列优化"><a href="#七、RabbitMQ延时队列优化" class="headerlink" title="七、RabbitMQ延时队列优化"></a>七、RabbitMQ延时队列优化</h2><p>显然，需要一种更通用的方案才能满足需求，那么就只能将TTL设置在消息属性里了。我们来试一试。</p><p>增加一个延时队列，用于接收设置为任意延时时长的消息，增加一个相应的死信队列和routingkey：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAY_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAY_QUEUEC_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.queuec"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAY_QUEUEC_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.queuec.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEAD_LETTER_EXCHANGE <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEAD_LETTER_QUEUEC_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.delay_anytime.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEAD_LETTER_QUEUEC_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.queuec"</span><span class="token punctuation">;</span>    <span class="token comment">// 声明延时Exchange</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"delayExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">delayExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DELAY_EXCHANGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明死信Exchange</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明延时队列C 不设置TTL</span>    <span class="token comment">// 并绑定到对应的死信交换机</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"delayQueueC"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">delayQueueC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// x-dead-letter-exchange    这里声明当前队列绑定的死信交换机</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// x-dead-letter-routing-key  这里声明当前队列的死信路由key</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> DEAD_LETTER_QUEUEC_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>DELAY_QUEUEC_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明死信队列C 用于接收延时任意时长处理的消息</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueC"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">deadLetterQueueC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEC_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明延时列C绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">delayBindingC</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayQueueC"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span>                                 <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayExchange"</span><span class="token punctuation">)</span> <span class="token class-name">DirectExchange</span> exchange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>DELAY_QUEUEC_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明死信队列C绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">deadLetterBindingC</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueC"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span>                                      <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span> <span class="token class-name">DirectExchange</span> exchange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEC_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>增加一个死信队列C的消费者：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> DEAD_LETTER_QUEUEC_NAME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveC</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：&#123;&#125;,死信队列C收到消息：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>再次启动！然后访问：<a href="http://localhost:8080/rabbitmq/delayMsg?msg=testMsg1delayTime=5000">http://localhost:8080/rabbitmq/delayMsg?msg=testMsg1delayTime=5000</a> 来生产消息，注意这里的单位是毫秒。</p><pre class="language-none"><code class="language-none">2019-07-28 16:45:07.033  INFO 31468 --- [nio-8080-exec-4] c.m.d.controller.RabbitMQMsgController   : 当前时间：Sun Jul 28 16:45:07 CST 2019,收到请求，msg:testMsg1,delayTime:50002019-07-28 16:45:11.694  INFO 31468 --- [nio-8080-exec-5] c.m.d.controller.RabbitMQMsgController   : 当前时间：Sun Jul 28 16:45:11 CST 2019,收到请求，msg:testMsg2,delayTime:50002019-07-28 16:45:12.048  INFO 31468 --- [ntContainer#1-1] c.m.d.mq.DeadLetterQueueConsumer         : 当前时间：Sun Jul 28 16:45:12 CST 2019,死信队列C收到消息：testMsg12019-07-28 16:45:16.709  INFO 31468 --- [ntContainer#1-1] c.m.d.mq.DeadLetterQueueConsumer         : 当前时间：Sun Jul 28 16:45:16 CST 2019,死信队列C收到消息：testMsg2</code></pre><p>看起来似乎没什么问题，但不要高兴的太早，在最开始的时候，就介绍过，如果使用在消息属性上设置TTL的方式，消息可能并不会按时“死亡“，因为RabbitMQ只会检查第一个消息是否过期，如果过期则丢到死信队列，索引如果第一个消息的延时时长很长，而第二个消息的延时时长很短，则第二个消息并不会优先得到执行。</p><p>实验一下：</p><pre class="language-none"><code class="language-none">2019-07-28 16:49:02.957  INFO 31468 --- [nio-8080-exec-8] c.m.d.controller.RabbitMQMsgController   : 当前时间：Sun Jul 28 16:49:02 CST 2019,收到请求，msg:longDelayedMsg,delayTime:200002019-07-28 16:49:10.671  INFO 31468 --- [nio-8080-exec-9] c.m.d.controller.RabbitMQMsgController   : 当前时间：Sun Jul 28 16:49:10 CST 2019,收到请求，msg:shortDelayedMsg,delayTime:20002019-07-28 16:49:22.969  INFO 31468 --- [ntContainer#1-1] c.m.d.mq.DeadLetterQueueConsumer         : 当前时间：Sun Jul 28 16:49:22 CST 2019,死信队列C收到消息：longDelayedMsg2019-07-28 16:49:22.970  INFO 31468 --- [ntContainer#1-1] c.m.d.mq.DeadLetterQueueConsumer         : 当前时间：Sun Jul 28 16:49:22 CST 2019,死信队列C收到消息：shortDelayedMsg</code></pre><p>我们先发了一个延时时长为20s的消息，然后发了一个延时时长为2s的消息，结果显示，第二个消息会在等第一个消息成为死信后才会“死亡“。</p><h2 id="八、利用RabbitMQ插件实现延迟队列"><a href="#八、利用RabbitMQ插件实现延迟队列" class="headerlink" title="八、利用RabbitMQ插件实现延迟队列"></a>八、利用RabbitMQ插件实现延迟队列</h2><p>上文中提到的问题，确实是一个硬伤，如果不能实现在消息粒度上添加TTL，并使其在设置的TTL时间及时死亡，就无法设计成一个通用的延时队列。</p><p>那如何解决这个问题呢？不要慌，安装一个插件即可：<a href="https://www.rabbitmq.com/community-plugins.html">https://www.rabbitmq.com/community-plugins.html</a> ，下载rabbitmq_delayed_message_exchange插件，然后解压放置到RabbitMQ的插件目录。</p><p>接下来，进入RabbitMQ的安装目录下的sbin目录，执行下面命令让该插件生效，然后重启RabbitMQ。</p><pre class="language-shell" data-language="shell"><code class="language-shell">rabbitmq-plugins enable rabbitmq_delayed_message_exchange</code></pre><p>然后，我们再声明几个Bean：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayedRabbitMQConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAYED_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.delay.queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAYED_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.delay.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAYED_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.delay.routingkey"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">immediateQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>DELAYED_QUEUE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CustomExchange</span> <span class="token function">customExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-delayed-type"</span><span class="token punctuation">,</span> <span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomExchange</span><span class="token punctuation">(</span>DELAYED_EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">"x-delayed-message"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">bindingNotify</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"immediateQueue"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span>                                 <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"customExchange"</span><span class="token punctuation">)</span> <span class="token class-name">CustomExchange</span> customExchange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>customExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>DELAYED_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>controller层再添加一个入口：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"delayMsg2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delayMsg2</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">Integer</span> delayTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：&#123;&#125;,收到请求，msg:&#123;&#125;,delayTime:&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    sender<span class="token punctuation">.</span><span class="token function">sendDelayMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>消息生产者的代码也需要修改：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendDelayMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">Integer</span> delayTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>DELAYED_EXCHANGE_NAME<span class="token punctuation">,</span> DELAYED_ROUTING_KEY<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> a <span class="token operator">-></span><span class="token punctuation">&#123;</span>        a<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDelay</span><span class="token punctuation">(</span>delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>最后，再创建一个消费者：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> DELAYED_QUEUE_NAME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveD</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：&#123;&#125;,延时队列收到消息：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>一切准备就绪，启动！然后分别访问以下链接：</p><pre class="language-url" data-language="url"><code class="language-url">http:&#x2F;&#x2F;localhost:8080&#x2F;rabbitmq&#x2F;delayMsg2?msg&#x3D;msg1&amp;delayTime&#x3D;20000http:&#x2F;&#x2F;localhost:8080&#x2F;rabbitmq&#x2F;delayMsg2?msg&#x3D;msg2&amp;delayTime&#x3D;2000</code></pre><p>日志如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">13.729</span>  INFO <span class="token number">25804</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>controller<span class="token punctuation">.</span><span class="token class-name">RabbitMQMsgController</span>   <span class="token operator">:</span> 当前时间：<span class="token class-name">Sun</span> <span class="token class-name">Jul</span> <span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">13</span> <span class="token class-name">CST</span> <span class="token number">2019</span><span class="token punctuation">,</span>收到请求，msg<span class="token operator">:</span>msg1<span class="token punctuation">,</span>delayTime<span class="token operator">:</span><span class="token number">20000</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">20.607</span>  INFO <span class="token number">25804</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>controller<span class="token punctuation">.</span><span class="token class-name">RabbitMQMsgController</span>   <span class="token operator">:</span> 当前时间：<span class="token class-name">Sun</span> <span class="token class-name">Jul</span> <span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">20</span> <span class="token class-name">CST</span> <span class="token number">2019</span><span class="token punctuation">,</span>收到请求，msg<span class="token operator">:</span>msg2<span class="token punctuation">,</span>delayTime<span class="token operator">:</span><span class="token number">2000</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">22.624</span>  INFO <span class="token number">25804</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ntContainer#<span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>mq<span class="token punctuation">.</span><span class="token class-name">DeadLetterQueueConsumer</span>         <span class="token operator">:</span> 当前时间：<span class="token class-name">Sun</span> <span class="token class-name">Jul</span> <span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">22</span> <span class="token class-name">CST</span> <span class="token number">2019</span><span class="token punctuation">,</span>延时队列收到消息：msg2<span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">33.751</span>  INFO <span class="token number">25804</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ntContainer#<span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>mq<span class="token punctuation">.</span><span class="token class-name">DeadLetterQueueConsumer</span>         <span class="token operator">:</span> 当前时间：<span class="token class-name">Sun</span> <span class="token class-name">Jul</span> <span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">33</span> <span class="token class-name">CST</span> <span class="token number">2019</span><span class="token punctuation">,</span>延时队列收到消息：msg1</code></pre><p>第二个消息被先消费掉了，符合预期。至此，RabbitMQ实现延时队列的部分就完结了。</p><h2 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h2><p>延时队列在需要延时处理的场景下非常有用，使用RabbitMQ来实现延时队列可以很好的利用RabbitMQ的特性，如：消息可靠发送、消息可靠投递、死信队列来保障消息至少被消费一次以及未被正确处理的消息不会被丢弃。另外，通过RabbitMQ集群的特性，可以很好的解决单点故障问题，不会因为单个节点挂掉导致延时队列不可用或者消息丢失。</p><p>当然，延时队列还有很多其它选择，比如利用Java的DelayQueu，利用Redis的zset，利用Quartz或者利用kafka的时间轮，这些方式各有特点，但就像炉石传说一般，这些知识就好比手里的卡牌，知道的越多，可以用的卡牌也就越多，遇到问题便能游刃有余，所以需要大量的知识储备和经验积累才能打造出更出色的卡牌组合，让自己解决问题的能力得到更好的提升。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、说明&quot;&gt;&lt;a href=&quot;#一、说明&quot; class=&quot;headerlink&quot; title=&quot;一、说明&quot;&gt;&lt;/a&gt;一、说明&lt;/h2&gt;&lt;p&gt;在上一篇中，介绍了RabbitMQ中的死信队列是什么，何时使用以及如何使用RabbitMQ的死信队列。相信通过上一篇的学习，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq基本学习1</title>
    <link href="http://wumuwumu.github.io/2021/01/04/java/rabbitmq%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>http://wumuwumu.github.io/2021/01/04/java/rabbitmq%E5%AD%A6%E4%B9%A0%E4%B8%80/</id>
    <published>2021-01-04T07:00:00.000Z</published>
    <updated>2021-01-09T07:42:36.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p><a href="https://packagecloud.io/rabbitmq/">https://packagecloud.io/rabbitmq/</a></p></blockquote><h2 id="安装erlang"><a href="#安装erlang" class="headerlink" title="安装erlang"></a>安装erlang</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -s https://packagecloud.io/install/repositories/rabbitmq/erlang/script.rpm.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span>dnf <span class="token function">install</span> erlang</code></pre><h2 id="安装rabbitmq"><a href="#安装rabbitmq" class="headerlink" title="安装rabbitmq"></a>安装rabbitmq</h2><pre class="language-none"><code class="language-none">curl -s https:&#x2F;&#x2F;packagecloud.io&#x2F;install&#x2F;repositories&#x2F;rabbitmq&#x2F;rabbitmq-server&#x2F;script.rpm.sh | sudo bash</code></pre><h2 id="启动后台管理界面"><a href="#启动后台管理界面" class="headerlink" title="启动后台管理界面"></a>启动后台管理界面</h2><pre class="language-bash" data-language="bash"><code class="language-bash">rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_management</code></pre><h2 id="相关端口"><a href="#相关端口" class="headerlink" title="相关端口"></a>相关端口</h2><p>Listening ports：3个端口（5672,25672,15672）;</p><p>　　5672对应的是amqp，25672对应的是clustering，15672对应的是http（也就是我们登录RabbitMQ后台管理时用的端口）。</p><p>　　25672对应的是集群，15672对应的是后台管理。因为RabbitMQ遵循Ampq协议，所以5672对应的就是RabbitMQ的通信了。</p><h1 id="rabbitMQ常用的命令"><a href="#rabbitMQ常用的命令" class="headerlink" title="rabbitMQ常用的命令"></a>rabbitMQ常用的命令</h1><p>启动监控管理器：rabbitmq-plugins enable rabbitmq_management<br> 关闭监控管理器：rabbitmq-plugins disable rabbitmq_management<br> 启动rabbitmq：rabbitmq-service start<br> 关闭rabbitmq：rabbitmq-service stop<br> 查看所有的队列：rabbitmqctl list_queues<br> 清除所有的队列：rabbitmqctl reset<br> 关闭应用：rabbitmqctl stop_app<br> 启动应用：rabbitmqctl start_app</p><p><strong>用户和权限设置</strong><br> 添加用户：rabbitmqctl add_user username password<br> 分配角色：rabbitmqctl set_user_tags username administrator<br> 新增虚拟主机：rabbitmqctl add_vhost  vhost_name<br> 将新虚拟主机授权给新用户：<code>rabbitmqctl set_permissions -p vhost_name username “.*” “.*” “.*”</code>(后面三个”*”代表用户拥有配置、写、读全部权限)</p><p><strong>角色说明</strong></p><ul><li>超级管理员(administrator)<br> 可登陆管理控制台，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</li><li>监控者(monitoring)<br> 可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</li><li>策略制定者(policymaker)<br> 可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。</li><li>普通管理者(management)<br> 仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理。</li><li>其他<br> 无法登陆管理控制台，通常就是普通的生产者和消费者。</li></ul><h1 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h1><p>guest默认不能远程登陆</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#RabbitMQ新增账号密码</span>rabbitmqctl add_user <span class="token builtin class-name">test</span> <span class="token number">123456</span><span class="token comment">#设置成管理员角色</span>rabbitmqctl  set_user_tags  <span class="token builtin class-name">test</span>  administrator<span class="token comment">#设置权限</span>rabbitmqctl set_permissions -p <span class="token string">"/"</span> <span class="token builtin class-name">test</span> <span class="token string">".*"</span> <span class="token string">".*"</span> <span class="token string">".*"</span><span class="token comment">#查看用户列表</span>rabbitmqctl list_users</code></pre><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="相关属性"><a href="#相关属性" class="headerlink" title="相关属性"></a>相关属性</h3><ol><li>queue:声明的队列名称，同一个队列在声明之后不能修改属性。</li><li>durable：是否持久化，是否将队列持久化到mnesia数据库中，有专门的表保存我们的队列声明。</li><li> exclusive：排外，①当前定义的队列是connection的channel是共享的，其他的connection是访问不到的。②当connection关闭的时候，队列将被删除。</li><li>autoDelete：自动删除，当最后一个consumer（消费者）断开之后，队列将自动删除。</li></ol><hr><ol start="5"><li><em>arguments</em>：参数是rabbitmq的一个扩展，功能非常强大，基本是AMPQ中没有的。</li></ol><ul><li>x-message-ttl：Number ，发布的消息在队列中存在多长时间后被取消（单位毫秒） 可以对单个消息设置过期时间</li><li>x-expires：Number</li></ul><p>当Queue（队列）在指定的时间未被访问，则队列将被自动删除。</p><ul><li>x-max-length：Number</li></ul><p>队列所能容下消息的最大长度。当超出长度后，新消息将会覆盖最前面的消息，类似于Redis的LRU算法。</p><ul><li>x-max-length-bytes：Number</li></ul><p>限定队列的最大占用空间，当超出后也使用类似于Redis的LRU算法。</p><ul><li>x-overflow：String</li></ul><p>设置队列溢出行为。这决定了当达到队列的最大长度时，消息会发生什么。有效值为Drop Head或Reject Publish。</p><ul><li>x-dead-letter-exchange：String<br> 如果消息被拒绝或过期或者超出max，将向其重新发布邮件的交换的可选名称</li><li>x-dead-letter-routing-key：String</li></ul><p>如果不定义，则默认为溢出队列的routing-key，因此，一般和6一起定义。</p><ul><li>x-max-priority：Number</li></ul><p>如果将一个队列加上优先级参数，那么该队列为优先级队列。</p><p>1）、给队列加上优先级参数使其成为优先级队列</p><p>x-max-priority=10【值不要太大，本质是一个树结构】</p><p>2）、给消息加上优先级属性</p><ul><li>x-queue-mode：String</li></ul><p>队列类型　　x-queue-mode=lazy　　懒队列，在磁盘上尽可能多地保留消息以减少RAM使用；如果未设置，则队列将保留内存缓存以尽可能快地传递消息。</p><ul><li>x-queue-master-locator：String</li></ul><p>将队列设置为主位置模式，确定在节点集群上声明时队列主位置所依据的规则。</p><h3 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.100.11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">addConfirmListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConfirmListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleAck</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"handleack "</span><span class="token operator">+</span>deliveryTag<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNack</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"handleNack "</span><span class="token operator">+</span>deliveryTag<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                channel<span class="token punctuation">.</span><span class="token function">addReturnListener</span><span class="token punctuation">(</span>returnMessage <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回的消息 "</span><span class="token operator">+</span>returnMessage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token class-name">RandomStringUtils</span><span class="token punctuation">.</span><span class="token function">randomAlphanumeric</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" hello  !!"</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送的消息  "</span><span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>QUEUE_NAME<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="消息发送确认机制"><a href="#消息发送确认机制" class="headerlink" title="消息发送确认机制"></a>消息发送确认机制</h2><h3 id="事务机制"><a href="#事务机制" class="headerlink" title="事务机制"></a><strong>事务机制</strong></h3><p>这里首先探讨下RabbitMQ事务机制。</p><p>RabbitMQ中与事务机制有关的方法有三个：txSelect(), txCommit()以及txRollback(), txSelect用于将当前channel设置成transaction模式，txCommit用于提交事务，txRollback用于回滚事务，在通过txSelect开启事务之后，我们便可以发布消息给broker代理服务器了，如果txCommit提交成功了，则消息一定到达了broker了，如果在txCommit执行之前broker异常崩溃或者由于其他原因抛出异常，这个时候我们便可以捕获异常通过txRollback回滚事务了。</p><p>关键代码：</p><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">txSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>exchangeName<span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>routingKey<span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span>PERSISTENT_TEXT_PLAIN<span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>msg_10B<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">txCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过wirkshark抓包（ip.addr==xxx.xxx.xxx.xxx &amp;&amp; amqp），可以看到：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE3MTYzMDM5NjY3?x-oss-process=image/format,png" alt="这里写图片描述"><br>（注意这里的Tx.Commit与Tx.Commit-Ok之间的时间间隔294ms，由此可见事务还是很耗时的。）</p><p>我们先来看看没有事务的通信过程是什么样的：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE3MTYzMDU4MjYx?x-oss-process=image/format,png" alt="这里写图片描述"><br>可以看到带事务的多了四个步骤：</p><ul><li>client发送Tx.Select</li><li>broker发送Tx.Select-Ok(之后publish)</li><li>client发送Tx.Commit</li><li>broker发送Tx.Commit-Ok</li></ul><p>下面我们来看下事务回滚是什么样子的。关键代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    channel<span class="token punctuation">.</span><span class="token function">txSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> routingKey<span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span>PERSISTENT_TEXT_PLAIN<span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">txCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">txRollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>同样通过wireshark抓包可以看到：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE3MTYzMTEwMDgz?x-oss-process=image/format,png" alt="这里写图片描述"><br>代码中先是发送了消息至broker中但是这时候发生了异常，之后在捕获异常的过程中进行事务回滚。</p><p>事务确实能够解决producer与broker之间消息确认的问题，只有消息成功被broker接受，事务提交才能成功，否则我们便可以在捕获异常进行事务回滚操作同时进行消息重发，但是使用事务机制的话会降低RabbitMQ的性能，那么有没有更好的方法既能保障producer知道消息已经正确送到，又能基本上不带来性能上的损失呢？从AMQP协议的层面看是没有更好的方法，但是RabbitMQ提供了一个更好的方案，即将channel信道设置成confirm模式。</p><h3 id="Confirm模式"><a href="#Confirm模式" class="headerlink" title="Confirm模式"></a><strong>Confirm模式</strong></h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h4><p>上面我们介绍了RabbitMQ可能会遇到的一个问题，即生成者不知道消息是否真正到达broker，随后通过AMQP协议层面为我们提供了事务机制解决了这个问题，但是采用事务机制实现会降低RabbitMQ的消息吞吐量，那么有没有更加高效的解决方式呢？答案是采用Confirm模式。</p><h4 id="producer端confirm模式的实现原理"><a href="#producer端confirm模式的实现原理" class="headerlink" title="producer端confirm模式的实现原理"></a><strong>producer端confirm模式的实现原理</strong></h4><p>生产者将信道设置成confirm模式，一旦信道进入confirm模式，所有在该信道上面发布的消息都会被指派一个唯一的ID(从1开始)，一旦消息被投递到所有匹配的队列之后，broker就会发送一个确认给生产者（包含消息的唯一ID）,这就使得生产者知道消息已经正确到达目的队列了，如果消息和队列是可持久化的，那么确认消息会将消息写入磁盘之后发出，broker回传给生产者的确认消息中deliver-tag域包含了确认消息的序列号，此外broker也可以设置basic.ack的multiple域，表示到这个序列号之前的所有消息都已经得到了处理。</p><p>confirm模式最大的好处在于他是异步的，一旦发布一条消息，生产者应用程序就可以在等信道返回确认的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用便可以通过回调方法来处理该确认消息，如果RabbitMQ因为自身内部错误导致消息丢失，就会发送一条nack消息，生产者应用程序同样可以在回调方法中处理该nack消息。</p><p>在channel 被设置成 confirm 模式之后，所有被 publish 的后续消息都将被 confirm（即 ack） 或者被nack一次。但是没有对消息被 confirm 的快慢做任何保证，并且同一条消息不会既被 confirm又被nack 。</p><h4 id="开启confirm模式的方法"><a href="#开启confirm模式的方法" class="headerlink" title="开启confirm模式的方法"></a><strong>开启confirm模式的方法</strong></h4><p>生产者通过调用channel的confirmSelect方法将channel设置为confirm模式，如果没有设置no-wait标志的话，broker会返回confirm.select-ok表示同意发送者将当前channel信道设置为confirm模式(从目前RabbitMQ最新版本3.6来看，如果调用了channel.confirmSelect方法，默认情况下是直接将no-wait设置成false的，也就是默认情况下broker是必须回传confirm.select-ok的)。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE3MTYzMTMzMTgz?x-oss-process=image/format,png" alt="这里写图片描述"></p><blockquote><p>已经在transaction事务模式的channel是不能再设置成confirm模式的，即这两种模式是不能共存的。</p></blockquote><h4 id="编程模式"><a href="#编程模式" class="headerlink" title="编程模式"></a><strong>编程模式</strong></h4><p>对于固定消息体大小和线程数，如果消息持久化，生产者confirm(或者采用事务机制)，消费者ack那么对性能有很大的影响.</p><p>消息持久化的优化没有太好方法，用更好的物理存储（SAS, SSD, RAID卡）总会带来改善。生产者confirm这一环节的优化则主要在于客户端程序的优化之上。归纳起来，客户端实现生产者confirm有三种编程方式：</p><ol><li>普通confirm模式：每发送一条消息后，调用waitForConfirms()方法，等待服务器端confirm。实际上是一种串行confirm了。</li><li>批量confirm模式：每发送一批消息后，调用waitForConfirms()方法，等待服务器端confirm。</li><li>异步confirm模式：提供一个回调方法，服务端confirm了一条或者多条消息后Client端会回调这个方法。</li></ol><p>从编程实现的复杂度上来看：<br><strong>第1种</strong><br>普通confirm模式最简单，publish一条消息后，等待服务器端confirm,如果服务端返回false或者超时时间内未返回，客户端进行消息重传。<br>关键代码如下：</p><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>exchangeName<span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>routingKey<span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span>PERSISTENT_TEXT_PLAIN<span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>msg_10B<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>channel<span class="token punctuation">.</span><span class="token function">waitForConfirms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"send message failed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>wirkShark抓包可以看到如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE3MTYzMjA0Mjg4?x-oss-process=image/format,png" alt="这里写图片描述"><br>(注意这里的Publish与Ack的时间间隔：305ms 4ms 4ms 15ms 5ms… )</p><p><strong>第二种</strong><br>批量confirm模式稍微复杂一点，客户端程序需要定期（每隔多少秒）或者定量（达到多少条）或者两则结合起来publish消息，然后等待服务器端confirm, 相比普通confirm模式，批量极大提升confirm效率，但是问题在于一旦出现confirm返回false或者超时的情况时，客户端需要将这一批次的消息全部重发，这会带来明显的重复消息数量，并且，当消息经常丢失时，批量confirm性能应该是不升反降的。<br>关键代码：</p><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>batchCount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>exchangeName<span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>routingKey<span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span>PERSISTENT_TEXT_PLAIN<span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>msg_10B<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>channel<span class="token punctuation">.</span><span class="token function">waitForConfirms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"send message failed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>第三种</strong><br>异步confirm模式的编程实现最复杂，Channel对象提供的ConfirmListener()回调方法只包含deliveryTag（当前Chanel发出的消息序号），我们需要自己为每一个Channel维护一个unconfirm的消息序号集合，每publish一条数据，集合中元素加1，每回调一次handleAck方法，unconfirm集合删掉相应的一条（multiple=false）或多条（multiple=true）记录。从程序运行效率上看，这个unconfirm集合最好采用有序集合SortedSet存储结构。实际上，SDK中的waitForConfirms()方法也是通过SortedSet维护消息序号的。<br>关键代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">SortedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> confirmSet <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedSortedSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       channel<span class="token punctuation">.</span><span class="token function">addConfirmListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConfirmListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleAck</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>multiple<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   confirmSet<span class="token punctuation">.</span><span class="token function">headSet</span><span class="token punctuation">(</span>deliveryTag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                   confirmSet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNack</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Nack, SeqNo: "</span> <span class="token operator">+</span> deliveryTag <span class="token operator">+</span> <span class="token string">", multiple: "</span> <span class="token operator">+</span> multiple<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>multiple<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   confirmSet<span class="token punctuation">.</span><span class="token function">headSet</span><span class="token punctuation">(</span>deliveryTag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                   confirmSet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">long</span> nextSeqNo <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">getNextPublishSeqNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>exchangeName<span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>routingKey<span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span>PERSISTENT_TEXT_PLAIN<span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>msg_10B<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           confirmSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nextSeqNo<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span></code></pre><p>SDK中waitForConfirms方法实现：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** Set of currently unconfirmed messages (i.e. messages that have *  not been ack'd or nack'd by the server yet. */</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SortedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> unconfirmedSet <span class="token operator">=</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedSortedSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">waitForConfirms</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextPublishSeqNo <span class="token operator">==</span> <span class="token number">0L</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Confirms not selected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>unconfirmedSet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getCloseReason</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">fixStackTrace</span><span class="token punctuation">(</span><span class="token function">getCloseReason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>unconfirmedSet<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">boolean</span> aux <span class="token operator">=</span> onlyAcksReceived<span class="token punctuation">;</span>                onlyAcksReceived <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> aux<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                unconfirmedSet<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">long</span> elapsed <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">></span> elapsed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    unconfirmedSet<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>timeout <span class="token operator">-</span> elapsed<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a><strong>性能测试</strong></h4><p>Client端机器和RabbitMQ机器配置：CPU:24核，2600MHZ, 64G内存，1TB硬盘。<br>Client端发送消息体大小10B，线程数为1即单线程，消息都持久化处理（deliveryMode:2）。<br>分别采用事务模式、普通confirm模式，批量confirm模式和异步confirm模式进行producer实验，比对各个模式下的发送性能。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE3MTYzMjI4MDU5?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>发送平均速率：</p><ul><li>事务模式（tx）：1637.484</li><li>普通confirm模式(common)：1936.032</li><li>批量confirm模式(batch)：10432.45</li><li>异步confirm模式(async)：10542.06</li></ul><p>可以看到事务模式性能是最差的，普通confirm模式性能比事务模式稍微好点，但是和批量confirm模式还有异步confirm模式相比，还是小巫见大巫。批量confirm模式的问题在于confirm之后返回false之后进行重发这样会使性能降低，异步confirm模式(async)编程模型较为复杂，至于采用哪种方式，那是仁者见仁智者见智了。</p><h3 id="消息确认（Consumer端）"><a href="#消息确认（Consumer端）" class="headerlink" title="消息确认（Consumer端）"></a><strong>消息确认（Consumer端）</strong></h3><p>为了保证消息从队列可靠地到达消费者，RabbitMQ提供消息确认机制(message acknowledgment)。消费者在声明队列时，可以指定noAck参数，当noAck=false时，RabbitMQ会等待消费者显式发回ack信号后才从内存(和磁盘，如果是持久化消息的话)中移去消息。否则，RabbitMQ会在队列中消息被消费后立即删除它。</p><p>采用消息确认机制后，只要令noAck=false，消费者就有足够的时间处理消息(任务)，不用担心处理消息过程中消费者进程挂掉后消息丢失的问题，因为RabbitMQ会一直持有消息直到消费者显式调用basicAck为止。</p><p>当noAck=false时，对于RabbitMQ服务器端而言，队列中的消息分成了两部分：一部分是等待投递给消费者的消息；一部分是已经投递给消费者，但是还没有收到消费者ack信号的消息。如果服务器端一直没有收到消费者的ack信号，并且消费此消息的消费者已经断开连接，则服务器端会安排该消息重新进入队列，等待投递给下一个消费者（也可能还是原来的那个消费者）。</p><p>RabbitMQ不会为未ack的消息设置超时时间，它判断此消息是否需要重新投递给消费者的唯一依据是消费该消息的消费者连接是否已经断开。这么设计的原因是RabbitMQ允许消费者消费一条消息的时间可以很久很久。</p><p>RabbitMQ管理平台界面上可以看到当前队列中Ready状态和Unacknowledged状态的消息数，分别对应上文中的等待投递给消费者的消息数和已经投递给消费者但是未收到ack信号的消息数。也可以通过命令行来查看上述信息：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE3MTYzMjQ1ODQw?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>代码示例（关闭自动消息确认，进行手动ack）：</p><pre class="language-java" data-language="java"><code class="language-java">   <span class="token class-name">QueueingConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueueingConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>   channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>queueName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">QueueingConsumer</span><span class="token punctuation">.</span><span class="token class-name">Delivery</span> delivery <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">nextDelivery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>delivery<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// do something with msg. </span>       channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>delivery<span class="token punctuation">.</span><span class="token function">getEnvelope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><blockquote><p>broker将在下面的情况中对消息进行confirm：</p><blockquote><p>broker发现当前消息无法被路由到指定的queues中（如果设置了mandatory属性，则broker会发送basic.return）<br>非持久属性的消息到达了其所应该到达的所有queue中（和镜像queue中）<br>持久消息到达了其所应该到达的所有queue中（和镜像中），并被持久化到了磁盘（fsync）<br>持久消息从其所在的所有queue中被consume了（如果必要则会被ack）</p></blockquote></blockquote><p>basicRecover：是路由不成功的消息可以使用recovery重新发送到队列中。<br>basicReject：是接收端告诉服务器这个消息我拒绝接收,不处理,可以设置是否放回到队列中还是丢掉，而且只能一次拒绝一个消息,官网中有明确说明不能批量拒绝消息，为解决批量拒绝消息才有了basicNack。<br>basicNack：可以一次拒绝N条消息，客户端可以设置basicNack方法的multiple参数为true，服务器会拒绝指定了delivery_tag的所有未确认的消息(tag是一个64位的long值，最大值是9223372036854775807)。</p><h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><p>有4种不同的交换机类型：</p><ul><li>直连交换机：Direct exchange</li><li>扇形交换机：Fanout exchange</li><li>主题交换机：Topic exchange</li><li>首部交换机：Headers exchange</li></ul><h1 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h1><h2 id="死信队列是什么"><a href="#死信队列是什么" class="headerlink" title="死信队列是什么"></a>死信队列是什么</h2><p>死信，在官网中对应的单词为“Dead Letter”，可以看出翻译确实非常的简单粗暴。那么死信是个什么东西呢？</p><p>“死信”是RabbitMQ中的一种消息机制，当你在消费消息时，如果队列里的消息出现以下情况：</p><ol><li>消息被否定确认，使用 <code>channel.basicNack</code> 或 <code>channel.basicReject</code> ，并且此时<code>requeue</code> 属性被设置为<code>false</code>。</li><li>消息在队列的存活时间超过设置的TTL时间。</li><li>消息队列的消息数量已经超过最大队列长度。</li></ol><p>那么该消息将成为“死信”。</p><p>“死信”消息会被RabbitMQ进行特殊处理，如果配置了死信队列信息，那么该消息将会被丢进死信队列中，如果没有配置，则该消息将会被丢弃。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.jianshu.com/p/469f4608ce5d">https://www.jianshu.com/p/469f4608ce5d</a></p><p><a href="https://blog.csdn.net/u013256816/article/details/55515234">https://blog.csdn.net/u013256816/article/details/55515234</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://packagecloud.io/rabbitmq/&quot;&gt;https://packa</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>type与interface区别</title>
    <link href="http://wumuwumu.github.io/2021/01/03/react/type%E4%B8%8Einterface%E5%8C%BA%E5%88%AB/"/>
    <id>http://wumuwumu.github.io/2021/01/03/react/type%E4%B8%8Einterface%E5%8C%BA%E5%88%AB/</id>
    <published>2021-01-03T07:00:00.000Z</published>
    <updated>2021-01-04T10:19:10.106Z</updated>
    
    <content type="html"><![CDATA[<ul><li>interface VS type<ul><li>相同点<ul><li>都可以描述一个对象或者函数<ul><li><a href="https://github.com/SunshowerC/blog/issues/7#interface">interface</a></li><li><a href="https://github.com/SunshowerC/blog/issues/7#type">type</a></li></ul></li><li>都允许拓展（extends）<ul><li><a href="https://github.com/SunshowerC/blog/issues/7#interface-extends-interface">interface extends interface</a></li><li><a href="https://github.com/SunshowerC/blog/issues/7#type-extends-type">type 与 type 相交</a></li><li><a href="https://github.com/SunshowerC/blog/issues/7#interface-extends-type">interface extends type</a></li><li><a href="https://github.com/SunshowerC/blog/issues/7#type-extends-interface">type 与 interface 相交</a></li></ul></li></ul></li><li>不同点<ul><li><a href="https://github.com/SunshowerC/blog/issues/7#type-%E5%8F%AF%E4%BB%A5%E8%80%8C-interface-%E4%B8%8D%E8%A1%8C">type 可以而 interface 不行</a></li><li><a href="https://github.com/SunshowerC/blog/issues/7#interface-%E5%8F%AF%E4%BB%A5%E8%80%8C-type-%E4%B8%8D%E8%A1%8C">interface 可以而 type 不行</a></li></ul></li></ul></li><li><a href="https://github.com/SunshowerC/blog/issues/7#%E6%80%BB%E7%BB%93">总结</a></li></ul><h1 id="interface-VS-type"><a href="#interface-VS-type" class="headerlink" title="interface VS type"></a>interface VS type</h1><p>大家使用 typescript 总会使用到 interface 和 type，<a href="https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md">官方规范</a> 稍微说了下两者的区别</p><blockquote><ul><li>An interface can be named in an extends or implements clause, but a type alias for an object type literal cannot.</li><li>An interface can have multiple merged declarations, but a type alias for an object type literal cannot.<br>但是没有太具体的例子。</li></ul></blockquote><p>明人不说暗话，直接上区别。</p><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><h3 id="都可以描述一个对象或者函数"><a href="#都可以描述一个对象或者函数" class="headerlink" title="都可以描述一个对象或者函数"></a>都可以描述一个对象或者函数</h3><h4 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h4><pre class="language-none"><code class="language-none">interface User &#123;  name: string  age: number&#125;interface SetUser &#123;  (name: string, age: number): void;&#125;</code></pre><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><pre class="language-none"><code class="language-none">type User &#x3D; &#123;  name: string  age: number&#125;;type SetUser &#x3D; (name: string, age: number): void;</code></pre><h3 id="拓展（extends）与-交叉类型（Intersection-Types）"><a href="#拓展（extends）与-交叉类型（Intersection-Types）" class="headerlink" title="拓展（extends）与 交叉类型（Intersection Types）"></a>拓展（extends）与 交叉类型（Intersection Types）</h3><p>interface 可以 extends， 但 type 是不允许 extends 和 implement 的，<strong>但是 type 缺可以通过交叉类型 实现 interface 的 extend 行为</strong>，并且两者并不是相互独立的，也就是说 interface 可以 extends type, type 也可以 与 interface 类型 交叉 。</p><p><strong>虽然效果差不多，但是两者语法不同</strong>。</p><h4 id="interface-extends-interface"><a href="#interface-extends-interface" class="headerlink" title="interface extends interface"></a>interface extends interface</h4><pre class="language-none"><code class="language-none">interface Name &#123;   name: string; &#125;interface User extends Name &#123;   age: number; &#125;</code></pre><h4 id="type-与-type-交叉"><a href="#type-与-type-交叉" class="headerlink" title="type 与 type 交叉"></a>type 与 type 交叉</h4><pre class="language-none"><code class="language-none">type Name &#x3D; &#123;   name: string; &#125;type User &#x3D; Name &amp; &#123; age: number  &#125;;</code></pre><h4 id="interface-extends-type"><a href="#interface-extends-type" class="headerlink" title="interface extends type"></a>interface extends type</h4><pre class="language-none"><code class="language-none">type Name &#x3D; &#123;   name: string; &#125;interface User extends Name &#123;   age: number; &#125;</code></pre><h4 id="type-与-interface-交叉"><a href="#type-与-interface-交叉" class="headerlink" title="type 与 interface 交叉"></a>type 与 interface 交叉</h4><pre class="language-none"><code class="language-none">interface Name &#123;   name: string; &#125;type User &#x3D; Name &amp; &#123;   age: number; &#125;</code></pre><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><h3 id="type-可以而-interface-不行"><a href="#type-可以而-interface-不行" class="headerlink" title="type 可以而 interface 不行"></a>type 可以而 interface 不行</h3><ul><li>type 可以声明基本类型别名，联合类型，元组等类型</li></ul><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 基本类型别名type Name &#x3D; string&#x2F;&#x2F; 联合类型interface Dog &#123;    wong();&#125;interface Cat &#123;    miao();&#125;type Pet &#x3D; Dog | Cat&#x2F;&#x2F; 具体定义数组每个位置的类型type PetList &#x3D; [Dog, Pet]</code></pre><ul><li>type 语句中还可以使用 typeof 获取实例的 类型进行赋值</li></ul><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 当你想获取一个变量的类型时，使用 typeoflet div &#x3D; document.createElement(&#39;div&#39;);type B &#x3D; typeof div</code></pre><ul><li>其他骚操作</li></ul><pre class="language-none"><code class="language-none">type StringOrNumber &#x3D; string | number;  type Text &#x3D; string | &#123; text: string &#125;;  type NameLookup &#x3D; Dictionary&lt;string, Person&gt;;  type Callback&lt;T&gt; &#x3D; (data: T) &#x3D;&gt; void;  type Pair&lt;T&gt; &#x3D; [T, T];  type Coordinates &#x3D; Pair&lt;number&gt;;  type Tree&lt;T&gt; &#x3D; T | &#123; left: Tree&lt;T&gt;, right: Tree&lt;T&gt; &#125;;</code></pre><h3 id="interface-可以而-type-不行"><a href="#interface-可以而-type-不行" class="headerlink" title="interface 可以而 type 不行"></a>interface 可以而 type 不行</h3><p>interface 能够声明合并</p><pre class="language-none"><code class="language-none">interface User &#123;  name: string  age: number&#125;interface User &#123;  sex: string&#125;&#x2F;*User 接口为 &#123;  name: string  age: number  sex: string &#125;*&#x2F;</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一般来说，如果不清楚什么时候用interface/type，能用 interface 实现，就用 interface , 如果不能就用 type 。其他更多详情参看 <a href="https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md">官方规范文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;interface VS type&lt;ul&gt;
&lt;li&gt;相同点&lt;ul&gt;
&lt;li&gt;都可以描述一个对象或者函数&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/SunshowerC/blog/issues/7#interface&quot;&gt;interfa</summary>
      
    
    
    
    
    <category term="react" scheme="http://wumuwumu.github.io/tags/react/"/>
    
    <category term="ts" scheme="http://wumuwumu.github.io/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>关于Object o = new Object()</title>
    <link href="http://wumuwumu.github.io/2020/12/23/java/%E5%85%B3%E4%BA%8EObject%20o%20=%20new%20Object()/"/>
    <id>http://wumuwumu.github.io/2020/12/23/java/%E5%85%B3%E4%BA%8EObject%20o%20=%20new%20Object()/</id>
    <published>2020-12-23T04:00:00.000Z</published>
    <updated>2020-12-23T07:38:10.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、请解释一下对象的创建过程？（半初始化）"><a href="#1、请解释一下对象的创建过程？（半初始化）" class="headerlink" title="1、请解释一下对象的创建过程？（半初始化）"></a>1、请解释一下对象的创建过程？（半初始化）</h2><p><img src="http://wumu.rescreate.cn/image20201222130815.png"></p><h2 id="2、加问DCL与volatile问题？（指令重排）"><a href="#2、加问DCL与volatile问题？（指令重排）" class="headerlink" title="2、加问DCL与volatile问题？（指令重排）"></a>2、加问DCL与volatile问题？（指令重排）</h2><p>volatile的作用：保持线程可见性，防止指令重排</p><p>DCL 是双重检查锁</p><p>3、对象在内存中的存储布局？（对象和数组的存储不同）</p><p>4、对象头具体包括什么？（markedword klasspointer）</p><p>synchronized锁信息</p><p>5、对象怎么定位？（直接  间接）</p><p>6、对象怎么分配？（栈上-线程本地-eden-old）</p><p>7、Object o = new Object()在内存中占用多少字节。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、请解释一下对象的创建过程？（半初始化）&quot;&gt;&lt;a href=&quot;#1、请解释一下对象的创建过程？（半初始化）&quot; class=&quot;headerlink&quot; title=&quot;1、请解释一下对象的创建过程？（半初始化）&quot;&gt;&lt;/a&gt;1、请解释一下对象的创建过程？（半初始化）&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JVM垃圾回收模型</title>
    <link href="http://wumuwumu.github.io/2020/12/20/java/jvm/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A8%A1%E5%9E%8B/"/>
    <id>http://wumuwumu.github.io/2020/12/20/java/jvm/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-12-20T12:00:00.000Z</published>
    <updated>2021-01-25T08:11:43.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-JVM垃圾回收模型"><a href="#一-JVM垃圾回收模型" class="headerlink" title="一 JVM垃圾回收模型"></a>一 JVM垃圾回收模型</h1><h2 id="一-GC算法"><a href="#一-GC算法" class="headerlink" title="一. GC算法"></a>一. GC算法</h2><h3 id="1-1-标记-清除算法（Mark-Sweep）"><a href="#1-1-标记-清除算法（Mark-Sweep）" class="headerlink" title="1.1 标记-清除算法（Mark-Sweep）"></a>1.1 标记-清除算法（Mark-Sweep）</h3><p>算法分为“标记”和“清除”两个阶段首先标记出所有需要回收的对象,然后回收所有需要回收的对象。</p><p>问题：效率不高，需要扫描所有的对象，堆越大，GC越慢，并且存在严重的内存碎片问题,空间碎片太多可能会导致后续使用中无法找到足够的连续内存而提前触发另一次的垃圾搜集动作，GC次数越多，碎片越严重。</p><p>示例如下，红色的就是未被标记要回收的，并且红色的区域被回收之后，绿色的还在“原地”，并不会对内存区域进行整理。</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164655-908837.png" alt="1582787561817"></p><h3 id="1-2-标记-整理算法（Mark-Compact）"><a href="#1-2-标记-整理算法（Mark-Compact）" class="headerlink" title="1.2 标记-整理算法（Mark-Compact）"></a>1.2 标记-整理算法（Mark-Compact）</h3><p>标记过程仍然一样，但后续步骤不是进行直接清理，而是令所有存活的对象一端移动，然后直接清理掉这端边界以外的内存。</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164628-260953.png" alt="1582786327947"></p><h3 id="1-3-复制搜集算法（Coping）"><a href="#1-3-复制搜集算法（Coping）" class="headerlink" title="1.3 复制搜集算法（Coping）"></a>1.3 复制搜集算法（Coping）</h3><h4 id="以前的复制收集算法"><a href="#以前的复制收集算法" class="headerlink" title="以前的复制收集算法"></a>以前的复制收集算法</h4><p>描述：将可用的内存分为两半， 每次只使用其中的一块，当半区内存用完了，仅将还存活的对象复制到另一块上，然后就把原来整块内存空间清理</p><p>问题：这样使每次内存回收都是对整个半区的回收，内存分配时就不用考虑内存碎片等复杂情况，<strong>只需要移动堆顶指针</strong>，按顺序分配内存就可以了，实现简单，运行高效，只是这种算法将堆空间内存缩为原来的一半。</p><h4 id="现在的复制搜集算法"><a href="#现在的复制搜集算法" class="headerlink" title="现在的复制搜集算法"></a>现在的复制搜集算法</h4><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200310215856-280171.png" alt="1583848735097"></p><p>描述：现在的商业虚拟机都是采用复制搜集算法来回收<strong>新生代</strong>，将内存分为一块较大的eden空间和两块较小的survivor空间，每次只是用eden和其中一块survivor空间，当回收时将eden和survivor空间中还存活的对象一次性拷贝到另一个survivor空间上，然后清理用过的eden和survivor空间，oracle hotspot虚拟机默认eden 和 survivor的比例是 8:1 ,也就是每次只有百分之十的内存被浪费。示例图如下（最开始A被引用，A引用了C，C引用了H，GC的最后清除了D和G），注意这里跟前面的标记整理和标记清除不一样哦，这里是不用标记的。</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164632-195319.png" alt="1582787476606"></p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164635-766946.png" alt="1582787495319"></p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164648-218229.png" alt="1582961769604"></p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164650-924632.png" alt="1582961922126"></p><p>好处：1.只需要扫描存活的对象（跟前面的标记整理和标记清除不一样哦），效率更高；2.不会产生碎片 3.复制算法非常适合对象存活时间比较短的对象，因为每次GC总能回收大部分的对象，复制的开销比较小。根据IBM的专门研究,98%的Java对象只会存活1个GC周期,对这些对象很适合用复制算法。而且不用1:1的划分工作区和复制区的空间</p><p>问题：复制搜集算法在对象存活率高得时候效率有所下降，就需要有额外的空间进行分配担保用于应付内存中所有对象都百分之百存活的极端情况（在新生代中可以使用老年代进行空间分配担保），所以在老年代不能直接采用这种算法</p><h3 id="1-4-分代算法（Generational）"><a href="#1-4-分代算法（Generational）" class="headerlink" title="1.4 分代算法（Generational）"></a>1.4 分代算法（Generational）</h3><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164921-907201.png" alt="1582786672708"></p><p>描述：当前商业虚拟机的垃圾收集都是采用“分代收集”( Generational Collecting)算法根据对象不同的存活周期将内存划分为几块；一般是把Java堆分作新生代和老年代,这样就可以根据各个年代的特点采用最适当的收集算法,1. 譬如新生代每次GC都有大批对象死去,只有少量存活,那就选用复制算法只需要付出少量存活对象的复制成本就可以完成收集  2. 并且有老年代作为空间分配担保；老年代采用Mark- Sweep或者Mark- Compact算法</p><p>年轻代( Young Generation)新生成的对象都放在新生代。年轻代用复制算法进行GC(理论上年轻代对象的生命周期非常短,所以适合复制算法，因为大部分都是不存活的对象)，年轻代分三个区，一个Eden区，两个 Survivor区(可以通过参数设置 Survivor个数)。对象在Eden区中生成，在新生代垃圾回收时，Eden区和From Survivor区中还存活的对象将被复制到另一个 Survivor区(称为To Survivor区)，此次垃圾回收完成之后From Survivor和To Survivor区交换角色。下一次垃圾回收时重复上述过程，直到To Survivor 区被填满，然后一次性将To Survivor中的所有对象移动到老年代中。2个 Survivor是完全对称,轮流替换。Eden和2个 Survivor的缺省比例是8:1:1,也就是10%的空间会被浪费。可以根据 GC log的信息调整大小的比例</p><p>老年代( Old Generation)存放了经过一次或多次GC还存活的对象般采用Mark- Sweep或者Mark- Compact算法，进行GC有多种垃圾收集器可以选择。每种垃圾收集器可以看作一个GC算法的具体实现。可以根据具体应用的需求选用合适的垃圾收集器(追求吞吐量?追求最短的响应时间?)</p><h2 id="二-垃圾回收器"><a href="#二-垃圾回收器" class="headerlink" title="二 垃圾回收器"></a>二 垃圾回收器</h2><blockquote><p>GC的种类</p><ul><li>Scavenge GC (Minor GC）：对新生代，触发时机是在新对象生成时，Eden空间满了，理论上Eden区大多数对象会在 Scavenge GC回收，复制算法的执行效率会很高， Scavenge GC时间比较短。</li><li>Full GC：对整个JVM进行整理，包括 Young、Old和Perm（永久代，jdk8没有，jdk为元空间），主要的触发时机:1)Old满了2)Perm满了3) system.gc()   Full GC的执行效率很低，尽量减少 Full GC</li></ul></blockquote><p>分代模型是GC的宏观愿景，垃圾回收器是GC的具体实现，hotspot jvm提供多种垃圾回收器，我们需要根据具体的应用采用多种垃圾回收器</p><p>垃圾回收器的并行（Parallel）和并发（Concurrent），并行指的是多个收集器的线程同时工作，但是用户线程处于等待状态；并发指的是收集器在工作的同时，可以允许用户线程工作，但是并发并不代表解决了GC的停顿问题，在关键步骤该停顿的还是要停顿，比如在收集器标记垃圾的时候，但是在清除垃圾的时候用户线程可以和GC线程并发执行</p><h3 id="2-1-serial-收集器"><a href="#2-1-serial-收集器" class="headerlink" title="2.1 serial 收集器"></a>2.1 serial 收集器</h3><ul><li>是最早的收集器,单线程收集器,Hotspot Client模式缺省的收集器，收集时会暂停所有工作线程(Stop The World,简称STW)，因为是单线程GC,没有多线程切换的额外开销,简单实用</li><li>New和 Old Generation都可以使用在新生代,采用复制算法，在老年代,采用Mark-Compact算法;</li><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164918-434894.png" alt="1582791530489"></li></ul><h3 id="2-2-Serial-Old-收集器"><a href="#2-2-Serial-Old-收集器" class="headerlink" title="2.2 Serial Old 收集器"></a>2.2 Serial Old 收集器</h3><pre><code>Serial Old是单线程收集器,使用标记一整理算法, 是老年代的收集器</code></pre><h3 id="2-3-parnew收集器"><a href="#2-3-parnew收集器" class="headerlink" title="2.3 parnew收集器"></a>2.3 parnew收集器</h3><ul><li><p>Parnew收集器就是Serial收集器在<strong>新生代</strong>的多线程版本，是Server模式下新生代的缺省收集器，除了使用多个收集线程外,其余行为包括算法、STW、对象分配规则、回收策略等都与 Serial收集器一模一样。</p></li><li><p>使用复制算法(因为针对新生代，效率比较高);</p></li><li><p>只有在多CPU的环境下,效率才会比 Serial收集器高;</p></li><li><p>可以通过<code>-XX: Parallelg Cthreads</code>来控制GC线程数的多少，需要结合具体CPU的个数;</p></li></ul><h3 id="2-4-Parallel-Scavenge收集器"><a href="#2-4-Parallel-Scavenge收集器" class="headerlink" title="2.4 Parallel Scavenge收集器"></a>2.4 Parallel Scavenge收集器</h3><p>Parallel Scavenge 收集器也是一个多线程收集器（Parallel就是并行的意思）,也是使用复制算法，但它的对象分配规则与回收策略都与 Parnew收集器有所不同，它是以吞吐量最大化(即GC时间占总运行时间最小)为目标的收集器实现，它允许较长时间的STW换取总吞吐量最大化，jvm1.8默认在新生代使用Parallel Scavenge ，老年代使用Parallel Old收集</p><h3 id="2-5-Parallel-Old-收集器"><a href="#2-5-Parallel-Old-收集器" class="headerlink" title="2.5 Parallel Old 收集器"></a>2.5 Parallel Old 收集器</h3><p>JVM1.6提供，在此之前，新生代使用PS收集器的话，老年代除了使用Serial Old外别无选择，因为PS无法和CMS配合工作。jvm1.8默认在新生代使用Parallel Scavenge ，老年代使用Parallel Old收集</p><ul><li>Parallel Scavenge在<strong>老年代</strong>的实现；</li><li>采用多线程,Mark-Compact算法；</li><li>更注重吞吐量Parallel Scavenge+ Parallel Old = 高吞吐量,但GC停顿可能不理想</li><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164916-517287.png" alt="1582792519271"></li></ul><h3 id="2-6-CMS收集器"><a href="#2-6-CMS收集器" class="headerlink" title="2.6 CMS收集器"></a>2.6 CMS收集器</h3><p>CMS是一种以最短停顿时间为目标的<strong>老年代</strong>收集器，使用CMS并不能达到GC效率最高（总的GC时间最小），但是它能尽可能降低服务的停顿时间</p><ul><li>只针对老年区,一般在新生代结合Parnew使用</li><li>CMS收集器使用的是标记–清除算法</li><li>使用-XX:+ UseConcMarkSweepGC打开</li></ul><h4 id="收集步骤方法一"><a href="#收集步骤方法一" class="headerlink" title="收集步骤方法一"></a>收集步骤方法一</h4><p>CMS是基于“<strong>标记–清除</strong>”算法实现的，在老年代中的整个过程分为4个步骤：</p><ul><li>其中，初始标记，重新标记这两个步骤任然需要“stop the world”，其它两个步骤中用户线程是一起并发执行的</li><li>初始标记（CMS initial mark），初始标记只是标记一下GC ROOTS 能直接关联到的对象，速度很快</li><li>并发标记（CMS concurrent mark），并发标记阶段就是进行GC ROOTS Tracing 的过程，此时用户线程也是在同步执行的</li><li>重新标记（CMS remark），重新标记阶段则是为了修正并发标记期间因为用户程序继续运作而导致标记产生变动的那一部分对象的标记记录（ 这部分对象是指从 GC Roots 不可达的对象，因为用户程序的并发运行，又可达了），这个阶段的停顿时间一般会比初始标记阶段稍长一些，但是远比并发标记的时间短。</li><li>并发清除（CMS concurrent sweep），收集在标记阶段被标识为不可访问的对象。The collection of a dead object adds the space for the object to a free list for later allocation. Coalescing of dead objects may occur at this point. Note that live objects are not moved.死亡对象收集为空闲列表增加了更多的空间，以便以后分配。在这一点上可能会发生死物体空间的的合并。请注意，不会移动活动对象。</li><li>CMS收集器的运作步骤如下图所示，在整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以和用户线程一起工作，因此从整体上看，CMS收集器线程的内存回收过程是与用户线程一起并发执行的。<ul><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164913-9221.png" alt="1582892656658"></li></ul></li></ul><h4 id="CMS缺点"><a href="#CMS缺点" class="headerlink" title="CMS缺点"></a>CMS缺点</h4><ul><li>CMS以牺牲CPU资源的代价来减少用户线程的停顿。当CPU个数少于4的时候,有可能对吞吐量影响非常大；</li><li>CMS收集器无法处理浮动垃圾（Floating Garbage）,即第一次标记，认为某个对象不是垃圾，但是在CMS线程和用户线程在并发执行的过程中此对象可能变成了垃圾，那么CMS无法在这次的垃圾回收中将它回收掉。无法处理这些垃圾可能出现”concurrent mode failure“失败而导致另一次Full GC的产生。如果在应用中老年代的增长速度不是太快，可以适当调高<code>-XX:CMSInitiatingOccupancyFractio</code> 的值来提高出发的百分比，以便降低内存回收的次数从而获取更好的性能。要是CMS运行期预留的内存无法满足程序的需要时，虚拟机将启动后备预案，临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样一来停顿的时间就更久了。所以说参数<code>-XX:CMSInitiatingOccupancyFraction</code> 设置太高容易导致大量的”concurrent mode failure“失败，性能反而降低</li><li>由于基于MS算法即<code>Mark-Sweep,</code>收集结束时会带来碎片问题，空间碎片过多会给大对象分配带来很大麻烦，望往往出现老年代还有很大的空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前进行一次Full GC。CMS收集器提供了一个参数：<code>-XX:+UseCMSCompactAtFullConnection</code> 开关参数，默认是开启的，用于在CMS收集器顶不住要进行 Full GC时同时开启内存碎片的合并整理过程,内存整理的过程是无法并发的并且需要stw,空间碎片问题没有了,但停顿时间不得不变长。  </li></ul><h4 id="收集步骤方法二"><a href="#收集步骤方法二" class="headerlink" title="收集步骤方法二"></a>收集步骤方法二</h4><p>CMS收集器收集步骤，以下是将上面的四个步骤进一步细分为7个步骤，但是其中有stw的还是只有两个步骤，减少了stw的时间。</p><ul><li>Phase 1: Initial Mark，这个是CMS两次stop-the-world事件的其中一次,这个阶段的目标是:标记那些直接被GCroot引用或者被年轻代存活对象所引用的所有对象（CMS是针对老年代的）<ul><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200311203248-360957.png" alt="1583929967459"></li></ul></li><li>Phase 2：Concurrent Mark，在这个阶段 Garbage Collector会遍历老年代,然后标记所有存活的对象,它会根据上个阶段找到的 GC Roots遍历査找。并发标记阶段，它会与用户的应用程序并发运行并不是老年代所有的存活对象都会被标记，因为在标记期间用户的程序可能会改变一些引用。在下的图中,与阶段1的图进行对比,就会发现有一个对象的引用已经发生了变化<ul><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164910-509868.png" alt="1582896958721"></li></ul></li><li>Phase 3: Concurrent Preclean，这也是一个并发阶段,与应用的线程并发运行,并不会stop用户线程。在并发运行的过程中,一些对象的引用可能会发生变化,但是这种情况发生时,JVM会将包含这个对象的区域(Card)标记为Diy，这个动作称为Card Marking，在pre-clean阶段，那些能够从Dirty对象到达的对象也会被标记,这个标记做完之后, dirty card标记就会被清除了<ul><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164710-663159.png" alt="1582940994952"></li></ul></li><li>Phase 4: Concurrent Abortable Preclean，这也是一个并发阶段,但是同样不会影响用户的应用线程,这个阶段是为了尽量承担STW(stop-the-world)中最终标记阶段的工作。这个阶段持续时间依赖于很多的因素由于这个阶段是在重复做很多相同的工作(比如:重复迭代的次数、完成的工作量或者时钟时间等）</li><li>Phase 5: Final Remark，这是第二个STW阶段,也是CMS中的最后一个，这个阶段的目标是标记老年代所有的存活对象，由于之前的阶段是并发执行的，GC线程可能跟不上应用程序的变化为了完成标记老年代所有存活对象的目标，STW就非常有必要了，这个阶段会比前面的几个阶段更复杂一些</li><li>Phase 6: Concurrent Sweep，这里不需要STW,它是与用户的应用程序并发运行,这个阶段是:清除那些不再使用的对象,回收它们的占用空间为将来使用<ul><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164851-267408.png" alt="1582941954201"></li></ul></li><li>Phase 7: Concurrent Reset，这个阶段也是并发执行的,它会重设CMS内部的数据结构,为下次的GC做准备</li></ul><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>实验代码MyTest5.java</p><p>虚拟机参数</p><ul><li>-verbose:gc<br>-Xmx20M<br>-Xms20m<br>-Xmn10M<br>-XX:SurvivorRatio=8<br>-XX:+PrintGCDetails<br>-XX:+UseConcMarkSweepGC</li></ul><p>输出结果</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">[GC</span> <span class="token attr-value">(Allocation Failure) [ParNew: 6104K->742K(9216K), 0.0029166 secs] 6104K->4840K(19456K), 0.0029703 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span>2222222<span class="token attr-name">[GC</span> <span class="token attr-value">(Allocation Failure) [ParNew: 4995K->65K(9216K), 0.0034135 secs] 9093K->8973K(19456K), 0.0034413 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><span class="token attr-name">[GC</span> <span class="token attr-value">(CMS Initial Mark) [1 CMS-initial-mark: 8907K(10240K)] 13069K(19456K), 0.0001747 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><span class="token comment">#  CMS-initial-mark</span>[CMS-concurrent-mark-start]333333334444444<span class="token attr-name">[CMS-concurrent-mark</span><span class="token punctuation">:</span> <span class="token attr-value">0.001/0.001 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span>[CMS-concurrent-preclean-start]<span class="token attr-name">[CMS-concurrent-preclean</span><span class="token punctuation">:</span> <span class="token attr-value">0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span>[CMS-concurrent-abortable-preclean-start]<span class="token attr-name">[CMS-concurrent-abortable-preclean</span><span class="token punctuation">:</span> <span class="token attr-value">0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><span class="token attr-name">[GC</span> <span class="token attr-value">(CMS Final Remark) [YG occupancy: 6531 K (9216 K)][Rescan (parallel) , 0.0001118 secs][weak refs processing, 0.0000169 secs][class unloading, 0.0003630 secs][scrub symbol table, 0.0006629 secs][scrub string table, 0.0001339 secs][1 CMS-remark: 8907K(10240K)] 15439K(19456K), 0.0013879 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span>Heap<span class="token attr-name"> par</span> <span class="token attr-value">new generation   total 9216K, used 6531K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><span class="token attr-name">  eden</span> <span class="token attr-value">space 8192K,  78% used [0x00000000fec00000, 0x00000000ff250980, 0x00000000ff400000)</span><span class="token comment">  # 新生代存了一个4m和一个2m的数组对象，大概是6m</span><span class="token attr-name">  from</span> <span class="token attr-value">space 1024K,   6% used [0x00000000ff400000, 0x00000000ff4104c8, 0x00000000ff500000)</span>[CMS-concurrent-sweep-start]<span class="token attr-name">  to</span> <span class="token attr-value">  space 1024K,   0% used [0x00000000ff500000, 0x00000000ff500000, 0x00000000ff600000)</span><span class="token attr-name"> concurrent</span> <span class="token attr-value">mark-sweep generation total 10240K, used 8907K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><span class="token comment"> #  老年代里面是存了两个4m的数组对象，大概是8m</span><span class="token attr-name"> Metaspace</span> <span class="token attr-value">      used 3239K, capacity 4496K, committed 4864K, reserved 1056768K</span><span class="token attr-name">  class</span> <span class="token attr-value">space    used 352K, capacity 388K, committed 512K, reserved 1048576K</span></code></pre><h3 id="2-7-总结"><a href="#2-7-总结" class="headerlink" title="2.7 总结"></a>2.7 总结</h3><p>HotSpot虚拟机的组成成分</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164752-567723.png" alt="1582976665504"></p><h2 id="三-JVM内存分配与回收专题"><a href="#三-JVM内存分配与回收专题" class="headerlink" title="三 JVM内存分配与回收专题"></a>三 JVM内存分配与回收专题</h2><h3 id="3-1-内存分配"><a href="#3-1-内存分配" class="headerlink" title="3.1 内存分配"></a>3.1 内存分配</h3><h4 id="3-1-1-空间分配担保"><a href="#3-1-1-空间分配担保" class="headerlink" title="3.1.1 空间分配担保"></a>3.1.1 空间分配担保</h4><pre><code>在发生 Minor gc之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立,那么 Minor gc可以确保是安全的。当大量对象在 Minor GC后仍然存活，Survivor区中无法容纳那么多的对象，那么就需要老年代进行空间分配担保，把 Survivor无法容纳的对象提前直接进入老年代；但是如果老年代判断到剩余空间不足(根据以往每一次回收晋升到老年代对象容量的平均值作为经验值)，则进行一次Full GC。</code></pre><h4 id="3-1-2-大对象直接进入老年代"><a href="#3-1-2-大对象直接进入老年代" class="headerlink" title="3.1.2 大对象直接进入老年代"></a>3.1.2 大对象直接进入老年代</h4><p>大对象就是需要大量连续内存空间的对象（比如：字符串、数组）。</p><p><strong>为什么要这样呢？</strong></p><p>为了避免为大对象分配内存时由于分配担保机制带来的复制而降低效率。</p><h4 id="3-1-3-长期存活的对象将进入老年代"><a href="#3-1-3-长期存活的对象将进入老年代" class="headerlink" title="3.1.3 长期存活的对象将进入老年代"></a>3.1.3 长期存活的对象将进入老年代</h4><p>既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这一点，虚拟机给每个对象一个对象年龄（Age）计数器。</p><p>如果对象在  Eden 出生并经过第一次 Minor GC 后仍然能够存活，并且能被 Survivor 容纳的话，将被移动到 Survivor  空间中，并将对象年龄设为 1.对象在 Survivor 中每熬过一次 MinorGC,年龄就增加 1 岁，当它的年龄增加到一定程度（默认为 15  岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 <code>-XX:MaxTenuringThreshold</code> 来设置。</p><h4 id="3-1-4-动态对象年龄判定"><a href="#3-1-4-动态对象年龄判定" class="headerlink" title="3.1.4 动态对象年龄判定"></a>3.1.4 动态对象年龄判定</h4><p>“Hotspot遍历所有对象时，按照年龄从小到大对其所占用的大小进行累积，当累积的某个年龄大小超过了survivor区的一半时，取这个年龄和MaxTenuringThreshold中更小的一个值，作为新的晋升年龄阈值”。</p><h3 id="3-2-垃圾回收"><a href="#3-2-垃圾回收" class="headerlink" title="3.2 垃圾回收"></a>3.2 垃圾回收</h3><h4 id="3-2-1-垃圾判断算法"><a href="#3-2-1-垃圾判断算法" class="headerlink" title="3.2.1 垃圾判断算法"></a>3.2.1 垃圾判断算法</h4><h5 id="引用计数算法（Refesrence-Counting）"><a href="#引用计数算法（Refesrence-Counting）" class="headerlink" title="引用计数算法（Refesrence Counting）"></a>引用计数算法（Refesrence Counting）</h5><p>当对象添加一个引用计数器，当有一个地方以用它，计数器加1，当引用失效，计数器减一，任何时刻计数器为0的对象j就是不可能再被使用。弊端：引用计数器可能无法解决循环引用的问题</p><h5 id="根搜索算法-Root-Tracing"><a href="#根搜索算法-Root-Tracing" class="headerlink" title="根搜索算法( Root Tracing)"></a>根搜索算法( Root Tracing)</h5><p>在实际生产语言中（java，C#等）都使用跟搜索算法判断对象是否存活。算法的基本思路就是通过一系列被称作“GC ROOTS “ 的点作为起始进行向下搜索，当一个对象到GC ROOTS 没有任何引用链相连，则证明此对象是不可用的。</p><p>其中的GC ROOTS 包括：</p><ul><li>在VM栈中（帧中的本地变量）中的引用</li><li>方法区中的静态引用</li><li>JNI（即一般所说的Native方法）中的引用</li></ul><h4 id="3-2-2-垃圾回收期的选择和实现"><a href="#3-2-2-垃圾回收期的选择和实现" class="headerlink" title="3.2.2 垃圾回收期的选择和实现"></a>3.2.2 垃圾回收期的选择和实现</h4><h5 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h5><p>GC要做的是将那些dead对象所占的内存回收掉，hotsopt认为没有引用的对象就是dead。hotspot将引用分成四种，strong，soft，weak，phantom。strong引用是我们最常用到的引用，即默认通过Object o = new Object() 这种方式进行的引用；<strong>soft，weak，Phantom这三种都是继承reference</strong></p><p>在 Full GC时会对 Reference类型的引用进行特殊处理<br>Soft:内存不够时一定会被GC，长期不用也会被GC<br>Weak:一定会被GC<br>Phantom:本来就没引用,当从 jvm 堆中释放时会通知具体的对比参考<a href="https://juejin.im/post/5e65b8096fb9a07cbb6e4a43">大佬的文章</a></p><h5 id="GC的时机"><a href="#GC的时机" class="headerlink" title="GC的时机"></a>GC的时机</h5><p>在分代模型的基础上,GC从时机上分为两种: Scavenge GC和Full GC</p><ul><li>Scavenge GC (Minor GC）：对新生代，触发时机是在新对象生成时，Eden空间满了，理论上Eden区大多数对象会在 Scavenge GC回收，复制算法的执行效率会很高， Scavenge GC时间比较短。</li><li>Full GC：对整个JVM进行整理，包括 Young、Old和Perm（永久代，jdk8没有，jdk为元空间），主要的触发时机:1)Old满了2)Perm满了3) system.gc()   Full GC的执行效率很低，尽量减少 Full GC</li></ul><h4 id="3-2-3-GC时机-线程角度"><a href="#3-2-3-GC时机-线程角度" class="headerlink" title="3.2.3 GC时机-线程角度"></a>3.2.3 GC时机-线程角度</h4><h5 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h5><blockquote><p>枚举根节点：当执行系统停顿下来后,并不需要一个不漏地检查完所有执行上下文和全局的引用位置,虚拟机应当是有办法直接得知哪些地方存放着对象引用。在 HotSpot的实现中,是使用一组称为 OopMap的数据结构来达到这个目的的</p></blockquote><p>安全点在 OopMap的协助下, Hotspot可以快速且准确地完成GC Roots枚举,但一个很现实的问题随之而来:很多指令可能导致引用关系变化,或者说引起 OopMap内容变化的指令非常多,如果为每一条指令都生成对应的 OopMap,那将会要大量的额外空间,这样GC的空间成本将会变得更高实际上, Hotspot并没有为每条指令都生成 OopMap,只是在“特定的位置”记录了这些信息,这些位置称为安全点( Safepoint),即程序执行时并非在所有地方都能停顿下来开始GC,只有在达到安全点时才能暂停。</p><p>Safepoint的选定既不能太少以至于让GC等待时间太长,也不能过于频繁以至于过分增大运行时的负载。所以,安全点的选定基本上是以“是否具有让程序长时间执行的特征”为标准进行选定的因为每条指令执行的时间非常短暂,程序不太可能因为指令流长度太长这个原因而过长时间运行,“长时间执行”的最明显特征就是指令序列复用,例如方法调用、循环跳转、异常跳转等,所以具有这些功能的指令オ会产生 Safepoint</p><p>对于 Savepoint,另一个需要考虑的问题是如何在GC发生时让所有线程(这里不包括执行JNI调用的线程)都“跑”到最近的安全点再停顿下来:抢占式中断( Preemptive Suspension)和主动式中断(Voluntary Suspension)</p><h6 id="抢占式中断"><a href="#抢占式中断" class="headerlink" title="抢占式中断"></a>抢占式中断</h6><p>抢占式中断:它不需要线程的执行代码主动去配合,在GC发生时,首先把所有线程全部中断,如果有线程中断的地方不在安全点上,就恢复线程,让它“跑”到安全点上。</p><h6 id="主动式中断"><a href="#主动式中断" class="headerlink" title="主动式中断"></a>主动式中断</h6><p>主动式中断:当GC需要中断线程的时候,不直接对线程操作,仅仅简单地设置一个标志,各个线程执行时主动去轮询这个标志,发现中断标志为真时就自己中断挂起。注意：这个轮询也只是在轮询也只是在指定的地方才进行轮询，标志的地方和安全点是重合的。现在几乎没有虚拟机采用抢占式中断来暂停线程从而响应GC事件。</p><h5 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h5><p>在使用 SafePoint似乎已经完美地解决了如何进入GC的问题,但实际上情况却并不一定。 SafePoint机制保证了程序执行时,在不太长的时间内就会遇到可进入GC的Safepoint。但如果程序在“不执行”的时候呢?所谓程序不执行就是没有分配CPU时间,典型的例子就是处于Sleep状态或者 Blocked状态,这时候线程无法响应JVM的中断请求,JVM也显然不太可能等待线程重新分配CPU时间。对于这种情况,就需要安全区域(SafeRegion)来解决了。</p><p>在线程执行到 Safe Region中的代码时,首先标识自己已经进入了 Safe Region,那样,当在这段时间里JVM要发起GC时,就不用管标识自己为 Safe Region状态的线程了。在线程要离开 Safe Region时,它要检査系统是否已经完成了根节点枚举(或者是整个GC过程),如果完成了,那线程就继续执行,否则它就必须等待直到收到可以安全离开 Safe Region的信号为止。</p><h3 id="3-3-一些感悟"><a href="#3-3-一些感悟" class="headerlink" title="3.3 一些感悟"></a>3.3 一些感悟</h3><h4 id="3-3-1-内存泄露的经典原因"><a href="#3-3-1-内存泄露的经典原因" class="headerlink" title="3.3.1 内存泄露的经典原因"></a>3.3.1 内存泄露的经典原因</h4><h6 id="对象定义在错误的范围-Wrong-Scope-；"><a href="#对象定义在错误的范围-Wrong-Scope-；" class="headerlink" title="对象定义在错误的范围( Wrong Scope)；"></a>对象定义在错误的范围( Wrong Scope)；</h6><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164846-878102.png" alt="1582794952530"></p><h6 id="异常-Exception-处理不当"><a href="#异常-Exception-处理不当" class="headerlink" title="异常( Exception)处理不当"></a>异常( Exception)处理不当</h6><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164816-77853.png" alt="1582795049517"></p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164833-867525.png" alt="1582795085858"></p><h6 id="集合数据管理不当"><a href="#集合数据管理不当" class="headerlink" title="集合数据管理不当"></a>集合数据管理不当</h6><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164712-132297.png" alt="1582795166640"></p><h2 id="四-参数与实验"><a href="#四-参数与实验" class="headerlink" title="四 参数与实验"></a>四 参数与实验</h2><ul><li><p>-verbose gc 打印出垃圾回收的详情</p></li><li><p>-XX:+PrintGCDetails</p></li><li><p>-XX:+PrintGCDateStamps   打印出gc的时间戳</p></li><li><p>-XX:+PrintCommandLineFlags  在命令行打印出虚拟机的参数、</p></li><li><p>堆空间调整</p></li><li><p>-XX:SurvivorRatio=8   eden 和survivor的所占空间大小比例为 8：1</p></li><li><p>-Xms5m -Xmx5m  初始和最大的堆内存，通常设置成一样的，防止垃圾回收之后有堆抖动的问题</p></li><li><p>-Xmn10m 新生代的容量</p></li><li><p>新生代晋升老年代相关</p></li><li><p>-XX:PretenureSizeThreshold=4194304  （Tenured是老年代的意思）当创建的对象的大小已经超过这个值，那么此对象不会被放到新生代中，而是直接在老年代中。 此参数需要和参数 -XX:+UseSerialGC一起使用(虚拟机运行在 Client模式下的默认值,打开此开关后,使用Serial old的收集器组合进行内存回收)</p></li><li><p>-XX:MaxTenuringThreshold=5  （Threshold是门槛的意思）设置对象晋升的到老年代对象年龄阈值的最大值，即虽然可以jvm一般是自动调节回收对象的回收年龄，但是也不能超过此值。此值的默认值是15，CMS中的默认值是6，G1中的默认值是15。</p><ul><li>经历过多次GC后，存活的对象会在From Survivor 与 To Survivor 之间来回存放，而这里面的一个前提是有足够的空间来存放这些数据，在GC算法中，会计算每个对象年龄的大小，如果某个年龄总的大小已经大于survivor空间的百分之五十，那么这时就需要调整阈值，取这个年龄和MaxTenuringThreshold中更小的一个值，作为新的晋升年龄阈值，不能再继续等到默认的15次才完成晋升，因为不调整会导致survivor的空间不足，所以需要调整阈值，让这些存活的对象尽快完成晋升。</li></ul></li><li><p>-XX:TargetSurvivorRatio=60 设置survivor空间的占比达到百分之六十时就进行一次对象晋升</p></li><li><p>-XX:+PrintTenuringDistribution  （Distribution是分配的意思）打印出各年龄阶段的对象的占有内存</p></li><li><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164720-262990.png" alt="1582814508681"></p></li></ul><h3 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h3><p>输入虚拟机参数执行MyTest1.java</p><ul><li>-XX:SurvivorRatio=8 -Xms20m -Xmx20m -Xmn10m -verbose：gc -XX:+PrintGCDetails</li></ul><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">[GC</span> <span class="token attr-value">(Allocation Failure) [PSYoungGen: 8192K->1016K(9216K)] 8192K->5193K(19456K), 0.0066065 secs] [Times: user=0.08 sys=0.00, real=0.01 secs] </span><span class="token comment"># [GC (Allocation Failure)   GC 代表的是一次Minor GC </span><span class="token comment">#  [PSYoungGen: 8192K->1016K(9216K)] 代表新生代垃圾回收之前是8192k，回收之后是1016k，总的内存是9216k,即9m（这里是eden和from survivor区域相加的结果），PSYoungGen中的PS代表Parallel Scavenge,这是默认使用的收集器</span><span class="token comment"># 8192K->5193K(19456K) 代表的是在执行回收之前总的堆的大小为8192K，回收之后是5193K，而总的堆的可用容量是19456K（这里是去掉了一个to survivor 区域的大小）</span><span class="token comment"># 0.0066065 secs 代表执行这次垃圾回收的时间是0.0066065 秒</span><span class="token comment"># [Times: user=0.08 sys=0.00, real=0.01 secs]  表示在用户空间用了0.08秒，内核空间用了0.00秒，实际用了0.01秒</span><span class="token attr-name">[Full</span> <span class="token attr-value">GC (Ergonomics) [PSYoungGen: 9208K->0K(9216K)] [ParOldGen: 10232K->9951K(10240K)] 19440K->9951K(19456K), [Metaspace: 3235K->3235K(1056768K)], 0.2093485 secs] [Times: user=0.64 sys=0.00, real=0.21 secs] </span><span class="token comment"># [Full GC (Ergonomics)  代表这是一次Full GC </span><span class="token comment"># [PSYoungGen: 9208K->0K(9216K)] 同上，代表新生代回收后的内存为0k，PSYoungGen中的PS代表Parallel Scavenge,这是默认使用的收集器</span><span class="token comment">#  [ParOldGen: 10232K->9951K(10240K)] 表示老年代进行垃圾回收之后的空间，如果这里显示不仅没有变小，而且变大了，其中一个原因是因为部分从新生代晋升到老年代，ParOldGen 中的 ParOld代表Parallel Old,这是默认使用的收集器</span><span class="token comment"># [Metaspace: 3235K->3235K(1056768K)] 代表这次垃圾回收之后，元空间的大小没变</span><span class="token comment"># 以上分析可以说明，jvm1.8默认在新生代使用Parallel Scavenge ，老年代使用Parallel Old收集</span>Heap<span class="token attr-name"> PSYoungGen</span> <span class="token attr-value">     total 9216K, used 435K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><span class="token comment"> # PSYoungGen中的PS代表Parallel Scavenge,这是默认使用的收集器</span><span class="token attr-name">  eden</span> <span class="token attr-value">space 8192K, 5% used [0x00000000ff600000,0x00000000ff66cf70,0x00000000ffe00000)</span><span class="token attr-name">  from</span> <span class="token attr-value">space 1024K, 0% used [0x00000000ffe00000,0x00000000ffe00000,0x00000000fff00000)</span><span class="token attr-name">  to</span> <span class="token attr-value">  space 1024K, 0% used [0x00000000fff00000,0x00000000fff00000,0x0000000100000000)</span><span class="token attr-name"> ParOldGen</span> <span class="token attr-value">      total 10240K, used 675K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><span class="token comment"> # 永久代的内存是10240K，ParOldGen 中的 ParOld代表Parallel Old,这是默认使用的收集器</span><span class="token attr-name">  object</span> <span class="token attr-value">space 10240K, 6% used [0x00000000fec00000,0x00000000feca8ce0,0x00000000ff600000)</span><span class="token attr-name"> Metaspace</span> <span class="token attr-value">      used 3268K, capacity 4496K, committed 4864K, reserved 1056768K</span><span class="token attr-name">  class</span> <span class="token attr-value">space    used 355K, capacity 388K, committed 512K, reserved 1048576K</span></code></pre><h3 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h3><p>实验代码为MyTest2.java 虚拟机参数为</p><ul><li>-XX:SurvivorRatio=8<br>-Xms20m<br>-Xmx20m<br>-Xmn10m<br>-XX:+PrintGCDetails<br>-verbose：gc<br>-XX:PretenureSizeThreshold=4194304<br>-XX:+UseSerialGC<ul><li>-XX:PretenureSizeThreshold = 4194304  当创建的对象的大小已经超过这个值，那么此对象不会被放到新生代中，而是直接在老年代中 此参数需要和 参数 -XX:+UseSerialGC(虚拟机运行在 Client模式下的默认值,打开此开关后,使用SeSerial+ old的收集器组合进行内存回收)一起使用</li></ul></li></ul><p>实验代码为：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myAlloc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">5</span> <span class="token operator">*</span> size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果</p><pre class="language-properties" data-language="properties"><code class="language-properties">Heap<span class="token attr-name"> def</span> <span class="token attr-value">new generation   total 9216K, used 2172K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><span class="token comment">  # 此处的新生代称为 def new generation，而不是使用使用Parallel收集器时的 PSYoungGen </span><span class="token attr-name">  eden</span> <span class="token attr-value">space 8192K,  26% used [0x00000000fec00000, 0x00000000fee1f1b0, 0x00000000ff400000)</span><span class="token attr-name">  from</span> <span class="token attr-value">space 1024K,   0% used [0x00000000ff400000, 0x00000000ff400000, 0x00000000ff500000)</span><span class="token attr-name">  to</span> <span class="token attr-value">  space 1024K,   0% used [0x00000000ff500000, 0x00000000ff500000, 0x00000000ff600000)</span><span class="token attr-name"> tenured</span> <span class="token attr-value">generation   total 10240K, used 5120K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><span class="token comment"> #  此处的新生代称为  tenured generation，而不是使用使用Parallel收集器时的 ParOldGen  </span><span class="token comment"> # 由于在实验代码中new了一个5m的字节数组，可以看到，字节数组对象被保存到老年代中。</span><span class="token attr-name">   the</span> <span class="token attr-value">space 10240K,  50% used [0x00000000ff600000, 0x00000000ffb00010, 0x00000000ffb00200, 0x0000000100000000)</span><span class="token attr-name"> Metaspace</span> <span class="token attr-value">      used 3236K, capacity 4496K, committed 4864K, reserved 1056768K</span><span class="token attr-name">  class</span> <span class="token attr-value">space    used 352K, capacity 388K, committed 512K, reserved 1048576K</span></code></pre><h3 id="实验三"><a href="#实验三" class="headerlink" title="实验三"></a>实验三</h3><p>实验参数</p><ul><li>-XX:SurvivorRatio=8<br>-Xms20m<br>-Xmx20m<br>-Xmn10m<br>-XX:+PrintGCDetails<br>-verbose：gc<br>-XX:+PrintCommandLineFlags<br>-XX:MaxTenuringThreshold=5<br>-XX:+PrintTenuringDistribution</li></ul><p>实验代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myAlloc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myAlloc2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myAlloc3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myAlloc4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"完成了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">[GC</span> <span class="token attr-value">(Allocation Failure) </span><span class="token attr-name">Desired</span> <span class="token attr-value">survivor size 1048576 bytes, new threshold 5 (max 5)</span><span class="token comment"># Desired survivor size 1048576 bytes 表示现在的survivor空间的大小，即1m；new threshold 5表示当前的jvm动态设置的对象回收的年龄，(max 5)表示回收的年龄阈值</span><span class="token attr-name">[PSYoungGen</span><span class="token punctuation">:</span> <span class="token attr-value">8152K->840K(9216K)] 8152K->6992K(19456K), 0.0055682 secs] [Times: user=0.03 sys=0.01, real=0.01 secs] </span><span class="token attr-name">[Full</span> <span class="token attr-value">GC (Ergonomics) [PSYoungGen: 840K->0K(9216K)] [ParOldGen: 6152K->6845K(10240K)] 6992K->6845K(19456K), [Metaspace: 3229K->3229K(1056768K)], 0.0142699 secs] [Times: user=0.03 sys=0.02, real=0.01 secs] </span>完成了Heap<span class="token attr-name"> PSYoungGen</span> <span class="token attr-value">     total 9216K, used 2289K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><span class="token attr-name">  eden</span> <span class="token attr-value">space 8192K, 27% used [0x00000000ff600000,0x00000000ff83c4a0,0x00000000ffe00000)</span><span class="token attr-name">  from</span> <span class="token attr-value">space 1024K, 0% used [0x00000000ffe00000,0x00000000ffe00000,0x00000000fff00000)</span><span class="token attr-name">  to</span> <span class="token attr-value">  space 1024K, 0% used [0x00000000fff00000,0x00000000fff00000,0x0000000100000000)</span><span class="token attr-name"> ParOldGen</span> <span class="token attr-value">      total 10240K, used 6845K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><span class="token attr-name">  object</span> <span class="token attr-value">space 10240K, 66% used [0x00000000fec00000,0x00000000ff2af728,0x00000000ff600000)</span><span class="token attr-name"> Metaspace</span> <span class="token attr-value">      used 3237K, capacity 4496K, committed 4864K, reserved 1056768K</span><span class="token attr-name">  class</span> <span class="token attr-value">space    used 352K, capacity 388K, committed 512K, reserved 1048576K</span></code></pre><h3 id="实验四"><a href="#实验四" class="headerlink" title="实验四"></a>实验四</h3><p>虚拟机参数</p><ul><li>-verbose：gc<br>-Xmx200m<br>-Xmn50m<br>-XX:TargetSurvivorRatio=60<br>-XX:+PrintTenuringDistribution<br>-XX:+PrintGCDetails<br>-XX:+PrintGCDateStamps<br>-XX:+UseParNewGC<br>-XX:+UseConcMarkSweepGC<br>-XX:MaxTenuringThreshold=3</li></ul><p>实验代码 MyTest4.java</p><p>输出结果</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">2020-02-28T16</span><span class="token punctuation">:</span><span class="token attr-value">13:31.886+0800: [GC (Allocation Failure) 2020-02-28T16:13:31.886+0800: [ParNew</span><span class="token attr-name">Desired</span> <span class="token attr-value">survivor size 3145728 bytes, new threshold 3 (max 3)</span><span class="token attr-name">-</span> <span class="token attr-value">age   1:    2818384 bytes,    2818384 total</span><span class="token punctuation">:</span> 40349K->2785K(46080K), 0.0016338 secs] 40349K->2785K(109568K), 0.0017041 secs] [Times<span class="token punctuation">:</span> user<span class="token punctuation">=</span>0.00 sys<span class="token punctuation">=</span>0.00, real<span class="token punctuation">=</span>0.00 secs] 11111111<span class="token comment"># Desired survivor size 3145728 bytes ,其中3145728 bytes的值就是3m，是survivor乘于0.6算出来的（-XX:TargetSurvivorRatio=60），当survivor超过此大小时就会重新动态设置threshold的值，但是也不会超过3.</span><span class="token attr-name">2020-02-28T16</span><span class="token punctuation">:</span><span class="token attr-value">13:32.891+0800: [GC (Allocation Failure) 2020-02-28T16:13:32.891+0800: [ParNew</span><span class="token attr-name">Desired</span> <span class="token attr-value">survivor size 3145728 bytes, new threshold 2 (max 3)</span><span class="token attr-name">-</span> <span class="token attr-value">age   1:     342328 bytes,     342328 total</span><span class="token attr-name">-</span> <span class="token attr-value">age   2:    2866552 bytes,    3208880 total</span><span class="token punctuation">:</span> 42918K->3328K(46080K), 0.0016638 secs] 42918K->3328K(109568K), 0.0017198 secs] [Times<span class="token punctuation">:</span> user<span class="token punctuation">=</span>0.00 sys<span class="token punctuation">=</span>0.00, real<span class="token punctuation">=</span>0.00 secs] 222222222<span class="token attr-name">2020-02-28T16</span><span class="token punctuation">:</span><span class="token attr-value">13:33.896+0800: [GC (Allocation Failure) 2020-02-28T16:13:33.896+0800: [ParNew</span><span class="token attr-name">Desired</span> <span class="token attr-value">survivor size 3145728 bytes, new threshold 3 (max 3)</span><span class="token attr-name">-</span> <span class="token attr-value">age   1:         64 bytes,         64 total</span><span class="token attr-name">-</span> <span class="token attr-value">age   2:     341632 bytes,     341696 total</span><span class="token punctuation">:</span> 43843K->858K(46080K), 0.0034513 secs] 43843K->3621K(109568K), 0.0034982 secs] [Times<span class="token punctuation">:</span> user<span class="token punctuation">=</span>0.00 sys<span class="token punctuation">=</span>0.00, real<span class="token punctuation">=</span>0.00 secs] 3333333333<span class="token attr-name">2020-02-28T16</span><span class="token punctuation">:</span><span class="token attr-value">13:34.905+0800: [GC (Allocation Failure) 2020-02-28T16:13:34.905+0800: [ParNew</span><span class="token attr-name">Desired</span> <span class="token attr-value">survivor size 3145728 bytes, new threshold 3 (max 3)</span><span class="token attr-name">-</span> <span class="token attr-value">age   1:         64 bytes,         64 total</span><span class="token attr-name">-</span> <span class="token attr-value">age   2:         64 bytes,        128 total</span><span class="token attr-name">-</span> <span class="token attr-value">age   3:     341856 bytes,     341984 total</span><span class="token punctuation">:</span> 41579K->484K(46080K), 0.0006988 secs] 44342K->3247K(109568K), 0.0007548 secs] [Times<span class="token punctuation">:</span> user<span class="token punctuation">=</span>0.00 sys<span class="token punctuation">=</span>0.00, real<span class="token punctuation">=</span>0.00 secs] 4444444444<span class="token attr-name">2020-02-28T16</span><span class="token punctuation">:</span><span class="token attr-value">13:35.908+0800: [GC (Allocation Failure) 2020-02-28T16:13:35.908+0800: [ParNew</span><span class="token attr-name">Desired</span> <span class="token attr-value">survivor size 3145728 bytes, new threshold 1 (max 3)</span><span class="token attr-name">-</span> <span class="token attr-value">age   1:    3145840 bytes,    3145840 total</span><span class="token attr-name">-</span> <span class="token attr-value">age   2:         64 bytes,    3145904 total</span><span class="token attr-name">-</span> <span class="token attr-value">age   3:         64 bytes,    3145968 total</span><span class="token punctuation">:</span> 41211K->3153K(46080K), 0.0016465 secs] 43974K->6250K(109568K), 0.0016891 secs] [Times<span class="token punctuation">:</span> user<span class="token punctuation">=</span>0.00 sys<span class="token punctuation">=</span>0.00, real<span class="token punctuation">=</span>0.00 secs] 5555555<span class="token attr-name">2020-02-28T16</span><span class="token punctuation">:</span><span class="token attr-value">13:36.912+0800: [GC (Allocation Failure) 2020-02-28T16:13:36.912+0800: [ParNew</span><span class="token attr-name">Desired</span> <span class="token attr-value">survivor size 3145728 bytes, new threshold 3 (max 3)</span><span class="token attr-name">-</span> <span class="token attr-value">age   1:         56 bytes,         56 total</span><span class="token punctuation">:</span> 43885K->20K(46080K), 0.0020702 secs] 46982K->6189K(109568K), 0.0021193 secs] [Times<span class="token punctuation">:</span> user<span class="token punctuation">=</span>0.00 sys<span class="token punctuation">=</span>0.00, real<span class="token punctuation">=</span>0.00 secs] 666666Heap<span class="token attr-name"> par</span> <span class="token attr-value">new generation   total 46080K, used 19046K [0x00000000f3800000, 0x00000000f6a00000, 0x00000000f6a00000)</span><span class="token attr-name">  eden</span> <span class="token attr-value">space 40960K,  46% used [0x00000000f3800000, 0x00000000f4a947a0, 0x00000000f6000000)</span><span class="token attr-name">  from</span> <span class="token attr-value">space 5120K,   0% used [0x00000000f6000000, 0x00000000f6005130, 0x00000000f6500000)</span><span class="token attr-name">  to</span> <span class="token attr-value">  space 5120K,   0% used [0x00000000f6500000, 0x00000000f6500000, 0x00000000f6a00000)</span><span class="token attr-name"> concurrent</span> <span class="token attr-value">mark-sweep generation total 63488K, used 6169K [0x00000000f6a00000, 0x00000000fa800000, 0x0000000100000000)</span><span class="token attr-name"> Metaspace</span> <span class="token attr-value">      used 3748K, capacity 4536K, committed 4864K, reserved 1056768K</span><span class="token attr-name">  class</span> <span class="token attr-value">space    used 412K, capacity 428K, committed 512K, reserved 1048576K</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-JVM垃圾回收模型&quot;&gt;&lt;a href=&quot;#一-JVM垃圾回收模型&quot; class=&quot;headerlink&quot; title=&quot;一 JVM垃圾回收模型&quot;&gt;&lt;/a&gt;一 JVM垃圾回收模型&lt;/h1&gt;&lt;h2 id=&quot;一-GC算法&quot;&gt;&lt;a href=&quot;#一-GC算法&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>jvm常用的命令</title>
    <link href="http://wumuwumu.github.io/2020/12/20/java/jvm%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <id>http://wumuwumu.github.io/2020/12/20/java/jvm%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4/</id>
    <published>2020-12-20T04:00:00.000Z</published>
    <updated>2021-01-22T07:19:04.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jvm基本命令"><a href="#jvm基本命令" class="headerlink" title="jvm基本命令"></a>jvm基本命令</h1><h2 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h2><blockquote><p>显示当前运行的java进程以及相关参数</p></blockquote><p>jps参数：</p><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin">jps <span class="token operator">-</span>l pid<span class="token operator">-</span>q 只显示pid，不显示<span class="token keyword">class</span>名称<span class="token punctuation">,</span>jar文件名和传递给main 方法的参数。<span class="token operator">-</span>l 输出应用程序main <span class="token keyword">class</span>的完整<span class="token keyword">package</span>名 或者 应用程序的jar文件完整路径名。<span class="token operator">-</span>m 输出传递给main方法的参数<span class="token operator">-</span>v 输出传递给JVM的参数</code></pre><p><strong>备注：</strong>也可以使用ps aux | grep 项目名 查看pid</p><h2 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h2><blockquote><p>用于生成java虚拟机当前时刻的线程快照。</p></blockquote><h3 id="分析CPU利用率100-问题"><a href="#分析CPU利用率100-问题" class="headerlink" title="分析CPU利用率100%问题"></a>分析CPU利用率100%问题</h3><ol><li>top 查看占CPU最多的进程</li><li>top -Hp pid 查询进程下所有线程的运行情况（shift+p 按cpu排序，shift+m 按内存排序）</li><li>用printf ‘%x’ pid 转换为16进制（加入查到的是a）</li><li>jstact查看线程快照，jstack 30316 | grep -A 20 a</li></ol><p>[推荐阅读]<a href="https://link.jianshu.com/?t=http://jameswxx.iteye.com/blog/1041173">http://jameswxx.iteye.com/blog/1041173</a></p><h2 id="死锁分析"><a href="#死锁分析" class="headerlink" title="死锁分析"></a>死锁分析</h2><p>java程序如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JvmLock</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Default Charset="</span> <span class="token operator">+</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"file.encoding="</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"file.encoding"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LockA</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LockB</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">LockA</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">JvmLock</span><span class="token punctuation">.</span>obj1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lockA 获取到obj1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">JvmLock</span><span class="token punctuation">.</span>obj2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lockA 获取obj2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">LockB</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">JvmLock</span><span class="token punctuation">.</span>obj2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lockb 获取到obj2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">JvmLock</span><span class="token punctuation">.</span>obj1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lockA 获取obj1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>获取到的堆栈信息，直接可以查看到死锁的存在</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token string">"DestroyJavaVM"</span> <span class="token comment">#15 prio=5 os_prio=0 cpu=453.13ms elapsed=6111.89s tid=0x000002873420d800 nid=0x49c waiting on condition  [0x0000000000000000]</span>   java.lang.Thread.State: RUNNABLE<span class="token string">"VM Thread"</span> <span class="token assign-left variable">os_prio</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">cpu</span><span class="token operator">=</span><span class="token number">15</span>.63ms <span class="token assign-left variable">elapsed</span><span class="token operator">=</span><span class="token number">6112</span>.33s <span class="token assign-left variable">tid</span><span class="token operator">=</span>0x00000287582ba800 <span class="token assign-left variable">nid</span><span class="token operator">=</span>0x2850 runnable<span class="token string">"GC Thread#0"</span> <span class="token assign-left variable">os_prio</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">cpu</span><span class="token operator">=</span><span class="token number">125</span>.00ms <span class="token assign-left variable">elapsed</span><span class="token operator">=</span><span class="token number">6112</span>.35s <span class="token assign-left variable">tid</span><span class="token operator">=</span>0x0000028734225800 <span class="token assign-left variable">nid</span><span class="token operator">=</span>0x1a3c runnable<span class="token string">"G1 Main Marker"</span> <span class="token assign-left variable">os_prio</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">cpu</span><span class="token operator">=</span><span class="token number">15</span>.63ms <span class="token assign-left variable">elapsed</span><span class="token operator">=</span><span class="token number">6112</span>.35s <span class="token assign-left variable">tid</span><span class="token operator">=</span>0x0000028734296000 <span class="token assign-left variable">nid</span><span class="token operator">=</span>0x4b0 runnable<span class="token string">"G1 Conc#0"</span> <span class="token assign-left variable">os_prio</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">cpu</span><span class="token operator">=</span><span class="token number">15</span>.63ms <span class="token assign-left variable">elapsed</span><span class="token operator">=</span><span class="token number">6112</span>.35s <span class="token assign-left variable">tid</span><span class="token operator">=</span>0x0000028734297000 <span class="token assign-left variable">nid</span><span class="token operator">=</span>0x32a4 runnable<span class="token string">"G1 Refine#0"</span> <span class="token assign-left variable">os_prio</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">cpu</span><span class="token operator">=</span><span class="token number">0</span>.00ms <span class="token assign-left variable">elapsed</span><span class="token operator">=</span><span class="token number">6112</span>.33s <span class="token assign-left variable">tid</span><span class="token operator">=</span>0x00000287572b2000 <span class="token assign-left variable">nid</span><span class="token operator">=</span>0x2ef8 runnable<span class="token string">"G1 Young RemSet Sampling"</span> <span class="token assign-left variable">os_prio</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">cpu</span><span class="token operator">=</span><span class="token number">203</span>.13ms <span class="token assign-left variable">elapsed</span><span class="token operator">=</span><span class="token number">6112</span>.33s <span class="token assign-left variable">tid</span><span class="token operator">=</span>0x00000287572b5000 <span class="token assign-left variable">nid</span><span class="token operator">=</span>0x2ddc runnable<span class="token string">"VM Periodic Task Thread"</span> <span class="token assign-left variable">os_prio</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">cpu</span><span class="token operator">=</span><span class="token number">578</span>.13ms <span class="token assign-left variable">elapsed</span><span class="token operator">=</span><span class="token number">6112</span>.27s <span class="token assign-left variable">tid</span><span class="token operator">=</span>0x0000028758710800 <span class="token assign-left variable">nid</span><span class="token operator">=</span>0x192c waiting on conditionJNI global refs: <span class="token number">9</span>, weak refs: <span class="token number">0</span>Found one Java-level deadlock:<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token string">"Thread-0"</span><span class="token builtin class-name">:</span>  waiting to lock monitor 0x00000287582e6280 <span class="token punctuation">(</span>object 0x0000000711c39548, a java.lang.Object<span class="token punctuation">)</span>,  <span class="token function">which</span> is held by <span class="token string">"Thread-1"</span><span class="token string">"Thread-1"</span><span class="token builtin class-name">:</span>  waiting to lock monitor 0x00000287582e6080 <span class="token punctuation">(</span>object 0x0000000711c39538, a java.lang.Object<span class="token punctuation">)</span>,  <span class="token function">which</span> is held by <span class="token string">"Thread-0"</span>Java stack information <span class="token keyword">for</span> the threads listed above:<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token string">"Thread-0"</span><span class="token builtin class-name">:</span>        at top.sciento.wumu.jvm.LockA.run<span class="token punctuation">(</span>JvmLock.java:35<span class="token punctuation">)</span>        - waiting to lock <span class="token operator">&lt;</span>0x0000000711c3954<span class="token operator"><span class="token file-descriptor important">8</span>></span> <span class="token punctuation">(</span>a java.lang.Object<span class="token punctuation">)</span>        - locked <span class="token operator">&lt;</span>0x0000000711c3953<span class="token operator"><span class="token file-descriptor important">8</span>></span> <span class="token punctuation">(</span>a java.lang.Object<span class="token punctuation">)</span>        at java.lang.Thread.run<span class="token punctuation">(</span>java.base@11.0.2/Thread.java:834<span class="token punctuation">)</span><span class="token string">"Thread-1"</span><span class="token builtin class-name">:</span>        at top.sciento.wumu.jvm.LockB.run<span class="token punctuation">(</span>JvmLock.java:55<span class="token punctuation">)</span>        - waiting to lock <span class="token operator">&lt;</span>0x0000000711c3953<span class="token operator"><span class="token file-descriptor important">8</span>></span> <span class="token punctuation">(</span>a java.lang.Object<span class="token punctuation">)</span>        - locked <span class="token operator">&lt;</span>0x0000000711c3954<span class="token operator"><span class="token file-descriptor important">8</span>></span> <span class="token punctuation">(</span>a java.lang.Object<span class="token punctuation">)</span>        at java.lang.Thread.run<span class="token punctuation">(</span>java.base@11.0.2/Thread.java:834<span class="token punctuation">)</span>Found <span class="token number">1</span> deadlock.</code></pre><h2 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h2><blockquote><p>用于打印指定Java进程(或核心文件、远程调试服务器)的共享对象内存映射或堆内存细节。</p></blockquote><blockquote><p>堆Dump是反应Java堆使用情况的内存镜像，其中主要包括系统信息、虚拟机属性、完整的线程Dump、所有类和对象的状态等。 一般，在内存不足、GC异常等情况下，我们就会怀疑有内存泄露。这个时候我们就可以制作堆Dump来查看具体情况。分析原因。</p></blockquote><ol><li>查看java堆（heap）中的对象数量及大小：jmap -histo 31846</li><li>将内存使用的详细情况输出到文件： jmap -dump:format=b,file=heapDump pid然后使用jhat -port 5000 heapDump在浏览器中访问：<a href="https://link.jianshu.com/?t=http://localhost:5000/">http://localhost:5000/</a>查看详细信息</li></ol><h2 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h2><blockquote><p>jinfo可以输出java进程、core文件或远程debug服务器的配置信息。可以使用jps -v替换</p></blockquote><h2 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h2><blockquote><p>是用于监控虚拟机各种运行状态信息的命令行工具。他可以显示本地或远程虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。</p></blockquote><p>jstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]<br> 参数解释：</p><p>Option — 选项，我们一般使用 -gcutil 查看gc情况</p><p>vmid — VM的进程号，即当前运行的java进程号</p><p>interval– 间隔时间，单位为秒或者毫秒</p><p>count — 打印次数，如果缺省则打印无数次</p><p>例子：jstat -gc 5828 250 5</p><p>如下所示为jstat的命令格式</p><pre class="language-none"><code class="language-none">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]1</code></pre><p>如下表示分析进程id为31736 的gc情况，每隔1000ms打印一次记录，打印10次停止，每3行后打印指标头部</p><pre class="language-none"><code class="language-none">jstat -gc -h3 31736 1000 101</code></pre><h3 id="jstat-gc"><a href="#jstat-gc" class="headerlink" title="jstat -gc"></a>jstat -gc</h3><pre class="language-none"><code class="language-none">jstat -gc xxxx1</code></pre><p>其对应的指标含义如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>S0C</td><td>年轻代中第一个survivor（幸存区）的容量 (字节)</td></tr><tr><td>S1C</td><td>年轻代中第二个survivor（幸存区）的容量 (字节)</td></tr><tr><td>S0U</td><td>年轻代中第一个survivor（幸存区）目前已使用空间 (字节)</td></tr><tr><td>S1U</td><td>年轻代中第二个survivor（幸存区）目前已使用空间 (字节)</td></tr><tr><td>EC</td><td>年轻代中Eden（伊甸园）的容量 (字节)</td></tr><tr><td>EU</td><td>年轻代中Eden（伊甸园）目前已使用空间 (字节)</td></tr><tr><td>OC</td><td>Old代的容量 (字节)</td></tr><tr><td>OU</td><td>Old代目前已使用空间 (字节)</td></tr><tr><td>PC</td><td>Perm(持久代)的容量 (字节)</td></tr><tr><td>PU</td><td>Perm(持久代)目前已使用空间 (字节)</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>YGCT</td><td>从应用程序启动到采样时年轻代中gc所用时间(s)</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr><tr><td>FGCT</td><td>从应用程序启动到采样时old代(全gc)gc所用时间(s)</td></tr><tr><td>GCT</td><td>从应用程序启动到采样时gc用的总时间(s)</td></tr></tbody></table><h3 id="jstat-gcutil"><a href="#jstat-gcutil" class="headerlink" title="jstat -gcutil"></a>jstat -gcutil</h3><p>查看gc的统计信息</p><pre class="language-none"><code class="language-none">jstat -gcutil xxxx1</code></pre><p>其对应的指标含义如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>S0</td><td>年轻代中第一个survivor（幸存区）已使用的占当前容量百分比</td></tr><tr><td>S1</td><td>年轻代中第二个survivor（幸存区）已使用的占当前容量百分比</td></tr><tr><td>E</td><td>年轻代中Eden（伊甸园）已使用的占当前容量百分比</td></tr><tr><td>O</td><td>old代已使用的占当前容量百分比</td></tr><tr><td>P</td><td>perm代已使用的占当前容量百分比</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>YGCT</td><td>从应用程序启动到采样时年轻代中gc所用时间(s)</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr><tr><td>FGCT</td><td>从应用程序启动到采样时old代(全gc)gc所用时间(s)</td></tr><tr><td>GCT</td><td>从应用程序启动到采样时gc用的总时间(s)</td></tr></tbody></table><h3 id="jstat-gccapacity"><a href="#jstat-gccapacity" class="headerlink" title="jstat -gccapacity"></a>jstat -gccapacity</h3><pre class="language-none"><code class="language-none">jstat -gccapacity xxxx1</code></pre><p>其对应的指标含义如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>NGCMN</td><td>年轻代(young)中初始化(最小)的大小 (字节)</td></tr><tr><td>NGCMX</td><td>年轻代(young)的最大容量 (字节)</td></tr><tr><td>NGC</td><td>年轻代(young)中当前的容量 (字节)</td></tr><tr><td>S0C</td><td>年轻代中第一个survivor（幸存区）的容量 (字节)</td></tr><tr><td>S1C</td><td>年轻代中第二个survivor（幸存区）的容量 (字节)</td></tr><tr><td>EC</td><td>年轻代中Eden（伊甸园）的容量 (字节)</td></tr><tr><td>OGCMN</td><td>old代中初始化(最小)的大小 (字节)</td></tr><tr><td>OGCMX</td><td>old代的最大容量 (字节)</td></tr><tr><td>OGC</td><td>old代当前新生成的容量 (字节)</td></tr><tr><td>OC</td><td>Old代的容量 (字节)</td></tr><tr><td>PGCMN</td><td>perm代中初始化(最小)的大小 (字节)</td></tr><tr><td>PGCMX</td><td>perm代的最大容量 (字节)</td></tr><tr><td>PGC</td><td>perm代当前新生成的容量 (字节)</td></tr><tr><td>PC</td><td>Perm(持久代)的容量 (字节)</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr></tbody></table><p><strong>4 其他命令</strong></p><ol><li>查看年轻代对象的信息及其占用量。</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">jstat -gcnewcapacity xxxx1</code></pre><ol start="2"><li>查看老年代对象的信息及其占用量。</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">jstat -gcoldcapacity xxxx1</code></pre><ol start="3"><li>查看年轻代对象的信息</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">jstat -gcnew xxxx1</code></pre><ol start="4"><li>查看老年代对象的信息</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">jstat -gcold xxxx</code></pre><h2 id="javap"><a href="#javap" class="headerlink" title="javap"></a>javap</h2><blockquote><p>可以对代码反编译，也可以查看java编译器生成的字节码。</p></blockquote><h2 id="jhsdb-java9以上"><a href="#jhsdb-java9以上" class="headerlink" title="jhsdb(java9以上)"></a>jhsdb(java9以上)</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># jhsdb</span>   clhsdb       <span class="token builtin class-name">command</span> line debugger   debugd       debug server   hsdb         ui debugger   jstack --helpto get <span class="token function">more</span> information   jmap   --helpto get <span class="token function">more</span> information   jinfo  --helpto get <span class="token function">more</span> information   jsnap  --helpto get <span class="token function">more</span> information</code></pre><ul><li>jhsdb是java9引入的，可以在JAVA_HOME/bin目录下找到jhsdb；它取代了jdk9之前的JAVA_HOME/lib/sa-jdi.jar</li><li>jhsdb有clhsdb、debugd、hsdb、jstack、jmap、jinfo、jsnap这些mode可以使用</li><li>其中hsdb为ui debugger，就是jdk9之前的sun.jvm.hotspot.HSDB；而clhsdb即为jdk9之前的sun.jvm.hotspot.CLHSDB</li></ul><h3 id="jhsdb-jstack"><a href="#jhsdb-jstack" class="headerlink" title="jhsdb jstack"></a>jhsdb jstack</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># jhsdb jstack --help</span>   --locksto print java.util.concurrent locks   --mixedto print both java and native frames <span class="token punctuation">(</span>mixed mode<span class="token punctuation">)</span>   --exeexecutable image name   --corepath to coredump   --pidpid of process to attach</code></pre><blockquote><p>–pid用于指定JVM的进程ID；–exe用于指定可执行文件；–core用于指定core dump文件</p></blockquote><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><pre class="language-bash" data-language="bash"><code class="language-bash">jhsdb jstack --mixed --pid <span class="token number">1</span>//<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Caused by: sun.jvm.hotspot.debugger.DebuggerException: get_thread_regs failed <span class="token keyword">for</span> a lwpat jdk.hotspot.agent/sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal.getThreadIntegerRegisterSet0<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal<span class="token variable">$1GetThreadIntegerRegisterSetTask</span>.doit<span class="token punctuation">(</span>LinuxDebuggerLocal.java:534<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal<span class="token variable">$LinuxDebuggerLocalWorkerThread</span>.run<span class="token punctuation">(</span>LinuxDebuggerLocal.java:151<span class="token punctuation">)</span>复制代码</code></pre><blockquote><p>如果出现这个异常表示是采用jdk版本的问题，可以尝试一下其他jdk编译版本</p></blockquote><h3 id="debugger"><a href="#debugger" class="headerlink" title="debugger"></a>debugger</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># jhsdb jstack --locks --pid 1</span>Attaching to process ID <span class="token number">1</span>, please wait<span class="token punctuation">..</span>.Debugger attached successfully.Server compiler detected.JVM version is <span class="token number">12</span>+33Deadlock Detection:No deadlocks found.<span class="token string">"DestroyJavaVM"</span> <span class="token comment">#32 prio=5 tid=0x000055c3b5be0800 nid=0x6 waiting on condition [0x0000000000000000]</span>   java.lang.Thread.State: RUNNABLE   JavaThread state: _thread_blockedLocked ownable synchronizers:    - None<span class="token string">"http-nio-8080-Acceptor-0"</span> <span class="token comment">#30 daemon prio=5 tid=0x000055c3b5d71800 nid=0x2f runnable [0x00007fa0d13de000]</span>   java.lang.Thread.State: RUNNABLE   JavaThread state: _thread_in_native - sun.nio.ch.ServerSocketChannelImpl.accept0<span class="token punctuation">(</span>java.io.FileDescriptor, java.io.FileDescriptor, java.net.InetSocketAddress<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - sun.nio.ch.ServerSocketChannelImpl.accept<span class="token punctuation">(</span>java.io.FileDescriptor, java.io.FileDescriptor, java.net.InetSocketAddress<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">525</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - sun.nio.ch.ServerSocketChannelImpl.accept<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">41</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">277</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - org.apache.tomcat.util.net.NioEndpoint.serverSocketAccept<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">448</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - org.apache.tomcat.util.net.NioEndpoint.serverSocketAccept<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">70</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - org.apache.tomcat.util.net.Acceptor.run<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">98</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">95</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - java.lang.Thread.run<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">11</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">835</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span>Locked ownable synchronizers:    - <span class="token operator">&lt;</span>0x00000000e3aab6e<span class="token operator"><span class="token file-descriptor important">0</span>></span>, <span class="token punctuation">(</span>a java/util/concurrent/locks/ReentrantLock<span class="token variable">$NonfairSync</span><span class="token punctuation">)</span><span class="token string">"http-nio-8080-ClientPoller-0"</span> <span class="token comment">#29 daemon prio=5 tid=0x000055c3b5c20000 nid=0x2e runnable [0x00007fa0d14df000]</span>   java.lang.Thread.State: RUNNABLE   JavaThread state: _thread_in_native - sun.nio.ch.EPoll.wait<span class="token punctuation">(</span>int, long, int, int<span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - sun.nio.ch.EPollSelectorImpl.doSelect<span class="token punctuation">(</span>java.util.function.Consumer, long<span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">96</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">120</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - sun.nio.ch.SelectorImpl.lockAndDoSelect<span class="token punctuation">(</span>java.util.function.Consumer, long<span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">42</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">124</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span>- locked <span class="token operator">&lt;</span>0x00000000e392ece<span class="token operator"><span class="token file-descriptor important">8</span>></span> <span class="token punctuation">(</span>a sun.nio.ch.EPollSelectorImpl<span class="token punctuation">)</span>- locked <span class="token operator">&lt;</span>0x00000000e392ee3<span class="token operator"><span class="token file-descriptor important">8</span>></span> <span class="token punctuation">(</span>a sun.nio.ch.Util<span class="token variable">$2</span><span class="token punctuation">)</span> - sun.nio.ch.SelectorImpl.select<span class="token punctuation">(</span>long<span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">31</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">136</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - org.apache.tomcat.util.net.NioEndpoint<span class="token variable">$Poller</span>.run<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">55</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">743</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - java.lang.Thread.run<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">11</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">835</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span>Locked ownable synchronizers:    - None<span class="token string">"http-nio-8080-exec-10"</span> <span class="token comment">#28 daemon prio=5 tid=0x000055c3b48d6000 nid=0x2d waiting on condition [0x00007fa0d15e0000]</span>   java.lang.Thread.State: WAITING <span class="token punctuation">(</span>parking<span class="token punctuation">)</span>   JavaThread state: _thread_blocked - jdk.internal.misc.Unsafe.park<span class="token punctuation">(</span>boolean, long<span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span>- parking to <span class="token function">wait</span> <span class="token keyword">for</span> <span class="token operator">&lt;</span>0x00000000e390167<span class="token operator"><span class="token file-descriptor important">0</span>></span> <span class="token punctuation">(</span>a java/util/concurrent/locks/AbstractQueuedSynchronizer<span class="token variable">$ConditionObject</span><span class="token punctuation">)</span> - java.util.concurrent.locks.LockSupport.park<span class="token punctuation">(</span>java.lang.Object<span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">14</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">194</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="token variable">$ConditionObject</span>.await<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">42</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">2081</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - java.util.concurrent.LinkedBlockingQueue.take<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">27</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">433</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - org.apache.tomcat.util.threads.TaskQueue.take<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">36</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">107</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - org.apache.tomcat.util.threads.TaskQueue.take<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">33</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - java.util.concurrent.ThreadPoolExecutor.getTask<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">147</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">1054</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - java.util.concurrent.ThreadPoolExecutor.runWorker<span class="token punctuation">(</span>java.util.concurrent.ThreadPoolExecutor<span class="token variable">$Worker</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">26</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">1114</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - java.util.concurrent.ThreadPoolExecutor<span class="token variable">$Worker</span>.run<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">5</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">628</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - org.apache.tomcat.util.threads.TaskThread<span class="token variable">$WrappingRunnable</span>.run<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">61</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - java.lang.Thread.run<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">11</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">835</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> //<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>/ <span class="token comment"># jhsdb jstack --mixed --pid 1</span>Attaching to process ID <span class="token number">1</span>, please wait<span class="token punctuation">..</span>.Debugger attached successfully.Server compiler detected.JVM version is <span class="token number">12</span>+33Deadlock Detection:No deadlocks found.----------------- <span class="token number">47</span> -----------------<span class="token string">"http-nio-8080-Acceptor-0"</span> <span class="token comment">#30 daemon prio=5 tid=0x000055c3b5d71800 nid=0x2f runnable [0x00007fa0d13de000]</span>   java.lang.Thread.State: RUNNABLE   JavaThread state: _thread_in_native0x00007fa0ee0923ad????????----------------- <span class="token number">46</span> -----------------<span class="token string">"http-nio-8080-ClientPoller-0"</span> <span class="token comment">#29 daemon prio=5 tid=0x000055c3b5c20000 nid=0x2e runnable [0x00007fa0d14df000]</span>   java.lang.Thread.State: RUNNABLE   JavaThread state: _thread_in_native0x00007fa0ee05f3d0epoll_pwait + 0x1d0x00007fa0daa97810* sun.nio.ch.EPoll.wait<span class="token punctuation">(</span>int, long, int, int<span class="token punctuation">)</span> bci:0 <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span>0x00007fa0daa91680* sun.nio.ch.EPollSelectorImpl.doSelect<span class="token punctuation">(</span>java.util.function.Consumer, long<span class="token punctuation">)</span> bci:96 line:120 <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span>0x00007fa0db85f57c* sun.nio.ch.SelectorImpl.lockAndDoSelect<span class="token punctuation">(</span>java.util.function.Consumer, long<span class="token punctuation">)</span> bci:42 line:124 <span class="token punctuation">(</span>Compiled frame<span class="token punctuation">)</span>* sun.nio.ch.SelectorImpl.select<span class="token punctuation">(</span>long<span class="token punctuation">)</span> bci:31 line:136 <span class="token punctuation">(</span>Compiled frame<span class="token punctuation">)</span>* org.apache.tomcat.util.net.NioEndpoint<span class="token variable">$Poller</span>.run<span class="token punctuation">(</span><span class="token punctuation">)</span> bci:55 line:743 <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span>0x00007fa0daa91c88* java.lang.Thread.run<span class="token punctuation">(</span><span class="token punctuation">)</span> bci:11 line:835 <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span>0x00007fa0daa88849<span class="token operator">&lt;</span>StubRoutines<span class="token operator">></span>0x00007fa0ed122952_ZN9JavaCalls11call_helperEP9JavaValueRK12methodHandleP17JavaCallArgumentsP6Thread + 0x3c20x00007fa0ed1208d0_ZN9JavaCalls12call_virtualEP9JavaValue6HandleP5KlassP6SymbolS6_P6Thread + 0x2000x00007fa0ed1ccfc5_ZL12thread_entryP10JavaThreadP6Thread + 0x750x00007fa0ed74f3a3_ZN10JavaThread17thread_main_innerEv + 0x1030x00007fa0ed74c3f5_ZN6Thread8call_runEv + 0x750x00007fa0ed4a477e_ZL19thread_native_entryP6Thread + 0xee//<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><blockquote><p>–locks或者–mixed花费的时间可能比较长(<code>几分钟，可能要将近6分钟</code>)，因而进程暂停的时间也可能比较长，在使用这两个选项时要注意</p></blockquote><h3 id="jhsdb-jmap"><a href="#jhsdb-jmap" class="headerlink" title="jhsdb jmap"></a>jhsdb jmap</h3><h3 id="jmap-heap-pid"><a href="#jmap-heap-pid" class="headerlink" title="jmap -heap pid"></a>jmap -heap pid</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># jmap -heap 1</span>Error: -heap option usedCannot connect to core dump or remote debug server. Use jhsdb jmap instead</code></pre><blockquote><p>jdk9及以上版本使用jmap -heap pid命令查看当前heap使用情况时，发现报错，提示需要使用jhsdb jmap来替代</p></blockquote><h3 id="jhsdb-jmap-pid"><a href="#jhsdb-jmap-pid" class="headerlink" title="jhsdb jmap pid"></a>jhsdb jmap pid</h3><pre class="language-bash" data-language="bash"><code class="language-bash"> <span class="token comment"># jhsdb jmap 1</span>sh: jhsdb: not found</code></pre><blockquote><p>发现jlink的时候没有添加jdk.hotspot.agent这个module，添加了这个module之后可以发现JAVA_HOME/bin目录下就有了jhsdb</p></blockquote><h3 id="PTRACE-ATTACH-failed"><a href="#PTRACE-ATTACH-failed" class="headerlink" title="PTRACE_ATTACH failed"></a>PTRACE_ATTACH failed</h3><pre class="language-bash" data-language="bash"><code class="language-bash"> <span class="token comment"># jhsdb jmap 1</span>You have to <span class="token builtin class-name">set</span> --pid or --exe.    <span class="token operator">&lt;</span>no option<span class="token operator">></span>to print same info as Solaris pmap    --heapto print java heap summary    --binaryheapto dump java heap <span class="token keyword">in</span> hprof binary <span class="token function">format</span>    --dumpfilename of the dump <span class="token function">file</span>    --histoto print histogram of java object heap    --clstatsto print class loader statistics    --finalizerinfoto print information on objects awaiting finalization    --exeexecutable image name    --corepath to coredump    --pidpid of process to attach/ <span class="token comment"># jhsdb jmap --heap --pid 1</span>Attaching to process ID <span class="token number">1</span>, please wait<span class="token punctuation">..</span>.ERROR: ptrace<span class="token punctuation">(</span>PTRACE_ATTACH, <span class="token punctuation">..</span><span class="token punctuation">)</span> failed <span class="token keyword">for</span> <span class="token number">1</span>: Operation not permittedError attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can<span class="token string">'t attach to the process: ptrace(PTRACE_ATTACH, ..) failed for 1: Operation not permittedsun.jvm.hotspot.debugger.DebuggerException: sun.jvm.hotspot.debugger.DebuggerException: Can'</span>t attach to the process: ptrace<span class="token punctuation">(</span>PTRACE_ATTACH, <span class="token punctuation">..</span><span class="token punctuation">)</span> failed <span class="token keyword">for</span> <span class="token number">1</span>: Operation not permittedat jdk.hotspot.agent/sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal<span class="token variable">$LinuxDebuggerLocalWorkerThread</span>.execute<span class="token punctuation">(</span>LinuxDebuggerLocal.java:176<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal.attach<span class="token punctuation">(</span>LinuxDebuggerLocal.java:336<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.attachDebugger<span class="token punctuation">(</span>HotSpotAgent.java:672<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.setupDebuggerLinux<span class="token punctuation">(</span>HotSpotAgent.java:612<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.setupDebugger<span class="token punctuation">(</span>HotSpotAgent.java:338<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.go<span class="token punctuation">(</span>HotSpotAgent.java:305<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.attach<span class="token punctuation">(</span>HotSpotAgent.java:141<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.start<span class="token punctuation">(</span>Tool.java:185<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.execute<span class="token punctuation">(</span>Tool.java:118<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.tools.JMap.main<span class="token punctuation">(</span>JMap.java:176<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runJMAP<span class="token punctuation">(</span>SALauncher.java:326<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main<span class="token punctuation">(</span>SALauncher.java:455<span class="token punctuation">)</span>Caused by: sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process: ptrace<span class="token punctuation">(</span>PTRACE_ATTACH, <span class="token punctuation">..</span><span class="token punctuation">)</span> failed <span class="token keyword">for</span> <span class="token number">1</span>: Operation not permittedat jdk.hotspot.agent/sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal.attach0<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal<span class="token variable">$1AttachTask</span>.doit<span class="token punctuation">(</span>LinuxDebuggerLocal.java:326<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal<span class="token variable">$LinuxDebuggerLocalWorkerThread</span>.run<span class="token punctuation">(</span>LinuxDebuggerLocal.java:151<span class="token punctuation">)</span></code></pre><blockquote><p>发现PTRACE_ATTACH被docker禁用了，需要在运行容器时启用PTRACE_ATTACH</p></blockquote><h3 id="docker启用SYS-PTRACE"><a href="#docker启用SYS-PTRACE" class="headerlink" title="docker启用SYS_PTRACE"></a>docker启用SYS_PTRACE</h3><pre class="language-bash" data-language="bash"><code class="language-bash">docker run --cap-add<span class="token operator">=</span>SYS_PTRACE</code></pre><p>之后就可以正常使用jhsdb如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># jhsdb jmap --heap --pid 1</span>Attaching to process ID <span class="token number">1</span>, please wait<span class="token punctuation">..</span>.Debugger attached successfully.Server compiler detected.JVM version is <span class="token number">12</span>+33using thread-local object allocation.Shenandoah GC with <span class="token number">4</span> thread<span class="token punctuation">(</span>s<span class="token punctuation">)</span>Heap Configuration:   MinHeapFreeRatio         <span class="token operator">=</span> <span class="token number">40</span>   MaxHeapFreeRatio         <span class="token operator">=</span> <span class="token number">70</span>   MaxHeapSize              <span class="token operator">=</span> <span class="token number">523763712</span> <span class="token punctuation">(</span><span class="token number">499</span>.5MB<span class="token punctuation">)</span>   NewSize                  <span class="token operator">=</span> <span class="token number">1363144</span> <span class="token punctuation">(</span><span class="token number">1</span>.2999954223632812MB<span class="token punctuation">)</span>   MaxNewSize               <span class="token operator">=</span> <span class="token number">17592186044415</span> MB   OldSize                  <span class="token operator">=</span> <span class="token number">5452592</span> <span class="token punctuation">(</span><span class="token number">5</span>.1999969482421875MB<span class="token punctuation">)</span>   NewRatio                 <span class="token operator">=</span> <span class="token number">2</span>   SurvivorRatio            <span class="token operator">=</span> <span class="token number">8</span>   MetaspaceSize            <span class="token operator">=</span> <span class="token number">21807104</span> <span class="token punctuation">(</span><span class="token number">20</span>.796875MB<span class="token punctuation">)</span>   CompressedClassSpaceSize <span class="token operator">=</span> <span class="token number">1073741824</span> <span class="token punctuation">(</span><span class="token number">1024</span>.0MB<span class="token punctuation">)</span>   MaxMetaspaceSize         <span class="token operator">=</span> <span class="token number">17592186044415</span> MB   ShenandoahRegionSize     <span class="token operator">=</span> <span class="token number">262144</span> <span class="token punctuation">(</span><span class="token number">0</span>.25MB<span class="token punctuation">)</span>Heap Usage:Shenandoah Heap:   regions   <span class="token operator">=</span> <span class="token number">1997</span>   capacity  <span class="token operator">=</span> <span class="token number">523501568</span> <span class="token punctuation">(</span><span class="token number">499</span>.25MB<span class="token punctuation">)</span>   used      <span class="token operator">=</span> <span class="token number">70470552</span> <span class="token punctuation">(</span><span class="token number">67</span>.2059555053711MB<span class="token punctuation">)</span>   committed <span class="token operator">=</span> <span class="token number">144441344</span> <span class="token punctuation">(</span><span class="token number">137</span>.75MB<span class="token punctuation">)</span></code></pre><h3 id="jhsdb-jinfo"><a href="#jhsdb-jinfo" class="headerlink" title="jhsdb jinfo"></a>jhsdb jinfo</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># jhsdb jinfo --help</span>   --flagsto print VM flags   --syspropsto print Java System properties   <span class="token operator">&lt;</span>no option<span class="token operator">></span>to print both of the above   --exeexecutable image name   --corepath to coredump   --pidpid of process to attach</code></pre><blockquote><p>使用jhsdb显示jinfo的sysprops如下：</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"> <span class="token comment"># jhsdb jinfo --sysprops --pid 1</span>Attaching to process ID <span class="token number">1</span>, please wait<span class="token punctuation">..</span>.Debugger attached successfully.Server compiler detected.JVM version is <span class="token number">12</span>+33awt.toolkit <span class="token operator">=</span> sun.awt.X11.XToolkitjava.specification.version <span class="token operator">=</span> <span class="token number">12</span>sun.jnu.encoding <span class="token operator">=</span> UTF-8//<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><blockquote><p>这个命令其实跟jinfo -sysprops 1是等价的</p></blockquote><h3 id="jhsdb-jsnap"><a href="#jhsdb-jsnap" class="headerlink" title="jhsdb jsnap"></a>jhsdb jsnap</h3><pre class="language-none"><code class="language-none"># jhsdb jsnap --pid 1Attaching to process ID 1, please wait...Debugger attached successfully.Server compiler detected.JVM version is 12+33java.threads.started&#x3D;27 event(s)java.threads.live&#x3D;24java.threads.livePeak&#x3D;24java.threads.daemon&#x3D;20java.cls.loadedClasses&#x3D;8250 event(s)java.cls.unloadedClasses&#x3D;1 event(s)java.cls.sharedLoadedClasses&#x3D;0 event(s)java.cls.sharedUnloadedClasses&#x3D;0 event(s)java.ci.totalTime&#x3D;18236958158 tick(s)java.property.java.vm.specification.version&#x3D;12java.property.java.vm.specification.name&#x3D;Java Virtual Machine Specificationjava.property.java.vm.specification.vendor&#x3D;Oracle Corporationjava.property.java.vm.version&#x3D;12+33java.property.java.vm.name&#x3D;OpenJDK 64-Bit Server VMjava.property.java.vm.vendor&#x3D;Azul Systems, Inc.java.property.java.vm.info&#x3D;mixed modejava.property.jdk.debug&#x3D;release&#x2F;&#x2F;......</code></pre><blockquote><p>jhsdb jsnap的功能主要是由jdk.hotspot.agent模块中的sun.jvm.hotspot.tools.JSnap.java来提供的，它可以用于查看threads及class loading/unloading相关的event、JVM属性参数等，其中–all可以显示更多的JVM属性参数</p></blockquote><h3 id="jhsdb与jcmd"><a href="#jhsdb与jcmd" class="headerlink" title="jhsdb与jcmd"></a>jhsdb与jcmd</h3><p><a href="https://dzone.com/articles/jhsdb-a-new-tool-for-jdk-9">jhsdb: A New Tool for JDK 9</a>这篇文章中列出了jhsdb与jcmd的等价命令，如下图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/27/169bdde54fd27641?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>在java9之前，JAVA_HOME/lib目录下有个sa-jdi.jar，可以通过如上命令启动HSDB(<code>图形界面</code>)及CLHSDB(<code>命令行</code>)；sa-jdi.jar中的sa的全称为Serviceability Agent，它之前是sun公司提供的一个用于协助调试HotSpot的组件，而HSDB便是使用Serviceability Agent来实现的；HSDB就是HotSpot Debugger的简称，由于Serviceability Agent在使用的时候会先attach进程，然后暂停进程进行snapshot，最后deattach进程(<code>进程恢复运行</code>)，所以在使用HSDB时要注意</li><li>jhsdb是java9引入的，可以在JAVA_HOME/bin目录下找到jhsdb；它取代了jdk9之前的JAVA_HOME/lib/sa-jdi.jar；jhsdb有clhsdb、debugd、hsdb、jstack、jmap、jinfo、jsnap这些mode可以使用；其中hsdb为ui debugger，就是jdk9之前的sun.jvm.hotspot.HSDB；而clhsdb即为jdk9之前的sun.jvm.hotspot.CLHSDB</li><li>jhsdb在jdk.hotspot.agent这个模块中；对于jhsdb jstack的–locks或者–mixed命令花费的时间可能比较长(<code>几分钟，可能要将近6分钟</code>)，因而进程暂停的时间也可能比较长，在使用这两个选项时要注意；对于jdk9及以后的版本不再使用jmap -heap命令来查询heap内存情况，需要用jhsdb jmap –heap –pid来替代；使用jhsdb jmap需要在运行容器时启用PTRACE_ATTACH才可以</li></ul><h3 id="doc"><a href="#doc" class="headerlink" title="doc"></a>doc</h3><ul><li><a href="https://segmentfault.com/a/1190000004621417">JVM信息查看</a></li><li><a href="https://docs.oracle.com/en/java/javase/12/tools/jhsdb.html">jhsdb</a></li><li><a href="https://docs.oracle.com/en/java/javase/12/docs/api/jdk.hotspot.agent/module-summary.html#jhsdb">jdk.hotspot.agent jhsdb</a></li><li><a href="https://dzone.com/articles/jhsdb-a-new-tool-for-jdk-9">jhsdb: A New Tool for JDK 9</a></li><li><a href="http://marxsoftware.blogspot.com/2016/02/jcmd-one-jdk-command-line-tool-to-rule.html">jcmd: One JDK Command-Line Tool to Rule Them All</a></li><li><a href="https://jarekprzygodzki.wordpress.com/2016/12/19/jvm-in-docker-and-ptrace_attach/">JVM in Docker and PTRACE_ATTACH</a></li><li><a href="http://openjdk.java.net/groups/hotspot/docs/Serviceability.html">Serviceability in HotSpot</a></li><li><a href="https://www.usenix.org/legacy/events/jvm01/full_papers/russell/russell_html/index.html">The HotSpot™ Serviceability Agent: An out-of-process high level debugger for a Java™ virtual machine</a></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.jianshu.com/p/bacc64527894">https://www.jianshu.com/p/bacc64527894</a></p><p><a href="https://juejin.cn/post/6844903808057753613">https://juejin.cn/post/6844903808057753613</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jvm基本命令&quot;&gt;&lt;a href=&quot;#jvm基本命令&quot; class=&quot;headerlink&quot; title=&quot;jvm基本命令&quot;&gt;&lt;/a&gt;jvm基本命令&lt;/h1&gt;&lt;h2 id=&quot;jps&quot;&gt;&lt;a href=&quot;#jps&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://wumuwumu.github.io/2020/12/16/%E8%BF%90%E7%BB%B4/systemd%E6%96%87%E4%BB%B6%E6%A8%A1%E6%9D%BF/"/>
    <id>http://wumuwumu.github.io/2020/12/16/%E8%BF%90%E7%BB%B4/systemd%E6%96%87%E4%BB%B6%E6%A8%A1%E6%9D%BF/</id>
    <published>2020-12-16T12:59:05.006Z</published>
    <updated>2020-12-16T12:59:05.006Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><pre class="language-none"><code class="language-none">Description&#x3D;My Miscellaneous ServiceRequires&#x3D;network-online.targetAfter&#x3D;network-online.target[Service]Type&#x3D;simpleUser&#x3D;anonymousWorkingDirectory&#x3D;&#x2F;home&#x2F;anonymousExecStart&#x3D;some_can_execute --option&#x3D;123Restart&#x3D;on-failure[Install]WantedBy&#x3D;multi-user.target</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;hr&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;Description&amp;#x3D;My Miscellaneous Service
Requires&amp;#x3D;network-online.targ</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wumuwumu.github.io/2020/12/16/hello-world/"/>
    <id>http://wumuwumu.github.io/2020/12/16/hello-world/</id>
    <published>2020-12-16T12:59:04.983Z</published>
    <updated>2020-12-16T12:59:04.983Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
